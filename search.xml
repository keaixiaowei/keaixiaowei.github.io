<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++面经.md</title>
      <link href="/2022/07/29/C-%E9%9D%A2%E7%BB%8F/"/>
      <url>/2022/07/29/C-%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-语言基础-C-x2F-C"><a href="#1-语言基础-C-x2F-C" class="headerlink" title="1 语言基础(C&#x2F;C++)"></a>1 语言基础(C&#x2F;C++)</h2><h3 id="1-1-指针和引用的区别"><a href="#1-1-指针和引用的区别" class="headerlink" title="1.1 指针和引用的区别"></a>1.1 指针和引用的区别</h3><p>引用是一种更安全的指针</p><p>(1)引用是必须初始化的，指针可以不初始化</p><p>(2)引用只有一级引用，没有多级引用;指针可以有一级指针，也可以有多级指针</p><p>(3)定义一个引用变量，和定义一个指针变量，其汇编指令是一模一样的；通过引用变量修改所引用内存的值，和通过指针解引用修改指针指向的内存的值，其底层指令也是一模一样的</p><h3 id="1-2-如何输入文件结束符"><a href="#1-2-如何输入文件结束符" class="headerlink" title="1.2 如何输入文件结束符"></a>1.2 如何输入文件结束符</h3><p>​敲Ctrl+Z,然后按Enter或Return键。</p><h3 id="1-2-函数调用过程中对象背后调用的方法太多"><a href="#1-2-函数调用过程中对象背后调用的方法太多" class="headerlink" title="1.2 函数调用过程中对象背后调用的方法太多"></a>1.2 函数调用过程中对象背后调用的方法太多</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">int</span> a): <span class="built_in">m_a</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">const</span> Test &amp; t):<span class="built_in">m_a</span>(t.m_a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = t.m_a;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getdata</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">getv</span><span class="params">(Test t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> val = t.<span class="built_in">getdata</span>();</span><br><span class="line"></span><br><span class="line">Test t1 = <span class="built_in">Test</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t1;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2; </span><br><span class="line">t2 = <span class="built_in">getv</span>(t1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注:</strong>(1)  t1构造函数-&gt;t2构造函数-&gt;getv函数-&gt;Test t &#x3D; t1 拷贝构造函数-&gt;Test t1 &#x3D; Test(val) 有参构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;getv函数结束后t1析构-&gt;t析构-&gt;t2 &#x3D; 临时对象赋值操作-&gt;赋值完成后临时对象析构-&gt;t2析构-&gt;t1析构 </p><p><img src="E:/E/蔡伟/14-笔记/图片/1-02程序结果.png" alt="本地png图片PictureTest.png"></p><h3 id="1-3-总结三条对象优化的规则"><a href="#1-3-总结三条对象优化的规则" class="headerlink" title="1.3 总结三条对象优化的规则"></a>1.3 总结三条对象优化的规则</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">int</span> a): <span class="built_in">m_a</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">const</span> Test &amp; t):<span class="built_in">m_a</span>(t.m_a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = t.m_a;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getdata</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">getv1</span><span class="params">(Test &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> val = t.<span class="built_in">getdata</span>();</span><br><span class="line"></span><br><span class="line">Test t1 = <span class="built_in">Test</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t1;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">getv2</span><span class="params">(Test &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> val = t.<span class="built_in">getdata</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Test</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2; </span><br><span class="line">t2 = <span class="built_in">getv1</span>(t1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2; </span><br><span class="line">t2 = <span class="built_in">getv2</span>(t1);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2 = <span class="built_in">getv2</span>(t1); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test03</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-1-函数参数传递过程中，对象有限按引用传递，不要按值传递"><a href="#1-3-1-函数参数传递过程中，对象有限按引用传递，不要按值传递" class="headerlink" title="1.3.1 函数参数传递过程中，对象有限按引用传递，不要按值传递"></a>1.3.1 函数参数传递过程中，对象有限按引用传递，不要按值传递</h4><p>​ t1构造函数-&gt;t2构造函数-&gt;getv函数-&gt;Test t1 &#x3D; Test(val) 有参构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;getv函数结束后t1析构-&gt;t2 &#x3D; 临时对象赋值操作-&gt;赋值完成后临时对象析构-&gt;t2析构-&gt;t1析构 </p><h4 id="1-3-2-函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象"><a href="#1-3-2-函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象" class="headerlink" title="1.3.2 函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象"></a>1.3.2 函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象</h4><p>​ t1构造函数-&gt;t2构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;t2 &#x3D; 临时对象赋值操作-&gt;赋值完成后临时对象析构-&gt;t2析构-&gt;t1析构 </p><h4 id="1-3-3-接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受"><a href="#1-3-3-接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受" class="headerlink" title="1.3.3 接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受"></a>1.3.3 接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受</h4><p>​ t1构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;t2 &#x3D; 临时对象赋值操作-&gt;t2析构-&gt;t1析构 </p><h3 id="1-4-CMyString的代码问题"><a href="#1-4-CMyString的代码问题" class="headerlink" title="1.4 CMyString的代码问题"></a>1.4 CMyString的代码问题</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//会利用拷贝构造函数生成一个临时对象，会在栈上临时开辟内存，再将内容拷贝到内存上</span></span><br><span class="line"><span class="comment">//这大大增加了资源的损耗 </span></span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;11111111111111111&quot;</span>)</span></span>;</span><br><span class="line">    String str2;</span><br><span class="line">    str2 = <span class="built_in">get_string</span>(str1);</span><br><span class="line">    cout &lt;&lt; str2.<span class="built_in">c_str</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1)会利用拷贝构造函数生成一个临时对象，会在栈上临时开辟内存，再将内容拷贝到内存上，这大大增加了资源的损耗 </p><h3 id="1-5-添加右值引用参数的拷贝构造和赋值函数"><a href="#1-5-添加右值引用参数的拷贝构造和赋值函数" class="headerlink" title="1.5 添加右值引用参数的拷贝构造和赋值函数"></a>1.5 添加右值引用参数的拷贝构造和赋值函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class String</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    String(const char* str = nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;String(const char*)&quot; &lt;&lt; endl;</span><br><span class="line">        if (str != nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = new char[strlen(str) + 1];</span><br><span class="line">            strcpy(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = new char[1];</span><br><span class="line">            *m_data = &#x27;\0&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String(const String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;String(const String&amp; src)&quot; &lt;&lt; endl;</span><br><span class="line">        m_data = new char[strlen(src.m_data) + 1];</span><br><span class="line">        strcpy(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;String(String&amp;&amp; src)&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;m_data = src.m_data;</span><br><span class="line">src.m_data = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">    ~String()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;~String()&quot; &lt;&lt; endl;</span><br><span class="line">        delete[]m_data;</span><br><span class="line">        m_data = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //调用String&amp;是为了支持连续的operator=赋值操作</span><br><span class="line">    String&amp; operator=(const String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;operator=(const String &amp;str)&quot; &lt;&lt; endl;</span><br><span class="line">        if (&amp;str == this)</span><br><span class="line">        &#123;</span><br><span class="line">            return *this;</span><br><span class="line">        &#125;</span><br><span class="line">        delete[]m_data;</span><br><span class="line">        m_data = new char[strlen(str.m_data) + 1];</span><br><span class="line">        strcpy(m_data, str.m_data);</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        //调用String&amp;是为了支持连续的operator=赋值操作</span><br><span class="line">    String&amp; operator=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;operator=(String&amp;&amp; str)&quot; &lt;&lt; endl;</span><br><span class="line">        if (&amp;str == this)</span><br><span class="line">        &#123;</span><br><span class="line">            return *this;</span><br><span class="line">        &#125;</span><br><span class="line">        delete[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = nullptr;</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const char* c_str() </span><br><span class="line">&#123;</span><br><span class="line">        return m_data;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    char* m_data;//用于保存字符串</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">String get_string(String&amp; str) &#123;</span><br><span class="line">    const char* pstr = str.c_str();</span><br><span class="line">    String tmp(pstr);</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    String str1(&quot;11111111111111111&quot;);</span><br><span class="line">    String str2;</span><br><span class="line">    str2 = get_string(str1);</span><br><span class="line">    cout &lt;&lt; str2.c_str() &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1) 改进方法:改用右值引用去接受这个临时对象，就不需要在栈上临时开辟内存，直接接受临时对象的内容，再将临时对象的内容置为空，这样的析构也减少了资源损耗</p><h3 id="1-6-CMyString在vector上的应用"><a href="#1-6-CMyString在vector上的应用" class="headerlink" title="1.6 CMyString在vector上的应用"></a>1.6 CMyString在vector上的应用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs);</span><br><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(String&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_data = src.m_data;</span><br><span class="line">src.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(String&amp;&amp; str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *tmpstr = <span class="keyword">new</span> <span class="built_in">char</span>(<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(tmpstr,lhs.m_data);</span><br><span class="line"><span class="built_in">strcat</span>(tmpstr,rhs.m_data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tmpstr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">str2</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">    String str3 = str1 + str2;</span><br><span class="line">cout &lt;&lt; str3;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注:**每次调用+号时都会申请一块内存，但这块内存并没有释放，很容易造成内存泄漏。</p><p>**改进方法:**使用有参构造出一个对象来，在将申请的内存释放掉</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs);</span><br><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(String&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_data = src.m_data;</span><br><span class="line">src.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(String&amp;&amp; str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *tmpstr = <span class="keyword">new</span> <span class="built_in">char</span>(<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(tmpstr,lhs.m_data);</span><br><span class="line"><span class="built_in">strcat</span>(tmpstr,rhs.m_data);</span><br><span class="line"><span class="function">String <span class="title">str</span><span class="params">(tmpstr)</span></span>;</span><br><span class="line"><span class="keyword">delete</span> [] tmpstr;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">str2</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">    String str3 = str1 + str2;</span><br><span class="line">cout &lt;&lt; str3;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**缺点:**申请一大块内存给构造出来的对象，然后又在内存中剔除，在拷贝构造函数中，也申请一大块内存，这加大了资源的损耗。</p><p>**改进方法:**直接使用右值引用接受这个临时对象，让str3直接指向申请的这块内存，再将内同拷贝给str3.m_data,再将之前申请的这块内存置为空，析构函数也没起到作用，减小资源的损耗</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs);</span><br><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(String&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_data = src.m_data;</span><br><span class="line">src.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(String&amp;&amp; str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">String str;</span><br><span class="line">str.m_data = <span class="keyword">new</span> <span class="built_in">char</span>(<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(str.m_data,lhs.m_data);</span><br><span class="line"><span class="built_in">strcat</span>(str.m_data,rhs.m_data);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">str2</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    String str3 = str1 + str2;</span><br><span class="line">cout &lt;&lt; str3;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="E:/E/蔡伟/14-笔记/图片/1-06(1)程序结果.png" alt="本地png图片PictureTest.png"></p><p>一道校招题</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs);</span><br><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(String&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_data = src.m_data;</span><br><span class="line">src.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(String&amp;&amp; str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">String str;</span><br><span class="line">str.m_data = <span class="keyword">new</span> <span class="built_in">char</span>(<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(str.m_data,lhs.m_data);</span><br><span class="line"><span class="built_in">strcat</span>(str.m_data,rhs.m_data);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">vector&lt;String&gt; pstring;</span><br><span class="line"></span><br><span class="line">pstring.<span class="built_in">reserve</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">pstring.<span class="built_in">push_back</span>(str1);</span><br><span class="line">pstring.<span class="built_in">push_back</span>(<span class="built_in">String</span>(<span class="string">&quot;world&quot;</span>));</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="E:/E/蔡伟/14-笔记/图片/1-06(2)程序结果.png" alt="本地png图片PictureTest.png"></p><h3 id="1-7-move移动语义和forward类型完美转发"><a href="#1-7-move移动语义和forward类型完美转发" class="headerlink" title="1.7 move移动语义和forward类型完美转发"></a>1.7 move移动语义和forward类型完美转发</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, <span class="type">const</span> T&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span>(p)<span class="built_in">T</span>(val);<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, T&amp;&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">new</span>(p)<span class="built_in">T</span>(std::<span class="built_in">move</span>(val));<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T&amp; val)</span><span class="comment">//向容器末尾添加元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">        <span class="built_in">expand</span>();</span><br><span class="line">   *_last++ = val;<span class="comment">//last指针指向的内存构造一个值为val的对象</span></span><br><span class="line">    _allocator.<span class="built_in">construct</span>(_last, val);</span><br><span class="line">    _last++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T&amp;&amp; val)</span><span class="comment">//向容器末尾添加元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">        <span class="built_in">expand</span>();</span><br><span class="line">    *_last++ = val;<span class="comment">//last指针指向的内存构造一个值为val的对象</span></span><br><span class="line">    _allocator.<span class="built_in">construct</span>(_last, std::<span class="built_in">move</span>(val));</span><br><span class="line">    _last++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注:**右值引用本身也是左值，当调用push_back时，底层也只会调用左值引用的构造函数，而不会调用右值引用的构造函数，所以需要使用move进行强转成右值引用。</p><p>**缺点:**代码量太多</p><p>**改进方法:**使用模板函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, <span class="type">const</span> T&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span>(p)<span class="built_in">T</span>(val);<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, T&amp;&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">new</span>(p)<span class="built_in">T</span>(std::<span class="built_in">move</span>(val));<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Ty1&gt; <span class="comment">// 换个名会进行类型推演，直接用T直接断定是右值引用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(Ty1&amp;&amp; val)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">expand</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forward：类型的完美转发</span></span><br><span class="line">_allocator.<span class="built_in">construct</span>(_last, val);</span><br><span class="line">_last++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注:</strong>   函数模板的类型推演 + 引用折叠 String&amp;&amp; + &amp;&amp; &#x3D; String&amp;&amp; String&amp; + &amp;&amp; &#x3D; String&amp;  </p><p>**缺点:**底层也只会调用左值引用的构造函数</p><p><strong>改进方法</strong>:使用forward进行类型的完美转换,能够识别左值和右值类型</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template&lt;typename Ty2&gt;</span><br><span class="line">void construct(T* p, Ty2&amp;&amp; val)//负责对象构造</span><br><span class="line">&#123;</span><br><span class="line">    new (p) T(std::forward&lt;Ty2&gt;(val));//定位new</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Ty1&gt; // 换个名会进行类型推演，直接用T直接断定是右值引用</span><br><span class="line">void push_back(Ty1&amp;&amp; val) </span><br><span class="line">&#123;</span><br><span class="line">if (full())</span><br><span class="line">&#123;</span><br><span class="line">expand();</span><br><span class="line">&#125;</span><br><span class="line">// forward：类型的完美转发</span><br><span class="line">_allocator.construct(_last, std::forward&lt;Ty1&gt;(val));</span><br><span class="line">_last++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-体验一下智能指针的强大"><a href="#2-体验一下智能指针的强大" class="headerlink" title="2 体验一下智能指针的强大"></a>2 体验一下智能指针的强大</h2><h3 id="2-1-基础知识"><a href="#2-1-基础知识" class="headerlink" title="2.1 基础知识"></a>2.1 基础知识</h3><p>裸指针到底有什么不好，写过一些C++代码的人应该都能知道，比如下面的原因：</p><p>(1)忘记释放资源，导致资源泄露（常发生内存泄漏问题）<br>(2)同一资源释放多次，导致释放野指针，程序崩溃<br>(3)明明代码的后面写了释放资源的代码，但是由于程序逻辑满足条件，从中间return掉了，导致释放资源的代码未被执行到<br>(4)代码运行过程中发生异常，随着异常栈展开，导致释放资源的代码未被执行到</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPointer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SmartPointer</span>(T *point = <span class="literal">NULL</span>):<span class="built_in">pointer</span>(point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SmartPointer</span>(<span class="type">const</span> SmartPointer&lt;T&gt; &amp;point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">T &amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T * <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">SmartPointer</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T * pointer; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_num = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person &amp;person) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_num:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s</span><span class="params">(<span class="keyword">new</span> Person)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s1</span><span class="params">(s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>智能指针的优点:</strong></p><p>(1)智能指针体现在把裸指针进行了一次面向对象的封装，在构造函数中初始化资源地址，在析构函数中负责释放资源</p><p>(2)利用栈上的对象出作用域自动析构这个特点，在智能指针的析构函数中保证释放</p><p><strong>智能指针的缺点:</strong>                                                                                                                                                                                                         </p><p>(1)怎么解决智能指针的浅拷贝问题</p><p>(2)多个智能指针指向同一个资源的时候，怎么保证资源只释放一次，而不是每个智能指针都释放一次，造成代码运行不可预期的严重后果</p><p>**改进方法:**使用深拷贝或者带引用计数的智能指针和不带引用计数的智能指针</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPointer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SmartPointer</span>(T *point = <span class="literal">NULL</span>):<span class="built_in">pointer</span>(point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SmartPointer</span>(<span class="type">const</span> SmartPointer&lt;T&gt; &amp;point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;pointer = <span class="keyword">new</span> <span class="built_in">T</span>(*point.pointer);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">T &amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T * <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">SmartPointer</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> pointer;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T * pointer; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_num = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person &amp;person) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_num:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s</span><span class="params">(<span class="keyword">new</span> Person)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s1</span><span class="params">(s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="2-2-不带引用计数的智能指针"><a href="#2-2-不带引用计数的智能指针" class="headerlink" title="2.2 不带引用计数的智能指针"></a>2.2 不带引用计数的智能指针</h3><h4 id="2-2-1-auto-ptr"><a href="#2-2-1-auto-ptr" class="headerlink" title="2.2.1 auto_ptr"></a>2.2.1 auto_ptr</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">s1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出错 </span></span><br><span class="line">*s1 = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>auto_ptr的缺点</strong>:</p><p>(1)auto_ptr没有使用引用计数，在复制构造函数和赋值构造函数中将对象所有权转移了。</p><p>(2)auto_ptr不能指向数组，因为auto_ptr在析构的时候只是调用delete,而数组应该要调用delete[]。</p><p>(3)auto_ptr不能和标准容器（vector,list,map…)一起使用。</p><p>**总结:**auto_ptr智能指针不带引用计数，那么它处理浅拷贝的问题，是直接把前面的auto_ptr都置为nullptr，只让最后一个auto_ptr持有资源。</p><h4 id="2-2-2-scoped-ptr"><a href="#2-2-2-scoped-ptr" class="headerlink" title="2.2.2 scoped_ptr"></a>2.2.2 scoped_ptr</h4><p>​从根本上杜绝了智能指针浅拷贝的发生，所以scoped_ptr也是不能用在容器当中的，如果容器互相进行拷贝或者赋值，就会引起scoped_ptr对象的拷贝构造和赋值，这是不允许的，代码会提示编译错误。</p><h4 id="2-2-3-unique-ptr"><a href="#2-2-3-unique-ptr" class="headerlink" title="2.2.3 unique_ptr"></a>2.2.3 unique_ptr</h4>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++高级教程</title>
      <link href="/2022/07/29/C-%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/"/>
      <url>/2022/07/29/C-%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-对象被优化以后才是高效的C-编程"><a href="#1-对象被优化以后才是高效的C-编程" class="headerlink" title="1 对象被优化以后才是高效的C++编程"></a>1 对象被优化以后才是高效的C++编程</h2><h3 id="1-1-对象使用过程中背后调用了那些方法"><a href="#1-1-对象使用过程中背后调用了那些方法" class="headerlink" title="1.1 对象使用过程中背后调用了那些方法"></a>1.1 对象使用过程中背后调用了那些方法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">int</span> a): <span class="built_in">m_a</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">const</span> Test &amp; t):<span class="built_in">m_a</span>(t.m_a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = t.m_a;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t = <span class="built_in">Test</span>(<span class="number">10</span>);</span><br><span class="line"><span class="function">Test <span class="title">t1</span><span class="params">(t)</span></span>;</span><br><span class="line">Test t2 = t1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显式生成临时对象，当这句话执行完成后，这个临时对象马上被析构</span></span><br><span class="line">t1 = <span class="built_in">Test</span>(<span class="number">10</span>);</span><br><span class="line">t1 = (Test)<span class="number">20</span>;</span><br><span class="line"><span class="comment">//隐式生成临时对象，当这句话执行完成后，这个临时对象马上被析构</span></span><br><span class="line">t1 = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不应该用指针保留一个临时对象，因为出了这个语句后p指向的是一个已经析构的临时对象</span></span><br><span class="line"><span class="comment">//而可以用引用来保留一个临时对象，出了语句临时对象不析构，</span></span><br><span class="line"><span class="comment">//因为引用相当于一个别名，临时对象的生命周期会变成引用变量的生命周期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test *t3 = &amp;Test(20); 会报错 </span></span><br><span class="line"><span class="type">const</span> Test &amp;t4 = <span class="built_in">Test</span>(<span class="number">10</span>);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注:(1) 不应该用指针保留一个临时对象,因为出了这个语句后p指向的是一个已经析构的临时对象,而可以用引用来保留一个临时对象，出了语句临时对象不析构,因为引用相当于一个别名，临时对象的生命周期会变成引用变量的生命周期</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-01(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">int</span> a,<span class="type">int</span> b = <span class="number">6</span>): <span class="built_in">m_a</span>(a),<span class="built_in">m_b</span>(b)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">const</span> Test &amp; t):<span class="built_in">m_a</span>(t.m_a),<span class="built_in">m_b</span>(t.m_b)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = t.m_a;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_b = t.m_b;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line"><span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>,<span class="number">10</span>)</span></span>; <span class="comment">//有参构造函数 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">20</span>,<span class="number">20</span>)</span></span>;  <span class="comment">//有参构造函数 </span></span><br><span class="line">Test t3 = t2; <span class="comment">//拷贝构造函数 </span></span><br><span class="line"><span class="type">static</span> Test t4 = <span class="built_in">Test</span>(<span class="number">30</span>,<span class="number">30</span>); <span class="comment">//有参构造函数 </span></span><br><span class="line">t2 = <span class="built_in">Test</span>(<span class="number">40</span>,<span class="number">40</span>);  <span class="comment">//先显式有参构造临时对象，在赋值，执行完这条语句，析构临时对象 </span></span><br><span class="line">t2 = (Test)(<span class="number">50</span>,<span class="number">50</span>); <span class="comment">//先显式有参构造临时对象，在赋值，执行完这条语句，析构临时对象 </span></span><br><span class="line">t2 = <span class="number">60</span>;<span class="comment">//先隐式有参构造临时对象，在赋值，执行完这条语句，析构临时对象</span></span><br><span class="line">Test* p1 = <span class="keyword">new</span> <span class="built_in">Test</span>(<span class="number">70</span>,<span class="number">70</span>); <span class="comment">//有参构造函数 </span></span><br><span class="line">Test* p2 = <span class="keyword">new</span> Test[<span class="number">2</span>];  <span class="comment">// 构造函数两次 </span></span><br><span class="line"><span class="comment">//Test* p3 = &amp;Test(80);</span></span><br><span class="line"><span class="type">const</span> Test&amp; p4 = <span class="built_in">Test</span>(<span class="number">90</span>,<span class="number">90</span>);<span class="comment">//有参构造函数 </span></span><br><span class="line"><span class="keyword">delete</span> p1;   </span><br><span class="line"><span class="keyword">delete</span>[]p2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*析构的顺序</span></span><br><span class="line"><span class="comment">p1,p2,p2,p4,t3,t2,t4,t5,t1 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">t5</span><span class="params">(<span class="number">100</span>,<span class="number">100</span>)</span></span>; <span class="comment">//有参构造函数 </span></span><br></pre></td></tr></table></figure><p><strong>注:</strong>(1) 构造顺序:t1-&gt;t5&gt;t2-&gt;t3_&gt;t4-&gt;p1-&gt;p2-&gt;p4</p><p>​ (2) 析构顺序:p1-&gt;p2-&gt;p2-&gt;p4-&gt;t3-&gt;t2-&gt;t4-&gt;t5-&gt;t1</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-01(2)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h3 id="1-2-函数调用过程中对象背后调用的方法太多"><a href="#1-2-函数调用过程中对象背后调用的方法太多" class="headerlink" title="1.2 函数调用过程中对象背后调用的方法太多"></a>1.2 函数调用过程中对象背后调用的方法太多</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">int</span> a): <span class="built_in">m_a</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">const</span> Test &amp; t):<span class="built_in">m_a</span>(t.m_a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = t.m_a;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getdata</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">getv</span><span class="params">(Test t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> val = t.<span class="built_in">getdata</span>();</span><br><span class="line"></span><br><span class="line">Test t1 = <span class="built_in">Test</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t1;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2; </span><br><span class="line">t2 = <span class="built_in">getv</span>(t1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注:</strong>(1)  t1构造函数-&gt;t2构造函数-&gt;getv函数-&gt;Test t &#x3D; t1 拷贝构造函数-&gt;Test t1 &#x3D; Test(val) 有参构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;getv函数结束后t1析构-&gt;t析构-&gt;t2 &#x3D; 临时对象赋值操作-&gt;赋值完成后临时对象析构-&gt;t2析构-&gt;t1析构 </p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-02%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h3 id="1-3-总结三条对象优化的规则"><a href="#1-3-总结三条对象优化的规则" class="headerlink" title="1.3 总结三条对象优化的规则"></a>1.3 总结三条对象优化的规则</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">int</span> a): <span class="built_in">m_a</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">const</span> Test &amp; t):<span class="built_in">m_a</span>(t.m_a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = t.m_a;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getdata</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">getv1</span><span class="params">(Test &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> val = t.<span class="built_in">getdata</span>();</span><br><span class="line"></span><br><span class="line">Test t1 = <span class="built_in">Test</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t1;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">getv2</span><span class="params">(Test &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> val = t.<span class="built_in">getdata</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Test</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2; </span><br><span class="line">t2 = <span class="built_in">getv1</span>(t1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2; </span><br><span class="line">t2 = <span class="built_in">getv2</span>(t1);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2 = <span class="built_in">getv2</span>(t1); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test03</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-1-函数参数传递过程中，对象有限按引用传递，不要按值传递"><a href="#1-3-1-函数参数传递过程中，对象有限按引用传递，不要按值传递" class="headerlink" title="1.3.1 函数参数传递过程中，对象有限按引用传递，不要按值传递"></a>1.3.1 函数参数传递过程中，对象有限按引用传递，不要按值传递</h4><p>​ t1构造函数-&gt;t2构造函数-&gt;getv函数-&gt;Test t1 &#x3D; Test(val) 有参构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;getv函数结束后t1析构-&gt;t2 &#x3D; 临时对象赋值操作-&gt;赋值完成后临时对象析构-&gt;t2析构-&gt;t1析构 </p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-03(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h4 id="1-3-2-函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象"><a href="#1-3-2-函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象" class="headerlink" title="1.3.2 函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象"></a>1.3.2 函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象</h4><p>​ t1构造函数-&gt;t2构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;t2 &#x3D; 临时对象赋值操作-&gt;赋值完成后临时对象析构-&gt;t2析构-&gt;t1析构 </p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-03(2)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h4 id="1-3-3-接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受"><a href="#1-3-3-接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受" class="headerlink" title="1.3.3 接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受"></a>1.3.3 接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受</h4><p>​ t1构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;t2 &#x3D; 临时对象赋值操作-&gt;t2析构-&gt;t1析构 </p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-03(3)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h3 id="1-4-CMyString的代码问题"><a href="#1-4-CMyString的代码问题" class="headerlink" title="1.4 CMyString的代码问题"></a>1.4 CMyString的代码问题</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//会利用拷贝构造函数生成一个临时对象，会在栈上临时开辟内存，再将内容拷贝到内存上</span></span><br><span class="line"><span class="comment">//这大大增加了资源的损耗 </span></span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;11111111111111111&quot;</span>)</span></span>;</span><br><span class="line">    String str2;</span><br><span class="line">    str2 = <span class="built_in">get_string</span>(str1);</span><br><span class="line">    cout &lt;&lt; str2.<span class="built_in">c_str</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-04(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>(1)会利用拷贝构造函数生成一个临时对象，会在栈上临时开辟内存，再将内容拷贝到内存上，这大大增加了资源的损耗 </p><h3 id="1-5-添加右值引用参数的拷贝构造和赋值函数"><a href="#1-5-添加右值引用参数的拷贝构造和赋值函数" class="headerlink" title="1.5 添加右值引用参数的拷贝构造和赋值函数"></a>1.5 添加右值引用参数的拷贝构造和赋值函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#pragma warning(disable:4996)</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class String</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    String(const char* str = nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;String(const char*)&quot; &lt;&lt; endl;</span><br><span class="line">        if (str != nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = new char[strlen(str) + 1];</span><br><span class="line">            strcpy(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = new char[1];</span><br><span class="line">            *m_data = &#x27;\0&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String(const String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;String(const String&amp; src)&quot; &lt;&lt; endl;</span><br><span class="line">        m_data = new char[strlen(src.m_data) + 1];</span><br><span class="line">        strcpy(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;String(String&amp;&amp; src)&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;m_data = src.m_data;</span><br><span class="line">src.m_data = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">    ~String()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;~String()&quot; &lt;&lt; endl;</span><br><span class="line">        delete[]m_data;</span><br><span class="line">        m_data = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //调用String&amp;是为了支持连续的operator=赋值操作</span><br><span class="line">    String&amp; operator=(const String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;operator=(const String &amp;str)&quot; &lt;&lt; endl;</span><br><span class="line">        if (&amp;str == this)</span><br><span class="line">        &#123;</span><br><span class="line">            return *this;</span><br><span class="line">        &#125;</span><br><span class="line">        delete[]m_data;</span><br><span class="line">        m_data = new char[strlen(str.m_data) + 1];</span><br><span class="line">        strcpy(m_data, str.m_data);</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        //调用String&amp;是为了支持连续的operator=赋值操作</span><br><span class="line">    String&amp; operator=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;operator=(String&amp;&amp; str)&quot; &lt;&lt; endl;</span><br><span class="line">        if (&amp;str == this)</span><br><span class="line">        &#123;</span><br><span class="line">            return *this;</span><br><span class="line">        &#125;</span><br><span class="line">        delete[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = nullptr;</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const char* c_str() </span><br><span class="line">&#123;</span><br><span class="line">        return m_data;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    char* m_data;//用于保存字符串</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">String get_string(String&amp; str) &#123;</span><br><span class="line">    const char* pstr = str.c_str();</span><br><span class="line">    String tmp(pstr);</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    String str1(&quot;11111111111111111&quot;);</span><br><span class="line">    String str2;</span><br><span class="line">    str2 = get_string(str1);</span><br><span class="line">    cout &lt;&lt; str2.c_str() &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-05(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>(1) 改进方法:改用右值引用去接受这个临时对象，就不需要在栈上临时开辟内存，直接接受临时对象的内容，再将临时对象的内容置为空，这样的析构也减少了资源损耗</p><h3 id="1-6-CMyString在vector上的应用"><a href="#1-6-CMyString在vector上的应用" class="headerlink" title="1.6 CMyString在vector上的应用"></a>1.6 CMyString在vector上的应用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs);</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(String&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_data = src.m_data;</span><br><span class="line">        src.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(String&amp;&amp; str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* tmpstr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(tmpstr, lhs.m_data);</span><br><span class="line">    <span class="built_in">strcat</span>(tmpstr, rhs.m_data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(tmpstr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">str2</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">    String str3 = str1 + str2;</span><br><span class="line">    cout &lt;&lt; str3;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-06(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>**注:**每次调用+号时都会申请一块内存，但这块内存并没有释放，很容易造成内存泄漏。</p><p>**改进方法:**使用有参构造出一个对象来，在将申请的内存释放掉</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs);</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* tmpstr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(tmpstr, lhs.m_data);</span><br><span class="line">    <span class="built_in">strcat</span>(tmpstr, rhs.m_data);</span><br><span class="line">    <span class="function">String <span class="title">str</span><span class="params">(tmpstr)</span></span>;</span><br><span class="line">    <span class="keyword">delete</span>[]tmpstr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">str2</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">    String str3 = str1 + str2;</span><br><span class="line">    cout &lt;&lt; str3;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-06(2)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>**缺点:**申请一大块内存给构造出来的对象，然后又在内存中剔除，在拷贝构造函数中，也申请一大块内存，这加大了资源的损耗。</p><p>**改进方法:**直接使用右值引用接受这个临时对象，让str3直接指向申请的这块内存，再将内同拷贝给str3.m_data,再将之前申请的这块内存置为空，析构函数也没起到作用，减小资源的损耗</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs);</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(String&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_data = src.m_data;</span><br><span class="line">        src.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(String&amp;&amp; str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    String str;</span><br><span class="line">    str.m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(str.m_data, lhs.m_data);</span><br><span class="line">    <span class="built_in">strcat</span>(str.m_data, rhs.m_data);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">str2</span><span class="params">(<span class="string">&quot; world!&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    String str3 = str1 + str2;  <span class="comment">//临时对象的析构指针并没有什么东西</span></span><br><span class="line">    cout &lt;&lt; str3;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-06(3)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>一道校招题</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs);</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(String&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_data = src.m_data;</span><br><span class="line">        src.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(String&amp;&amp; str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    String str;</span><br><span class="line">    str.m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(str.m_data, lhs.m_data);</span><br><span class="line">    <span class="built_in">strcat</span>(str.m_data, rhs.m_data);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    vector&lt;String&gt; pstring;</span><br><span class="line"></span><br><span class="line">    pstring.<span class="built_in">reserve</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    pstring.<span class="built_in">push_back</span>(str1);</span><br><span class="line">    pstring.<span class="built_in">push_back</span>(<span class="built_in">String</span>(<span class="string">&quot;world&quot;</span>));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-06(4)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h3 id="1-7-move移动语义和forward类型完美转发"><a href="#1-7-move移动语义和forward类型完美转发" class="headerlink" title="1.7 move移动语义和forward类型完美转发"></a>1.7 move移动语义和forward类型完美转发</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, <span class="type">const</span> T&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span>(p)<span class="built_in">T</span>(val);<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, T&amp;&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">new</span>(p)<span class="built_in">T</span>(std::<span class="built_in">move</span>(val));<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T&amp; val)</span><span class="comment">//向容器末尾添加元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">        <span class="built_in">expand</span>();</span><br><span class="line">   *_last++ = val;<span class="comment">//last指针指向的内存构造一个值为val的对象</span></span><br><span class="line">    _allocator.<span class="built_in">construct</span>(_last, val);</span><br><span class="line">    _last++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T&amp;&amp; val)</span><span class="comment">//向容器末尾添加元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">        <span class="built_in">expand</span>();</span><br><span class="line">    *_last++ = val;<span class="comment">//last指针指向的内存构造一个值为val的对象</span></span><br><span class="line">    _allocator.<span class="built_in">construct</span>(_last, std::<span class="built_in">move</span>(val));</span><br><span class="line">    _last++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注:**右值引用本身也是左值，当调用push_back时，底层也只会调用左值引用的构造函数，而不会调用右值引用的构造函数，所以需要使用move进行强转成右值引用。</p><p>**缺点:**代码量太多</p><p>**改进方法:**使用模板函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, <span class="type">const</span> T&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span>(p)<span class="built_in">T</span>(val);<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, T&amp;&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">new</span>(p)<span class="built_in">T</span>(std::<span class="built_in">move</span>(val));<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Ty1&gt; <span class="comment">// 换个名会进行类型推演，直接用T直接断定是右值引用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(Ty1&amp;&amp; val)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">expand</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forward：类型的完美转发</span></span><br><span class="line">_allocator.<span class="built_in">construct</span>(_last, val);</span><br><span class="line">_last++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注:</strong>   函数模板的类型推演 + 引用折叠 String&amp;&amp; + &amp;&amp; &#x3D; String&amp;&amp; String&amp; + &amp;&amp; &#x3D; String&amp;  </p><p>**缺点:**底层也只会调用左值引用的构造函数</p><p><strong>改进方法</strong>:使用forward进行类型的完美转换,能够识别左值和右值类型</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template&lt;typename Ty2&gt;</span><br><span class="line">void construct(T* p, Ty2&amp;&amp; val)//负责对象构造</span><br><span class="line">&#123;</span><br><span class="line">    new (p) T(std::forward&lt;Ty2&gt;(val));//定位new</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Ty1&gt; // 换个名会进行类型推演，直接用T直接断定是右值引用</span><br><span class="line">void push_back(Ty1&amp;&amp; val) </span><br><span class="line">&#123;</span><br><span class="line">if (full())</span><br><span class="line">&#123;</span><br><span class="line">expand();</span><br><span class="line">&#125;</span><br><span class="line">// forward：类型的完美转发</span><br><span class="line">_allocator.construct(_last, std::forward&lt;Ty1&gt;(val));</span><br><span class="line">_last++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-体验一下智能指针的强大"><a href="#2-体验一下智能指针的强大" class="headerlink" title="2 体验一下智能指针的强大"></a>2 体验一下智能指针的强大</h2><h3 id="2-1-基础知识"><a href="#2-1-基础知识" class="headerlink" title="2.1 基础知识"></a>2.1 基础知识</h3><p>裸指针到底有什么不好，写过一些C++代码的人应该都能知道，比如下面的原因：</p><p>(1)忘记释放资源，导致资源泄露（常发生内存泄漏问题）</p><p>(2)同一资源释放多次，导致释放野指针，程序崩溃</p><p>(3)明明代码的后面写了释放资源的代码，但是由于程序逻辑满足条件，从中间return掉了，导致释放资源的代码未被执行到</p><p>(4)代码运行过程中发生异常，随着异常栈展开，导致释放资源的代码未被执行到</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPointer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SmartPointer</span>(T *point = <span class="literal">NULL</span>):<span class="built_in">pointer</span>(point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SmartPointer</span>(<span class="type">const</span> SmartPointer&lt;T&gt; &amp;point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">T &amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T * <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">SmartPointer</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T * pointer; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_num = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person &amp;person) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_num:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s</span><span class="params">(<span class="keyword">new</span> Person)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s1</span><span class="params">(s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>智能指针的优点:</strong></p><p>(1)智能指针体现在把裸指针进行了一次面向对象的封装，在构造函数中初始化资源地址，在析构函数中负责释放资源</p><p>(2)利用栈上的对象出作用域自动析构这个特点，在智能指针的析构函数中保证释放</p><p><strong>智能指针的缺点:</strong>                                                                                                                                                                                                         </p><p>(1)怎么解决智能指针的浅拷贝问题</p><p>(2)多个智能指针指向同一个资源的时候，怎么保证资源只释放一次，而不是每个智能指针都释放一次，造成代码运行不可预期的严重后果</p><p>**改进方法:**使用深拷贝或者带引用计数的智能指针和不带引用计数的智能指针</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPointer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SmartPointer</span>(T *point = <span class="literal">NULL</span>):<span class="built_in">pointer</span>(point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SmartPointer</span>(<span class="type">const</span> SmartPointer&lt;T&gt; &amp;point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;pointer = <span class="keyword">new</span> <span class="built_in">T</span>(*point.pointer);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">T &amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T * <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">SmartPointer</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> pointer;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T * pointer; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_num = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person &amp;person) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_num:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s</span><span class="params">(<span class="keyword">new</span> Person)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s1</span><span class="params">(s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="2-2-不带引用计数的智能指针"><a href="#2-2-不带引用计数的智能指针" class="headerlink" title="2.2 不带引用计数的智能指针"></a>2.2 不带引用计数的智能指针</h3><h4 id="2-2-1-auto-ptr"><a href="#2-2-1-auto-ptr" class="headerlink" title="2.2.1 auto_ptr"></a>2.2.1 auto_ptr</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">s1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出错 </span></span><br><span class="line">*s1 = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>auto_ptr的缺点</strong>:</p><p>(1)auto_ptr没有使用引用计数，在复制构造函数和赋值构造函数中将对象所有权转移了。</p><p>(2)auto_ptr不能指向数组，因为auto_ptr在析构的时候只是调用delete,而数组应该要调用delete[]。</p><p>(3)auto_ptr不能和标准容器（vector,list,map…)一起使用。</p><p>**总结:**auto_ptr智能指针不带引用计数，那么它处理浅拷贝的问题，是直接把前面的auto_ptr都置为nullptr，只让最后一个auto_ptr持有资源。</p><h4 id="2-2-2-scoped-ptr"><a href="#2-2-2-scoped-ptr" class="headerlink" title="2.2.2 scoped_ptr"></a>2.2.2 scoped_ptr</h4><p>​从根本上杜绝了智能指针浅拷贝的发生，所以scoped_ptr也是不能用在容器当中的，如果容器互相进行拷贝或者赋值，就会引起scoped_ptr对象的拷贝构造和赋值，这是不允许的，代码会提示编译错误。</p><h4 id="2-2-3-unique-ptr"><a href="#2-2-3-unique-ptr" class="headerlink" title="2.2.3 unique_ptr"></a>2.2.3 unique_ptr</h4><p>​从上面看到，unique_ptr有一点和scoped_ptr做的一样，就是去掉了拷贝构造函数和operator&#x3D;赋值重载函数，禁止用户对unique_ptr进行显示的拷贝构造和赋值，防止智能指针浅拷贝问题的发生。但是unique_ptr提供了带右值引用参数的拷贝构造和赋值，也就是说，unique_ptr智能指针可以通过右值引用进行拷贝构造和赋值操作，或者在产生unique_ptr临时对象的地方，如把unique_ptr作为函数的返回值时，示例代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1</span></span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line">unique_ptr&lt;<span class="type">int</span>&gt; ptr2 = std::<span class="built_in">move</span>(ptr); <span class="comment">// 使用了右值引用的拷贝构造</span></span><br><span class="line">ptr2 = std::<span class="built_in">move</span>(ptr); <span class="comment">// 使用了右值引用的operator=赋值重载函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例2</span></span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">test_uniqueptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">ptr1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> ptr1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此处调用test_uniqueptr函数，首先调用右值引用的拷贝构造函数产生ptr1,在return ptr1代码</span></span><br><span class="line"><span class="comment">处，调用右值引用的拷贝构造生成在main函数栈上的临时对象，由ptr1拷贝构造ptr，完成后对局部对象进行析构</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">unique_ptr&lt;<span class="type">int</span>&gt; ptr = <span class="built_in">test_uniqueptr</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-带引用计数的智能指针"><a href="#2-3-带引用计数的智能指针" class="headerlink" title="2.3 带引用计数的智能指针"></a>2.3 带引用计数的智能指针</h3><h4 id="2-3-1-自己构造带引用计数的智能指针"><a href="#2-3-1-自己构造带引用计数的智能指针" class="headerlink" title="2.3.1 自己构造带引用计数的智能指针"></a>2.3.1 自己构造带引用计数的智能指针</h4><p>​当允许多个智能指针指向同一个资源的时候，每一个智能指针都会给资源的引用计数加1，当一个智能指针析构时，同样会使资源的引用计数减1，这样最后一个智能指针把资源的引用计数从1减到0时，就说明该资源可以释放了，由最后一个智能指针的析构函数来处理资源的释放问题，这就是引用计数的概念。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Refcnt</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Refcnt</span>(T *ptr = <span class="literal">NULL</span>):<span class="built_in">mptr</span>(ptr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mptr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt;  <span class="string">&quot;Refcnt的有参构造函数&quot;</span> &lt;&lt; endl; </span><br><span class="line">m_count = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addcnt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">delcnt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> --m_count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T *mptr;</span><br><span class="line"><span class="type">int</span> m_count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPointer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">SmartPointer</span>(T *point = <span class="literal">NULL</span>):<span class="built_in">pointer</span>(point)</span><br><span class="line">&#123;</span><br><span class="line">myRefcnt = <span class="keyword">new</span> <span class="built_in">Refcnt</span>&lt;T&gt;(pointer); </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SmartPointer</span>(<span class="type">const</span> SmartPointer&lt;T&gt; &amp;point)</span><br><span class="line">&#123;</span><br><span class="line">pointer = point.pointer;</span><br><span class="line">myRefcnt = point.myRefcnt;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span>(pointer != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">myRefcnt-&gt;<span class="built_in">addcnt</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SmartPointer&lt;T&gt; &amp; <span class="keyword">operator</span>=(<span class="type">const</span> SmartPointer&lt;T&gt; &amp;point)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> == &amp;point)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(myRefcnt-&gt;<span class="built_in">delcnt</span>() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> pointer;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;pointer = point.pointer;</span><br><span class="line"><span class="keyword">this</span>-&gt;myRefcnt = point.myRefcnt;</span><br><span class="line"><span class="keyword">this</span>-&gt;myRefcnt-&gt;<span class="built_in">addcnt</span>();</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">T &amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T * <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">SmartPointer</span>()</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>-&gt;myRefcnt-&gt;<span class="built_in">delcnt</span>() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> pointer;</span><br><span class="line">pointer = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T * pointer;</span><br><span class="line">Refcnt&lt;T&gt; * myRefcnt; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_num = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person &amp;person) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_num:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s</span><span class="params">(<span class="keyword">new</span> Person(<span class="number">2</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s1</span><span class="params">(s)</span></span>;</span><br><span class="line"></span><br><span class="line">SmartPointer&lt;Person&gt; s2;</span><br><span class="line"></span><br><span class="line">s2 = s1;</span><br><span class="line"></span><br><span class="line">*s = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">(*s2).<span class="built_in">showPerson</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="2-4-shared-ptr的交叉引用问题"><a href="#2-4-shared-ptr的交叉引用问题" class="headerlink" title="2.4 shared_ptr的交叉引用问题"></a>2.4 shared_ptr的交叉引用问题</h3><p>​对于整数的++或者- -操作，它并不是线程安全的操作，因此shared_ptr和weak_ptr底层的引用计数已经通过CAS操作，保证了引用计数加减的原子特性，因此shared_ptr和weak_ptr本身就是线程安全的带引用计数的智能指针。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shared_ptr&lt;B&gt; ptrB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shared_ptr&lt;A&gt; ptrA;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">ptra</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;B&gt; <span class="title">ptrb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line"></span><br><span class="line">ptra-&gt;ptrB = ptrb;</span><br><span class="line">ptrb-&gt;ptrA = ptra;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ptra.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line">cout &lt;&lt; ptrb.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-04(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-04(1).png" alt="本地png图片PictureTest.png"></p><p>​ptra指向A对象，A的引用计数为1，ptrb指向B对象，B的引用计数为1。当A对象的成员变量ptrB也指向B对象，B的引用计数为2，当B对象的成员变量ptrA也指向A对象，A的引用计数为2。出main函数作用域，ptra和ptrb两个局部对象析构，分别给A对象和B对象的引用计数从2减到1，达不到释放A和B的条件（释放的条件是A和B的引用计数为0），因此造成两个new出来的A和B对象无法释放，导致内存泄露，这个问题就是“强智能指针的交叉引用(循环引用)问题”。</p><p>**改进方法:**定义对象时，用强智能指针shared_ptr，在其它地方引用对象时，使用弱智能指针weak_ptr。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;B&gt; ptrB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;A&gt; ptrA;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">ptra</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;B&gt; <span class="title">ptrb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line"></span><br><span class="line">ptra-&gt;ptrB = ptrb;</span><br><span class="line">ptrb-&gt;ptrA = ptra;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ptra.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line">cout &lt;&lt; ptrb.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-04(2)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p><strong>弱智能指针weak_ptr区别于shared_ptr之处在于：</strong></p><p>(1)weak_ptr不会改变资源的引用计数，只是一个观察者的角色，通过观察shared_ptr来判定资源是否存在</p><p>(2)weak_ptr持有的引用计数，不是资源的引用计数，而是同一个资源的观察者的计数</p><p>(3)weak_ptr没有提供常用的指针操作，无法直接访问资源，需要先通过lock方法提升为shared_ptr强智能指针，才能访问资源</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是个好方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;B&gt; ptrB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ptrA-&gt;<span class="built_in">testA</span>();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;A&gt; ptrA;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">ptra</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;B&gt; <span class="title">ptrb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line"></span><br><span class="line">ptra-&gt;ptrB = ptrb;</span><br><span class="line">ptrb-&gt;ptrA = ptra;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ptra.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line">cout &lt;&lt; ptrb.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">ptrb-&gt;<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-04(3)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>**缺点:**调用不了A对象中的testA</p><p>**改进方法:**需要将弱指针升级为强指针</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是个好方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;B&gt; ptrB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">shared_ptr&lt;A&gt; ps = ptrA.<span class="built_in">lock</span>();</span><br><span class="line"><span class="keyword">if</span>(ps != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;<span class="built_in">testA</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;A&gt; ptrA;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">ptra</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;B&gt; <span class="title">ptrb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line"></span><br><span class="line">ptra-&gt;ptrB = ptrb;</span><br><span class="line">ptrb-&gt;ptrA = ptra;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ptra.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line">cout &lt;&lt; ptrb.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">ptrb-&gt;<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-04(4)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h3 id="2-5-多线程访问共享对象的线程安全问题"><a href="#2-5-多线程访问共享对象的线程安全问题" class="headerlink" title="2.5 多线程访问共享对象的线程安全问题"></a>2.5 多线程访问共享对象的线程安全问题</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是个好方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子线程 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handler01</span><span class="params">(A *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q-&gt;<span class="built_in">testA</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A *p = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(handler01,p)</span></span>;</span><br><span class="line"></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line">t1.<span class="built_in">join</span>(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-05(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>**注:**主线程等待两秒后，子线程就会调用A中的testA函数</p><p>如果是子线程等待两秒后，主线程已经将对象析构了，子线程在调用已经析构的对象，将会出现问题，改进就是子线程询问一下对象是否存活，使用强弱指针来实现解决共享对象的线程安全问题。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是个好方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子线程 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handler01</span><span class="params">(weak_ptr&lt;A&gt; pw)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">shared_ptr&lt;A&gt; sp = pw.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sp != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">sp-&gt;<span class="built_in">testA</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A对象已经析构了&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">p</span> <span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(handler01,weak_ptr&lt;A&gt;(p))</span></span>;</span><br><span class="line"></span><br><span class="line">t1.<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<img src="E:/蔡伟/14-笔记/图片/2-05(2)程序结果.png" alt="本地png图片PictureTest.png"></p><h3 id="2-6-自定义删除器"><a href="#2-6-自定义删除器" class="headerlink" title="2.6 自定义删除器"></a>2.6 自定义删除器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">#include &lt;memory&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">class Mydector</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void operator()(T *ptr) const</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;call Mydector&quot; &lt;&lt; endl;</span><br><span class="line">delete [] ptr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">class Myfiledector</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void operator()(T *ptr) const</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;call Myfiledector&quot; &lt;&lt; endl;</span><br><span class="line">fclose(ptr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;int,Mydector&lt;int&gt;&gt; p(new int[100]);</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;FILE,Myfiledector&lt;FILE&gt;&gt; p1(fopen(&quot;C:/Users/caiwei/Desktop/data.txt&quot;,&quot;w&quot;));</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-06(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>**缺点:**调用不同的指针，也要写出想应得删除器，如果种类过多，难以取名。</p><p>**改进方法:**利用lambda表达式和函数对象</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;<span class="type">int</span>,function&lt;<span class="type">void</span>(<span class="type">int</span> *)&gt;&gt; <span class="built_in">p</span>(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">100</span>],</span><br><span class="line">[](<span class="type">int</span> *p)-&gt;<span class="type">void</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call Mydector&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> [] p;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;FILE,function&lt;<span class="type">void</span>(FILE*)&gt;&gt; <span class="built_in">p1</span>(<span class="built_in">fopen</span>(<span class="string">&quot;C:/Users/caiwei/Desktop/data.txt&quot;</span>,<span class="string">&quot;w&quot;</span>),</span><br><span class="line">[](FILE *p)-&gt;<span class="type">void</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call Myfiledector&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">fclose</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-06(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h2 id="3-C-11中引入的bind绑定器和function函数对象"><a href="#3-C-11中引入的bind绑定器和function函数对象" class="headerlink" title="3 C++11中引入的bind绑定器和function函数对象"></a>3 C++11中引入的bind绑定器和function函数对象</h2><h3 id="3-1-bind1st和bind2nd什么时候会用到"><a href="#3-1-bind1st和bind2nd什么时候会用到" class="headerlink" title="3.1 bind1st和bind2nd什么时候会用到"></a>3.1 bind1st和bind2nd什么时候会用到</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printvector</span><span class="params">(Container &amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">typename</span> Container::iterator it = con.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;it != con.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt;= <span class="number">10</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">p.<span class="built_in">push_back</span>(<span class="built_in">rand</span>()%<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printvector</span>(p);</span><br><span class="line"><span class="built_in">sort</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printvector</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="built_in">printvector</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C3-01(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>一般greater，less底层都是二元对象，要是想使用一元对象，就需要使用绑定器。绑定器有两种，一个是band1st，另一个是bind2nd。</p><p>bind1st：operator()的第一个形参变量绑定成一个确定的值</p><p>bind2nd：operator()的第二个形参变量绑定成一个确定的值</p><p>例如:bind1st:+greater bool operator()(70,const_Ty&amp;_Right) bind2nd:+less bool operator()(const_Ty &amp;_Left,70)</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printvector</span><span class="params">(Container &amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">typename</span> Container::iterator it = con.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;it != con.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt;= <span class="number">10</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">p.<span class="built_in">push_back</span>(<span class="built_in">rand</span>()%<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printvector</span>(p);</span><br><span class="line"><span class="built_in">sort</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printvector</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="built_in">printvector</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector&lt;int&gt;::iterator it = find_if(p.begin(),p.end(),bind1st(greater&lt;int&gt;(),70));</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">find_if</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),<span class="built_in">bind2nd</span>(<span class="built_in">less</span>&lt;<span class="type">int</span>&gt;(),<span class="number">70</span>));</span><br><span class="line"><span class="keyword">if</span>( it != p.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">p.<span class="built_in">insert</span>(it,<span class="number">70</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printvector</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C3-01(2)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h3 id="3-2-bind1st和bind2nd的底层原理实现"><a href="#3-2-bind1st和bind2nd的底层原理实现" class="headerlink" title="3.2 bind1st和bind2nd的底层原理实现"></a>3.2 bind1st和bind2nd的底层原理实现</h3><p>​绑定器本身是一个函数对象</p><h3 id="3-3-模板的完全特例化和非完全特例化"><a href="#3-3-模板的完全特例化和非完全特例化" class="headerlink" title="3.3 模板的完全特例化和非完全特例化"></a>3.3 模板的完全特例化和非完全特例化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Vector</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call Vector template init&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对char*类型提供完全特例化版本 </span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>&lt;<span class="type">char</span> *&gt; </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Vector</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call Vector&lt;char *&gt; template init&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对指针类型提供的部分特例化版本 </span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>&lt;T *&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Vector</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call Vector&lt;T *&gt; template init&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对函数指针(有返回值，有两个形参变量)提供的部分特例化 </span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> a1,<span class="keyword">typename</span> a2&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>&lt;<span class="built_in">T</span> (*)(a1,a2)&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Vector</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call Vector&lt;T (*)(a1,a2)&gt; template init&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> a1,<span class="keyword">typename</span> a2&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>&lt;<span class="built_in">T</span> (a1,a2)&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Vector</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call Vector&lt;T (a1,a2)&gt; template init&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Vector&lt;<span class="type">int</span>&gt; vec1;</span><br><span class="line">Vector&lt;<span class="type">char</span>*&gt; vec2;</span><br><span class="line">Vector&lt;<span class="type">int</span>*&gt; vec3;</span><br><span class="line">Vector&lt;<span class="built_in">int</span>(*)(<span class="type">int</span> ,<span class="type">int</span> )&gt; vec4;</span><br><span class="line">Vector&lt;<span class="built_in">int</span> (<span class="type">int</span> ,<span class="type">int</span> )&gt; vec5;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*Pfunc1)</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br><span class="line">Pfunc1 pfunc1 = sum;</span><br><span class="line">cout &lt;&lt; <span class="built_in">pfunc1</span>(<span class="number">10</span>,<span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="type">int</span> <span class="title">Pfunc2</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br><span class="line">Pfunc2 *pfunc2 = sum;</span><br><span class="line">cout &lt;&lt; <span class="built_in">pfunc2</span>(<span class="number">10</span>,<span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注:**有完全特例化优先匹配完全特例化，有部分特例化就匹配部分特例化，没有的话就从原模版自己实例化</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C3-03(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p><strong>函数类型推演</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(T a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> A1,<span class="keyword">typename</span> A2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(T(*)(A1,A2))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A2).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> R,<span class="keyword">typename</span> A1,<span class="keyword">typename</span> A2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func3</span><span class="params">(T(R::*a)(A1,A2))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(R).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A2).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//func(10); // int</span></span><br><span class="line"><span class="comment">//func(&quot;aaa&quot;); // const char *</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>(sum);  <span class="comment">//func T 不加* int(__cdecl*)(int,int) </span></span><br><span class="line"><span class="comment">//func T 加*  int(__cdecl)(int,int) </span></span><br><span class="line"><span class="built_in">func2</span>(sum);</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>(&amp;Test::sum2);</span><br><span class="line"><span class="built_in">func3</span>(&amp;Test::sum2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C3-03(2)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h3 id="3-4-function函数对象类型的应用示例"><a href="#3-4-function函数对象类型的应用示例" class="headerlink" title="3.4 function函数对象类型的应用示例"></a>3.4 function函数对象类型的应用示例</h3><p>绑定器，函数对象，lambda表达式本质上都是函数对象，只能使用在一条语句中，但是如果想要在多条语句中使用，就需要function</p><p><strong>使用function函数需要注意：</strong></p><p>(1)用函数类型实例化function；</p><p>(2)通过function调用operator()函数的时候，需要根据函数类型传入相应的参数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; hello world &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello1</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">function&lt;<span class="type">void</span>()&gt; func = hello;</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">void</span>(string)&gt; func1 = hello1;</span><br><span class="line"><span class="built_in">func1</span>(<span class="string">&quot;hello kevin durant!!&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span> , <span class="type">int</span> )&gt; func2 = sum;</span><br><span class="line">cout &lt;&lt; <span class="built_in">func2</span>(<span class="number">10</span>,<span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span> , <span class="type">int</span> )&gt; func3 = [](<span class="type">int</span> a,<span class="type">int</span> b)-&gt;<span class="type">int</span>&#123;<span class="keyword">return</span> a + b;&#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">func3</span>(<span class="number">10</span>,<span class="number">30</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>function不仅可以留下普通全局函数的类型，对于类的成员方法也可以进行类型保留</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">function&lt;<span class="type">int</span>(Test *,<span class="type">int</span>,<span class="type">int</span>)&gt; func = &amp;Test::sum1;</span><br><span class="line">Test t;</span><br><span class="line">cout &lt;&lt; <span class="built_in">func</span>(&amp;t,<span class="number">10</span>,<span class="number">40</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>function的特点：可以把所有函数、绑定器、函数对象和lambda<a href="https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1001.2101.3001.7020">表达式</a>的类型保留起来，在其他地方都可以使用。否则绑定器、lambda表达式就只能使用在语句中</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查看所有书籍信息&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">borrow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;借书&quot;</span> &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;还书&quot;</span> &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查询书籍&quot;</span> &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loginout</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;注销&quot;</span> &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showmenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1.查看所有书籍信息&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2.借书&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3.还书&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4.查询书籍&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;5.注销&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择：&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>,function&lt;<span class="type">void</span>()&gt;&gt; map1;</span><br><span class="line"></span><br><span class="line">map1.<span class="built_in">insert</span>(&#123;<span class="number">1</span>,show&#125;);</span><br><span class="line">map1.<span class="built_in">insert</span>(&#123;<span class="number">2</span>,borrow&#125;);</span><br><span class="line">map1.<span class="built_in">insert</span>(&#123;<span class="number">3</span>,back&#125;);</span><br><span class="line">map1.<span class="built_in">insert</span>(&#123;<span class="number">4</span>,query&#125;);</span><br><span class="line">map1.<span class="built_in">insert</span>(&#123;<span class="number">5</span>,loginout&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">showmenu</span>();</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it = map1.<span class="built_in">find</span>(choice);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(it == map1.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">it-&gt;<span class="built_in">second</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-function的实现原理"><a href="#3-5-function的实现原理" class="headerlink" title="3.5 function的实现原理"></a>3.5 function的实现原理</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">(string str)</span> </span>&#123; cout &lt;&lt; str &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Fty&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myfunction</span>&#123;&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">template&lt;typename R,typename A1&gt;</span></span><br><span class="line"><span class="comment">class myfunction&lt;R(A1)&gt;</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">//typedef R(*PFUNC)(A1);</span></span><br><span class="line"><span class="comment">using PFUNC = R(*)(A1);</span></span><br><span class="line"><span class="comment">myfunction(PFUNC pfunc):_pfunc(pfunc)&#123;&#125;</span></span><br><span class="line"><span class="comment">R operator()(A1 arg)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">return _pfunc(arg);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">private:</span></span><br><span class="line"><span class="comment">PFUNC _pfunc;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">template&lt;typename R, typename A1,typename A2&gt;</span></span><br><span class="line"><span class="comment">class myfunction&lt;R(A1,A2)&gt;</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">//typedef R(*PFUNC)(A1);</span></span><br><span class="line"><span class="comment">using PFUNC = R(*)(A1,A2);</span></span><br><span class="line"><span class="comment">myfunction(PFUNC pfunc) :_pfunc(pfunc) &#123;&#125;</span></span><br><span class="line"><span class="comment">R operator()(A1 arg1,A2 arg2)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">return _pfunc(arg1,arg2);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">private:</span></span><br><span class="line"><span class="comment">PFUNC _pfunc;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//...表示可变参，A表示的是一组1类型，个数任意</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... A&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myfunction</span>&lt;<span class="built_in">R</span>(A...)&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> PFUNC = <span class="built_in">R</span>(*)(A...);</span><br><span class="line"><span class="built_in">myfunction</span>(PFUNC pfunc) :_pfunc(pfunc) &#123;&#125;</span><br><span class="line"><span class="function">R <span class="title">operator</span><span class="params">()</span><span class="params">(A... arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _pfunc(arg...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">PFUNC _pfunc;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">myfunction&lt;<span class="title">void</span><span class="params">(string)</span>&gt; <span class="title">func1</span><span class="params">(hello)</span></span>;</span><br><span class="line"><span class="built_in">func1</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="function">myfunction&lt;<span class="title">int</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>&gt; <span class="title">func2</span><span class="params">(sum)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">func2</span>(<span class="number">10</span>, <span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-bind和function实现线程池"><a href="#3-6-bind和function实现线程池" class="headerlink" title="3.6 bind和function实现线程池"></a>3.6 bind和function实现线程池</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> placeholders;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//绑定器本身就是一种函数对象，返回的也是函数对象</span></span><br><span class="line"><span class="comment">//会自动进行函数类型推演 </span></span><br><span class="line"><span class="built_in">bind</span>(hello,<span class="string">&quot;hello world!&quot;</span>)();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">bind</span>(sum,<span class="number">10</span>,<span class="number">20</span>)() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">bind</span>(&amp;Test::sum1,<span class="built_in">Test</span>(),<span class="number">30</span>,<span class="number">20</span>)() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//function只接受一个类型,绑定器可以给相应的函数绑定固定的参数，绑定器只能使用在语句当中</span></span><br><span class="line"><span class="comment">//参数占位符,绑定器出了语句，无法继续使用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span>(hello,_1)(<span class="string">&quot;hello kevin durant!&quot;</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">bind</span>(sum,_1,_2)(<span class="number">100</span>,<span class="number">200</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">bind</span>(&amp;Test::sum1,_1,_2,_3)(<span class="built_in">Test</span>(),<span class="number">30</span>,<span class="number">30</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">void</span>(string)&gt; func1 = <span class="built_in">bind</span>(hello,_1);</span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span>,<span class="type">int</span>)&gt; func2 = <span class="built_in">bind</span>(sum,_1,_2);</span><br><span class="line">function&lt;<span class="type">int</span>(Test,<span class="type">int</span>,<span class="type">int</span>)&gt; func3 = <span class="built_in">bind</span>(&amp;Test::sum1,_1,_2,_3);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">func1</span>(<span class="string">&quot;hello xiaxi&quot;</span>);</span><br><span class="line"><span class="built_in">func1</span>(<span class="string">&quot;hello caiwei&quot;</span>);</span><br><span class="line"><span class="built_in">func1</span>(<span class="string">&quot;hello zouzeyu&quot;</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">func2</span>(<span class="number">10</span>,<span class="number">40</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">func3</span>(<span class="built_in">Test</span>(),<span class="number">10</span>,<span class="number">50</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> placeholders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Thread</span>(function&lt;<span class="built_in">void</span>(<span class="type">int</span>)&gt; func,<span class="type">int</span> no):_func(func),_no(no)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">thread <span class="title">t</span><span class="params">(_func,_no)</span></span>;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; _func;</span><br><span class="line"><span class="type">int</span> _no;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ThreadPool</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">ThreadPool</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; _pool.<span class="built_in">size</span>() ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _pool[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">startpool</span><span class="params">(<span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">//不管是C++里面的thread还是Linux里面的pthread需要的线程函数都是一个C函数，是不能够使用成员方法的，因为它是C的函数类型，不可能把成员方法的函数指针给一个C的函数指针，接收不了。所以就需要绑定，把runInThread所依赖的参数全部绑定</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">_pool.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Thread</span>(<span class="built_in">bind</span>(&amp;ThreadPool::ruinthread,<span class="keyword">this</span>,_1),i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">_handler.<span class="built_in">push_back</span>(_pool[i]-&gt;<span class="built_in">start</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(thread &amp;t: _handler)</span><br><span class="line">&#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">vector&lt;Thread *&gt; _pool;</span><br><span class="line">vector&lt;thread&gt; _handler;</span><br><span class="line">    <span class="comment">//把runInThread这个成员方法充当线程函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ruinthread</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call ruinthread id:&quot;</span> &lt;&lt; id &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ThreadPool threadpool;</span><br><span class="line"></span><br><span class="line">threadpool.<span class="built_in">startpool</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="3-7-lambda表达式的实现原理"><a href="#3-7-lambda表达式的实现原理" class="headerlink" title="3.7 lambda表达式的实现原理"></a>3.7 lambda表达式的实现原理</h3><p>函数对象的应用：使用在泛型算法参数传递、比较性质、自定义操作、优先级队列和智能指针</p><p>函数对象的缺点：需要先定义一个函数对象类型，但是类型定义完后可能只是用在了定义的地方，后面可能不会再用了，没有必要为了需要一个函数对象定义一个类型，这个类型就永远在代码当中。</p><p>C++11函数对象的升级版 &#x3D;&gt; lambda表达式是一个函数对象</p><p>lambda表达式：底层依赖函数对象的机制实现的。</p><p>lambda表达式语法：<a href="%E5%BD%A2%E5%8F%82%E5%88%97%E8%A1%A8">捕获外部变量</a> -&gt;返回值{操作代码};</p><p>如果lambda表达式的返回值不需要，那么“-&gt;返回值”可以省略</p><p>[捕获外部变量]</p><p>[ ]：表示不捕获任何外部变量<br>[&#x3D;]：以传值的方式捕获外部的所有变量<br>[&amp;]：以传引用的方式捕获外部的所有变量<br>[this]：捕获外部的this指针<br>[&#x3D;,&amp;a]：以传值的方式捕获外部的所有变量，但是a变量以传引用的方式捕获<br>[a,b]：以传值的方式捕获外部变量a和b<br>[a,&amp;b]：a以值传递捕获，b以传引用的方式捕获</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="type">void</span>&gt;</span><br><span class="line"><span class="keyword">class</span> TestLambda01</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TestLambda01</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T <span class="built_in">operator</span>()()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> TestLambda02</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TestLambda02</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T <span class="built_in">operator</span>()(T a,T b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> TestLambda03</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TestLambda03</span>(T a,T b):<span class="built_in">m_a</span>(a),<span class="built_in">m_b</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="built_in">operator</span>()() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">T temp = m_a;</span><br><span class="line">m_a = m_b;</span><br><span class="line">m_b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">mutable</span> T m_a;</span><br><span class="line"><span class="keyword">mutable</span> T m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> TestLambda04</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TestLambda04</span>(T &amp;a,T &amp;b):<span class="built_in">m_a</span>(a),<span class="built_in">m_b</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="built_in">operator</span>()() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">T temp = m_a;</span><br><span class="line">m_a = m_b;</span><br><span class="line">m_b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T &amp;m_a;</span><br><span class="line">T &amp;m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> func1 = []()-&gt;<span class="type">void</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> func2 = [](<span class="type">int</span> a,<span class="type">int</span> b)-&gt;<span class="type">int</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">auto</span> func3 = [=]() <span class="keyword">mutable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> func4 = [&amp;]() </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func1</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">func2</span>(<span class="number">10</span>,<span class="number">30</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func3</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func4</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">TestLambda01&lt;&gt; t1;</span><br><span class="line"><span class="built_in">t1</span>();</span><br><span class="line"></span><br><span class="line">TestLambda02&lt;&gt; t2;</span><br><span class="line">cout &lt;&lt; <span class="built_in">t2</span>(<span class="number">10</span>,<span class="number">30</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">TestLambda03&lt;&gt; <span class="built_in">t3</span>(a,b);</span><br><span class="line"><span class="built_in">t3</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">TestLambda04&lt;&gt; <span class="built_in">t4</span>(a,b);</span><br><span class="line"><span class="built_in">t4</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="3-8-lambda表达式的应用实践"><a href="#3-8-lambda表达式的应用实践" class="headerlink" title="3.8  lambda表达式的应用实践"></a>3.8  lambda表达式的应用实践</h3><h4 id="3-8-1-应用于泛型算法"><a href="#3-8-1-应用于泛型算法" class="headerlink" title="3.8.1 应用于泛型算法"></a>3.8.1 应用于泛型算法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() %<span class="number">100</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),[](<span class="type">int</span> a,<span class="type">int</span> b)</span><br><span class="line">-&gt;<span class="type">bool</span>&#123;<span class="keyword">return</span> a &gt; b;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;it != vec.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">it = <span class="built_in">find_if</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),[](<span class="type">int</span> a)</span><br><span class="line">-&gt;<span class="type">bool</span>&#123;<span class="keyword">return</span> a &lt; <span class="number">65</span>;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(it != vec.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">insert</span>(it,<span class="number">65</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(it = vec.<span class="built_in">begin</span>();it != vec.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">for_each(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),[](<span class="type">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a %<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>既然lambda表达式只能使用在语句中，如果想跨语句使用之前定义好的lambda表达式，采用function类型来表示函数对象的类型。</p><h4 id="3-8-2-应用于哈希表"><a href="#3-8-2-应用于哈希表" class="headerlink" title="3.8.2 应用于哈希表"></a>3.8.2 应用于哈希表</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>,function&lt;<span class="type">int</span>(<span class="type">int</span>,<span class="type">int</span>)&gt;&gt; map1;</span><br><span class="line"><span class="comment">//auto只能出现在根据右边表达式推导左边的类型，只能使用在函数的局部作用域的范围之内</span></span><br><span class="line"><span class="comment">//预先lambda表达式不知道需要先存储lambda表达式类型</span></span><br><span class="line">map1[<span class="number">1</span>] = [](<span class="type">int</span> a,<span class="type">int</span> b)-&gt;<span class="type">int</span>&#123;<span class="keyword">return</span> a + b;&#125;;</span><br><span class="line">map1[<span class="number">2</span>] = [](<span class="type">int</span> a,<span class="type">int</span> b)-&gt;<span class="type">int</span>&#123;<span class="keyword">return</span> a - b;&#125;;</span><br><span class="line">map1[<span class="number">3</span>] = [](<span class="type">int</span> a,<span class="type">int</span> b)-&gt;<span class="type">int</span>&#123;<span class="keyword">return</span> a * b;&#125;;</span><br><span class="line">map1[<span class="number">4</span>] = [](<span class="type">int</span> a,<span class="type">int</span> b)-&gt;<span class="type">int</span>&#123;<span class="keyword">return</span> a / b;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入选择:&quot;</span>; </span><br><span class="line">cin &gt;&gt; choice;</span><br><span class="line">cout &lt;&lt; map1[choice](<span class="number">10</span>,<span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="3-8-3-智能指针自定义删除器"><a href="#3-8-3-智能指针自定义删除器" class="headerlink" title="3.8.3 智能指针自定义删除器"></a>3.8.3 智能指针自定义删除器</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">unique_ptr&lt;FILE ,function&lt;<span class="type">void</span>(FILE *)&gt;&gt; <span class="built_in">str</span>(<span class="built_in">fopen</span>(<span class="string">&quot;C:/Users/caiwei/Desktop/a.txt&quot;</span>,<span class="string">&quot;w&quot;</span>),[](FILE *PF)-&gt;\</span><br><span class="line"><span class="type">void</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fclose</span>(PF);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is call myfiledelete&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="3-8-4-传入函数对象使得容器元素按照指定方式排列"><a href="#3-8-4-传入函数对象使得容器元素按照指定方式排列" class="headerlink" title="3.8.4 传入函数对象使得容器元素按照指定方式排列"></a>3.8.4 传入函数对象使得容器元素按照指定方式排列</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Data</span>(<span class="type">int</span> a,<span class="type">int</span> b):<span class="built_in">m_a</span>(a),<span class="built_in">m_b</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Data</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line"><span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> FUNC = function&lt;<span class="built_in">bool</span>(Data &amp;,Data &amp;)&gt;;</span><br><span class="line">priority_queue&lt;Data,vector&lt;Data&gt;,FUNC&gt; <span class="built_in">maxHeap</span>([](Data &amp;d1,Data &amp;d2)-&gt;<span class="type">bool</span>\</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> d1.m_b &gt; d2.m_b;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">maxHeap.<span class="built_in">push</span>(<span class="built_in">Data</span>(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">maxHeap.<span class="built_in">push</span>(<span class="built_in">Data</span>(<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line">maxHeap.<span class="built_in">push</span>(<span class="built_in">Data</span>(<span class="number">30</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="4-C-11知识点汇总"><a href="#4-C-11知识点汇总" class="headerlink" title="4 C++11知识点汇总"></a>4 C++11知识点汇总</h2><h3 id="4-1-C-11常用知识点整理总结"><a href="#4-1-C-11常用知识点整理总结" class="headerlink" title="4.1 C++11常用知识点整理总结"></a>4.1 C++11常用知识点整理总结</h3><h4 id="4-1-1-关键字和语法"><a href="#4-1-1-关键字和语法" class="headerlink" title="4.1.1 关键字和语法"></a>4.1.1 关键字和语法</h4><ul><li>auto：可以根据右值，推导右值的类型，然后左边变量的类型也就知道了</li><li>nullptr：给指针专用（能够和整数进行区别）</li><li>foreach：可以遍历数组，容器等</li><li>右值引用：move移动语义函数和forward类型完美转发</li><li>模板的一个新特性：typename… A 表示可变参（类型参数）</li></ul><h4 id="4-1-2-绑定器和函数对象"><a href="#4-1-2-绑定器和函数对象" class="headerlink" title="4.1.2 绑定器和函数对象"></a>4.1.2 绑定器和函数对象</h4><ul><li>function：函数对象</li><li>bind：绑定器</li><li>lambda表达式</li></ul><h4 id="4-1-3-智能指针"><a href="#4-1-3-智能指针" class="headerlink" title="4.1.3 智能指针"></a>4.1.3 智能指针</h4><p>智能指针可以自动管理资源，以防止代码不可预期的执行导致资源泄露、资源未释放。</p><h4 id="4-1-4-容器"><a href="#4-1-4-容器" class="headerlink" title="4.1.4 容器"></a>4.1.4 容器</h4><p>unordered_set和unordered_map：哈希表</p><p>array：数组，无法进行扩容</p><p>forward_list：前向链表</p><h4 id="4-1-5-跨平台"><a href="#4-1-5-跨平台" class="headerlink" title="4.1.5 跨平台"></a>4.1.5 跨平台</h4><ol><li>C++语言级别支持多线程编程，代码可以跨平台，增强了可移植性</li></ol><h3 id="4-2-通过thread类编写C-多线程程序"><a href="#4-2-通过thread类编写C-多线程程序" class="headerlink" title="4.2 通过thread类编写C++多线程程序"></a>4.2 通过thread类编写C++多线程程序</h3><h4 id="4-2-1-怎么创建启动一个线程"><a href="#4-2-1-怎么创建启动一个线程" class="headerlink" title="4.2.1 怎么创建启动一个线程"></a>4.2.1 怎么创建启动一个线程</h4><p>​std::thread定义一个线程对象，传入线程所需要的线程函数和参数，线程自动开启</p><h4 id="4-2-2-子线程如何结束"><a href="#4-2-2-子线程如何结束" class="headerlink" title="4.2.2  子线程如何结束"></a>4.2.2  子线程如何结束</h4><p>​子线程函数运行完成，线程就结束了</p><h4 id="4-2-3-主线程如何处理子线程"><a href="#4-2-3-主线程如何处理子线程" class="headerlink" title="4.2.3 主线程如何处理子线程"></a>4.2.3 主线程如何处理子线程</h4><p>​**t.join():**等待t线程结束，当前线程继续往下运行</p><p>​**t.detach():**把t线程设置为分离线程，主线程结束，整个进程结束，所以子线程自动结束</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">threadhandler</span><span class="params">(<span class="type">int</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//让子线程睡眠2秒</span></span><br><span class="line"><span class="comment">//chrono:名词空间，定义了一些和时间有关的常量</span></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(time));</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hello threadhandler!!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建了一个线程对象，传入一个线程函数，新线程就开始运行了</span></span><br><span class="line"><span class="function">std::thread <span class="title">t1</span><span class="params">(threadhandler,<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="comment">//主线程等待子线程结束，主线程继续往下运行</span></span><br><span class="line"><span class="comment">//t1.join();</span></span><br><span class="line"><span class="comment">//把子线程设置为分离线程</span></span><br><span class="line"><span class="comment">//t1.detach();</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;main thread done&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//主线程运行完成，查看如果当前进程还有未运行完成的子进程，进程就会异常终止</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="4-3-线程间互斥-mutex互斥锁和lock-guard"><a href="#4-3-线程间互斥-mutex互斥锁和lock-guard" class="headerlink" title="4.3 线程间互斥-mutex互斥锁和lock_guard"></a>4.3 线程间互斥-mutex互斥锁和lock_guard</h3><p><strong>竞态条件</strong>：多线程程序执行的结果是一致的，不会随着CPU对线程不同的调用顺序，而产生不同运行结果</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++ thread模拟车站三个窗口卖票的程序</span></span><br><span class="line"><span class="type">int</span> ticketCount = <span class="number">100</span>;<span class="comment">//车站有100张车票，由三个窗口一起卖票</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selltraket</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (ticketcount &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;号窗卖出&quot;</span> &lt;&lt; ticketcount &lt;&lt; <span class="string">&quot;张票&quot;</span> &lt;&lt; endl;</span><br><span class="line">ticketcount--;</span><br><span class="line"></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">list&lt;std::thread&gt; tlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">tlist.<span class="built_in">push_back</span>(std::<span class="built_in">thread</span>(selltraket,i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (std::thread&amp; t : tlist)</span><br><span class="line">&#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所有窗口卖票结束&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码，启动三个线程模拟三个窗口同时卖票，总票数是100张，由于整数的<code>--</code>操作不是线程安全的操作</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">std::mutex mtx;<span class="comment">//全局的一把互斥锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//C++ thread模拟车站三个窗口卖票的程序</span></span><br><span class="line"><span class="type">int</span> ticketcount = <span class="number">100</span>;<span class="comment">//车站有100张车票，由三个窗口一起卖票</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selltraket</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ticketcount &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">mtx.<span class="built_in">lock</span>();</span><br><span class="line"><span class="comment">//不加if可能导致ticketCount=1时，两个线程同时进入while循环，导致ticketCount成为负数</span></span><br><span class="line"><span class="keyword">if</span> (ticketcount &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;号窗卖出&quot;</span> &lt;&lt; ticketcount &lt;&lt; <span class="string">&quot;张票&quot;</span> &lt;&lt; endl;</span><br><span class="line">ticketcount--;</span><br><span class="line">&#125;</span><br><span class="line">mtx.<span class="built_in">unlock</span>();</span><br><span class="line"><span class="comment">//每卖出一张票，睡眠100ms，让每个窗口都有机会卖票</span></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">list&lt;std::thread&gt; tlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">tlist.<span class="built_in">push_back</span>(std::<span class="built_in">thread</span>(selltraket, i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (std::thread&amp; t : tlist)</span><br><span class="line">&#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所有窗口卖票结束&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注:**不加if判断的话，当ticketcount &#x3D; 1时，一个线程进入while循环，当还没有完成减一的操作时，另一个线程就也进入while循环，阻塞</p><p>在加锁这个函数，当完成减去1的操作时，解锁。另一个就完成减一的操作，就把ticketcount变成－1了。</p><p><strong>lock_guard自动释放锁</strong>(相当于scoped_ptr)</p><p>由于互斥锁需要手动lock()，unlock()，可能导致unlock()调用不到。所以采用lock_guard()封装mutex，保证所以线程都能释放锁，防止</p><p>死锁的发生。（就像智能指针一样，利用栈上的对象出作用域必须析构对象来释放空间）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">std::mutex mtx;<span class="comment">//全局的一把互斥锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//C++ thread模拟车站三个窗口卖票的程序</span></span><br><span class="line"><span class="type">int</span> ticketcount = <span class="number">100</span>;<span class="comment">//车站有100张车票，由三个窗口一起卖票</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selltraket</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ticketcount &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="comment">//不加if可能导致ticketCount=1时，两个线程同时进入while循环，导致ticketCount成为负数</span></span><br><span class="line"><span class="keyword">if</span> (ticketcount &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">                <span class="comment">//临界区代码段,需要保证原子操作，所以进行线程间互斥操作-&gt;mutex</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;号窗卖出&quot;</span> &lt;&lt; ticketcount &lt;&lt; <span class="string">&quot;张票&quot;</span> &lt;&lt; endl;</span><br><span class="line">ticketcount--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每卖出一张票，睡眠100ms，让每个窗口都有机会卖票</span></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">list&lt;std::thread&gt; tlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">tlist.<span class="built_in">push_back</span>(std::<span class="built_in">thread</span>(selltraket, i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (std::thread&amp; t : tlist)</span><br><span class="line">&#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所有窗口卖票结束&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-线程间同步通信-生产者消费者模型"><a href="#4-4-线程间同步通信-生产者消费者模型" class="headerlink" title="4.4 线程间同步通信-生产者消费者模型"></a>4.4 线程间同步通信-生产者消费者模型</h3><p><strong>C++多线程编程两个问题:</strong></p><p><strong>1 线程间的互斥</strong></p><p>竟态条件-》临界区代码段-》保证原子操作-》互斥锁mutex 轻量级的无锁实现CAS</p><p>strace .&#x2F;a.out</p><p><strong>2 线程间的同步通信</strong></p><p><strong>生产者，消费者线程模型:<strong>生产者线程生产出产品以后，会通知消费者线程去消费产品；如果消费者线程去消费产品，发现还没有产品生产出来，它需要通过线程生产出产品以后，消费者线程才能继续往下执行。</strong>使用条件变量和互斥锁实现的</strong>。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span> <span class="comment">//C++ STL所有的容器都不是线程安全的</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">std::mutex mtx;<span class="comment">//定义互斥锁，做线程间的互斥操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lock_guard&lt;std::mutex&gt; <span class="title">mylock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">que.<span class="built_in">push</span>(val);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;生产者生产&quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot;号商品&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lock_guard&lt;std::mutex&gt; <span class="title">mylock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="type">int</span> val = que.<span class="built_in">front</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;消费者消费&quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot;号商品&quot;</span> &lt;&lt; endl;</span><br><span class="line">que.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">producer</span><span class="params">(Queue* queue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">queue-&gt;<span class="built_in">put</span>(i);</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">microseconds</span>(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consumer</span><span class="params">(Queue* queue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">queue-&gt;<span class="built_in">get</span>();</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">microseconds</span>(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue myqueue;</span><br><span class="line"><span class="function">std::thread <span class="title">t1</span><span class="params">(producer, &amp;myqueue)</span></span>;</span><br><span class="line"><span class="function">std::thread <span class="title">t2</span><span class="params">(consumer, &amp;myqueue)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.<span class="built_in">join</span>();</span><br><span class="line">t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注:**当消费者线程抢先CPU的时间片时，此时没有产品给消费者消费，将会出错。</p><p>**改进方法:**互斥锁和条件变量的结合</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span> <span class="comment">//C++ STL所有的容器都不是线程安全的</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">notify_one:通知另外的一个线程的</span></span><br><span class="line"><span class="comment">notify_all:通知其他所有线程的</span></span><br><span class="line"><span class="comment">通知其他所有线程，我生产了一个物品，赶紧消费吧</span></span><br><span class="line"><span class="comment">其他线程得知，就会从等待=&gt;阻塞=&gt;获取互斥锁才能继续执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">std::mutex mtx;<span class="comment">//全局的一把互斥锁</span></span><br><span class="line">std::condition_variable ctx;<span class="comment">//定义条件变量，做线程间的同步通信操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;std::mutex&gt; <span class="title">mylock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (!que.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//que不为空，生产者应该通知消费者去消费，消费完了，再继续生产</span></span><br><span class="line"><span class="comment">//生产者线程进入等待状态，并且把mtx互斥锁释放掉</span></span><br><span class="line">ctx.<span class="built_in">wait</span>(mylock);</span><br><span class="line">&#125;</span><br><span class="line">que.<span class="built_in">push</span>(val);</span><br><span class="line">ctx.<span class="built_in">notify_all</span>(); <span class="comment">//通知其他线程我生产完了，赶紧消费吧</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;生产者生产&quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot;号商品&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;std::mutex&gt; <span class="title">mylock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (que.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//que为空，消费者应该通知生产者去生产，生产完了，再继续消费</span></span><br><span class="line"><span class="comment">//消费者线程进入等待状态，并且把mtx互斥锁释放掉</span></span><br><span class="line">ctx.<span class="built_in">wait</span>(mylock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> val = que.<span class="built_in">front</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;消费者消费&quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot;号商品&quot;</span> &lt;&lt; endl;</span><br><span class="line">que.<span class="built_in">pop</span>();</span><br><span class="line">ctx.<span class="built_in">notify_all</span>();  <span class="comment">//通知其他线程我消费完了，赶紧生产吧</span></span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">producer</span><span class="params">(Queue* queue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">queue-&gt;<span class="built_in">put</span>(i);</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">microseconds</span>(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consumer</span><span class="params">(Queue* queue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">queue-&gt;<span class="built_in">get</span>();</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">microseconds</span>(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue myqueue;</span><br><span class="line"><span class="function">std::thread <span class="title">t1</span><span class="params">(producer, &amp;myqueue)</span></span>;</span><br><span class="line"><span class="function">std::thread <span class="title">t2</span><span class="params">(consumer, &amp;myqueue)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.<span class="built_in">join</span>();</span><br><span class="line">t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(T a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> A1,<span class="keyword">typename</span> A2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(T(*)(A1,A2))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A2).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> R,<span class="keyword">typename</span> A1,<span class="keyword">typename</span> A2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func3</span><span class="params">(T(R::*a)(A1,A2))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(R).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A2).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//func(10); // int</span></span><br><span class="line"><span class="comment">//func(&quot;aaa&quot;); // const char *</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>(sum);  <span class="comment">//func T 不加* int(__cdecl*)(int,int) </span></span><br><span class="line"><span class="comment">//func T 加*  int(__cdecl)(int,int) </span></span><br><span class="line"><span class="built_in">func2</span>(sum);</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>(&amp;Test::sum2);</span><br><span class="line"><span class="built_in">func3</span>(&amp;Test::sum2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C4-04(2).png" alt="本地png图片PictureTest.png"></p><h3 id="4-5-再谈lock-guard和unique-lock"><a href="#4-5-再谈lock-guard和unique-lock" class="headerlink" title="4.5 再谈lock_guard和unique_lock"></a>4.5 再谈lock_guard和unique_lock</h3><h4 id="4-5-1-mutex"><a href="#4-5-1-mutex" class="headerlink" title="4.5.1 mutex"></a>4.5.1 mutex</h4><p>​写法类似于裸指针，可能出现获取但没释放的情况。</p><h4 id="4-5-2-lock-guard"><a href="#4-5-2-lock-guard" class="headerlink" title="4.5.2 lock_guard"></a>4.5.2 lock_guard</h4><p>​(1) lock_guard类似于智能指针，构造函数获取锁，析构函数释放锁，禁止拷贝构造和赋值</p><p>​(2) lock_guard 不可能用在函数参数传递或者返回过程中，因为这些会用到拷贝构造或赋值函数，但lock_guard不能进行拷贝构造和赋</p><p>值，只能用在简单的加锁和解锁临界区代码段中。</p><h4 id="4-5-3-unique-lock"><a href="#4-5-3-unique-lock" class="headerlink" title="4.5.3 unique_lock"></a>4.5.3 unique_lock</h4><p>(1) 同样是构造函数获取锁，析构函数释放锁。</p><p>(2) 删除了左值的拷贝构造和等号运算符重载，提供了右值的拷贝构造和等号运算符重载，unique_lock可用于函数的参数传递以及返回过程中。</p><p>(3) 底层也提供了互斥锁的lock()和unlock()方法</p><h4 id="4-5-4-condition-variable"><a href="#4-5-4-condition-variable" class="headerlink" title="4.5.4 condition_variable"></a>4.5.4 condition_variable</h4><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C4-05.png" alt="本地png图片PictureTest.png"></p><h3 id="4-6-基于CAS操作的atomic原子类型"><a href="#4-6-基于CAS操作的atomic原子类型" class="headerlink" title="4.6 基于CAS操作的atomic原子类型"></a>4.6 基于CAS操作的atomic原子类型</h3><p>互斥锁是比较重的，适合于临界区代码做的事情稍稍复杂的情形。而++,–操作使用CAS原子特性就足够了，是无锁操作。</p><p>CAS并不是不加锁，只不过加锁解锁不在软件层面。cpu和内存之间通信通过系统总线进行。CAS通过exchange&#x2F;swap指令，相当于给总</p><p>线加锁，当一个线程在做cpu和内存交换，不允许其他线程再使用总线，有助于提高多线程效率。</p><p>volatile：防止多线程对共享变量进行缓存，访问的都是原始内存变量值。</p><p>不加volatile的话，每个线程都会拷贝一份自己的线程栈上的变量，带到CPU的缓存，这样效率较高，但也可能出错。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> atomic_bool is_ready = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">volatile</span> atomic_int cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!is_ready) &#123;</span><br><span class="line"><span class="comment">// 当前线程让出时间片,等待下一次调度</span></span><br><span class="line">this_thread::<span class="built_in">yield</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每个线程都加100次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">list&lt;thread&gt; tlist;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">tlist.<span class="built_in">push_back</span>(<span class="built_in">thread</span>(task));</span><br><span class="line">&#125;</span><br><span class="line">this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">2</span>));</span><br><span class="line">is_ready = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (thread&amp; t : tlist) &#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; cnt &lt;&lt; endl; <span class="comment">// 1000</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-设计模式"><a href="#5-设计模式" class="headerlink" title="5 设计模式"></a>5 设计模式</h2><h3 id="5-1-单例模式代码设计"><a href="#5-1-单例模式代码设计" class="headerlink" title="5.1 单例模式代码设计"></a>5.1 单例模式代码设计</h3><p>一个类不管创建多少次对象，都只能得到一个该对象的实例。</p><p>常用到的，比如日志模块，数据库模块</p><h4 id="5-1-1-饿汉式单例模式"><a href="#5-1-1-饿汉式单例模式" class="headerlink" title="5.1.1 饿汉式单例模式"></a><strong>5.1.1 饿汉式单例模式</strong></h4><p>还没有获取实例对象，实例对象就已经产生了。</p><p><strong>优点</strong>：线程安全的。对象存放在数据段，main函数还没有开始执行，对象就已经初始化好了。</p><p><strong>缺点</strong>：获取在软件启动的时候，并没有使用到这个对象，然而这个对象已经产生，比较浪费资源。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singlemon</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//由于普通成员方法的调用依赖对象，而获取唯一对象的时候并没有产生对象，所以定义成static</span></span><br><span class="line"><span class="comment">//static接口获取指向对象的指针</span></span><br><span class="line"><span class="function"><span class="type">static</span> Singlemon *<span class="title">getInstance</span><span class="params">()</span> <span class="comment">//3.获取类的唯一实例对象的接口方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;singlemon;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> Singlemon singlemon; <span class="comment">//2.定义一个唯一的类的实例对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Singlemon</span>() <span class="comment">//1.构造函数私有化</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;默认构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Singlemon</span>(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">Singlemon &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外初始化static成员变量处于数据段，对象在函数执行前就存在。</span></span><br><span class="line">Singlemon Singlemon::singlemon;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过类名调用函数返回指向对象的指针，用于操作对象</span></span><br><span class="line">Singlemon *p1 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p2 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p3 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-懒汉式单例模式"><a href="#5-1-2-懒汉式单例模式" class="headerlink" title="5.1.2 懒汉式单例模式"></a><strong>5.1.2 懒汉式单例模式</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singlemon</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//由于普通成员方法的调用依赖对象，而获取唯一对象的时候并没有产生对象，所以定义成static</span></span><br><span class="line"><span class="comment">//static接口获取指向对象的指针</span></span><br><span class="line"><span class="function"><span class="type">static</span> Singlemon *<span class="title">getInstance</span><span class="params">()</span> <span class="comment">//3.获取类的唯一实例对象的接口方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(singlemon == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">singlemon = <span class="keyword">new</span> <span class="built_in">Singlemon</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singlemon; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> Singlemon *singlemon; <span class="comment">//2.定义一个唯一的类的实例对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Singlemon</span>() <span class="comment">//1.构造函数私有化</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;默认构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Singlemon</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Relese</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">~<span class="built_in">Relese</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> singlemon;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Relese relese;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Singlemon</span>(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">Singlemon &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外初始化static成员变量处于数据段，对象在函数执行前就存在。</span></span><br><span class="line">Singlemon *Singlemon::singlemon = <span class="literal">nullptr</span>;</span><br><span class="line">Singlemon::Relese Singlemon::relese;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过类名调用函数返回指向对象的指针，用于操作对象</span></span><br><span class="line">Singlemon *p1 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p2 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p3 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-线程安全的懒汉单例模式"><a href="#5-2-线程安全的懒汉单例模式" class="headerlink" title="5.2 线程安全的懒汉单例模式"></a>5.2 线程安全的懒汉单例模式</h3><p><strong>(1)getInstance是否为可重入函数(非递归环境下)？</strong></p><p>**答:**如果一个函数能再多线程下运行，而且不会发生竟态条件，则这个函数为可重入函数。而不可重入函数由于使用了一些系统资源，比</p><p>如全局变量区，中断向量表等，所以它如果被中断的话，可能会出现问题，这类函数是不能运行在多任务环境下的。</p><p>(2)instance&#x3D;new <a href="https://so.csdn.net/so/search?q=Singleton&spm=1001.2101.3001.7020">Singleton</a>()做三件事：开辟内存，构造对象和给instance赋值。只要还没给instance赋值，if条件满足，另一线程就可以</p><p>进入if语句，再次实例化一个对象。<strong>线程不安全，不是可重入函数。通过 <strong>锁+双重判断，改为</strong>线程安全</strong>的函数。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singlemon</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//由于普通成员方法的调用依赖对象，而获取唯一对象的时候并没有产生对象，所以定义成static</span></span><br><span class="line"><span class="comment">//static接口获取指向对象的指针</span></span><br><span class="line"><span class="function"><span class="type">static</span> Singlemon *<span class="title">getInstance</span><span class="params">()</span> <span class="comment">//3.获取类的唯一实例对象的接口方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(singlemon == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(singlemon == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">singlemon = <span class="keyword">new</span> <span class="built_in">Singlemon</span>();</span><br><span class="line"><span class="keyword">return</span> singlemon;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singlemon; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> Singlemon *singlemon; <span class="comment">//2.定义一个唯一的类的实例对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Singlemon</span>() <span class="comment">//1.构造函数私有化</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;默认构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Singlemon</span>(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">Singlemon &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类外初始化static成员变量处于数据段，对象在函数执行前就存在。</span></span><br><span class="line">Singlemon *Singlemon::singlemon = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过类名调用函数返回指向对象的指针，用于操作对象</span></span><br><span class="line">Singlemon *p1 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p2 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p3 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注:</strong>(1) 如果将锁放在第一个if外面，单线程将会频繁的加锁解锁，浪费资源</p><p>​ (2) 不加双重判断的话，第一个线程还没赋值的时候，第二个线程满足条件阻塞在锁上，但一个线程结束，解锁时，第二个线程又初始</p><p>化一个实例对象，造成单例模式下的线程不安全。</p><p>​(3) instance指针属于数据段，是同一进程多个进程共享的内存。为了加快指令的执行，CPU会把共享内存的值拷贝一份带到各个线程</p><p>的缓存，这依然导致线程不安全，所以加上volatile，使得各个线程不再持有缓存</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singlemon</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> Singlemon *<span class="title">getInstance</span><span class="params">()</span> <span class="comment">//3.获取类的唯一实例对象的接口方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> Singlemon singlemon; <span class="comment">//2. 懒汉式单例模式，定义唯一的对象实例</span></span><br><span class="line"><span class="keyword">return</span> &amp;singlemon;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Singlemon</span>() <span class="comment">//1.构造函数私有化</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;默认构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Singlemon</span>(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">Singlemon &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过类名调用函数返回指向对象的指针，用于操作对象</span></span><br><span class="line">Singlemon *p1 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p2 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p3 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，对于static静态局部变量的初始化，编译器会自动对它的初始化进行加锁和解锁控制，使静态局部变量的初始化成为线程安全</p><p>的操作，不用担心多个线程都会初始化静态局部变量，因此上面的懒汉单例模式是线程安全的单例模式！</p><h3 id="5-3-简单工厂和工厂方法"><a href="#5-3-简单工厂和工厂方法" class="headerlink" title="5.3 简单工厂和工厂方法"></a>5.3 简单工厂和工厂方法</h3><h4 id="5-3-1-简单工厂"><a href="#5-3-1-简单工厂" class="headerlink" title="5.3.1 简单工厂"></a>5.3.1 简单工厂</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(string name):<span class="built_in">m_name</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BMW</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆宝马汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDI</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AUDI</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆奥迪汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Car * p1 = <span class="keyword">new</span> <span class="built_in">BMW</span>(<span class="string">&quot;X1&quot;</span>);</span><br><span class="line">Car * p2 = <span class="keyword">new</span> <span class="built_in">AUDI</span>(<span class="string">&quot;A6&quot;</span>);</span><br><span class="line"></span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br><span class="line">p2-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p1;</span><br><span class="line"><span class="keyword">delete</span> p2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>**缺点:**开发者需要知道派生类的名字，而逻辑上不应该了解创建对象的具体内容，所以把对象封装在一个简单工厂</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(string name):<span class="built_in">m_name</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BMW</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆宝马汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDI</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AUDI</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆奥迪汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CarType</span></span><br><span class="line">&#123;</span><br><span class="line">Bmw,Audi</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car *<span class="title">buycar</span><span class="params">(CarType cartype)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(cartype)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> Bmw:</span><br><span class="line"><span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">BMW</span>(<span class="string">&quot;X1&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> Audi:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">AUDI</span>(<span class="string">&quot;A6&quot;</span>);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cerr &lt;&lt; <span class="string">&quot;传入工厂的参数不正确:&quot;</span> &lt;&lt; cartype &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SimpleFactory *s1 = <span class="keyword">new</span> <span class="built_in">SimpleFactory</span>();</span><br><span class="line">Car *p1 = s1-&gt;<span class="built_in">buycar</span>(Bmw);</span><br><span class="line">Car *p2 = s1-&gt;<span class="built_in">buycar</span>(Audi);</span><br><span class="line"></span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br><span class="line">p2-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> s1;</span><br><span class="line"><span class="keyword">delete</span> p1;</span><br><span class="line"><span class="keyword">delete</span> p2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>**改进方法:**使用智能指针管理资源</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(string name):<span class="built_in">m_name</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BMW</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆宝马汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDI</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AUDI</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆奥迪汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CarType</span></span><br><span class="line">&#123;</span><br><span class="line">Bmw,Audi</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car *<span class="title">buycar</span><span class="params">(CarType cartype)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(cartype)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> Bmw:</span><br><span class="line"><span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">BMW</span>(<span class="string">&quot;X1&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> Audi:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">AUDI</span>(<span class="string">&quot;A6&quot;</span>);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cerr &lt;&lt; <span class="string">&quot;传入工厂的参数不正确:&quot;</span> &lt;&lt; cartype &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_ptr&lt;SimpleFactory&gt; <span class="title">s1</span><span class="params">(<span class="keyword">new</span> SimpleFactory())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p1</span><span class="params">(s1-&gt;buycar(Bmw))</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p2</span><span class="params">(s1-&gt;buycar(Audi))</span></span>;</span><br><span class="line"></span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br><span class="line">p2-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>缺点:<strong>create_car函数</strong>无法做到 “开-闭”原则</strong> ，即对原有代码修改关闭，对功能扩展开放。这个函数随着新对象的添加，或者原有对象的删</p><p>除，都会导致该函数的代码修改，而且有可能影响原来的功能。</p><h4 id="5-3-2-工厂方法"><a href="#5-3-2-工厂方法" class="headerlink" title="5.3.2 工厂方法"></a>5.3.2 工厂方法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(string name):<span class="built_in">m_name</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BMW</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆宝马汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDI</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AUDI</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆奥迪汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Car * <span class="title">createcar</span><span class="params">(string name)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMWFactory</span>:<span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car * <span class="title">createcar</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">BMW</span>(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDIFactory</span>:<span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car * <span class="title">createcar</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">AUDI</span>(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_ptr&lt;Factory&gt; <span class="title">bmwfactory</span><span class="params">(<span class="keyword">new</span> BMWFactory())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Factory&gt; <span class="title">audifactory</span><span class="params">(<span class="keyword">new</span> AUDIFactory())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p1</span><span class="params">(bmwfactory-&gt;createcar(<span class="string">&quot;x1&quot;</span>))</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p2</span><span class="params">(audifactory-&gt;createcar(<span class="string">&quot;A6&quot;</span>))</span></span>;</span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br><span class="line">p2-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>**缺点:**每一个实例工厂负责生产一种实例产品，也就是一个产品对应一个工厂，一个工厂对应一个产品。在现实生活中一个工厂是可以生</p><p>产多种产品的，而工厂方法中，给这每一个产品都创建一个工厂类，这样代码中的类就太多了，<strong>不好维护</strong>。</p><h3 id="5-4-抽象工厂"><a href="#5-4-抽象工厂" class="headerlink" title="5.4 抽象工厂"></a>5.4 抽象工厂</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(string name):<span class="built_in">m_name</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BMW</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆宝马汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDI</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AUDI</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆奥迪汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">light</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showlight</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMWlight</span>:<span class="keyword">public</span> light</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showlight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;宝马车灯&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDIlight</span>:<span class="keyword">public</span> light</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showlight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;奥迪车灯&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Car * <span class="title">createcar</span><span class="params">(string name)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> light * <span class="title">createlight</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMWFactory</span>:<span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car * <span class="title">createcar</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">BMW</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">light * <span class="title">createlight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">BMWlight</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDIFactory</span>:<span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car * <span class="title">createcar</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">AUDI</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">light * <span class="title">createlight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">AUDIlight</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_ptr&lt;Factory&gt; <span class="title">bmwfactory</span><span class="params">(<span class="keyword">new</span> BMWFactory())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Factory&gt; <span class="title">audifactory</span><span class="params">(<span class="keyword">new</span> AUDIFactory())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p1</span><span class="params">(bmwfactory-&gt;createcar(<span class="string">&quot;x1&quot;</span>))</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p2</span><span class="params">(audifactory-&gt;createcar(<span class="string">&quot;A6&quot;</span>))</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;light&gt; <span class="title">p3</span><span class="params">(bmwfactory-&gt;createlight())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;light&gt; <span class="title">p4</span><span class="params">(audifactory-&gt;createlight())</span></span>;</span><br><span class="line"></span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br><span class="line">p2-&gt;<span class="built_in">show</span>();</span><br><span class="line">p3-&gt;<span class="built_in">showlight</span>();</span><br><span class="line">p4-&gt;<span class="built_in">showlight</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="5-5-总结"><a href="#5-5-总结" class="headerlink" title="5.5 总结"></a>5.5 总结</h3><p><strong>(1) 简单工厂（Simple Factory）</strong></p><p>​<strong>优点：</strong>把对象的创建封装在一个接口函数里面，通过传入不同标识，返回创建的对象，客户不用自己负责new对象，不用了解对象创建</p><p>​             的详细过程。</p><p>​<strong>缺点：</strong>提供创建对象实例的接口函数不闭合，不能对修改关闭</p><p><strong>(2) 工厂方法（Factory Method）</strong></p><p>​<strong>优点：</strong>Factory基类，提供了一个纯虚函数（创建产品），定义派生类（具体产品的工厂）负责创建对应产品，可以做到不同的产品，</p><p>​                在不同的工厂里面创建，能够对现有工厂以及产品修改关闭。</p><p>​     <strong>缺点：</strong>实际上，很多产品是有关联关系的，属于一个产品簇，不应该放在不同的工厂里面去创建，这样一是不符合产品对象创建逻</p><p>辑，二是工厂类太多了，不好维护。</p><p><strong>(3) 抽象工厂（Abstract Factory）</strong></p><p>​      把有关联关系的、属于一个产品簇的所有产品创建的接口函数放在一个抽象工厂里面，派生类（具体生产的工厂）应该负责创建该产</p><p>品簇里面所有产品。</p><h3 id="5-6-代理模式"><a href="#5-6-代理模式" class="headerlink" title="5.6 代理模式"></a>5.6 代理模式</h3><p><strong>代理Proxy模式：</strong>通过代理类，来控制实际对象的访问权限</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">movie</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">freemovies</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">vipmovies</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ticketmovies</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//委托类 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Freebugmovie</span>:<span class="keyword">public</span> movie</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">freemovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;观看免费电影&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vipmovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;观看vip电影&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ticketmovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;观看用券电影&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理FixBugVideoSite</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vistormovie</span>:<span class="keyword">public</span> movie</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Vistormovie</span>()</span><br><span class="line">&#123;</span><br><span class="line">videomovie = <span class="keyword">new</span> <span class="built_in">Freebugmovie</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Vistormovie</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> videomovie;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过代理对象的freemovies，来访问真正委托类对象的freemovies方法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">freemovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">videomovie-&gt;<span class="built_in">freemovies</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vipmovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;您目前只是普通游客，需要升级为VIP，才能观看VIP电影&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ticketmovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;您目前没有券，需要购买电影券，才能观看电影&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">movie * videomovie;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理Vipmovie</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vipmovie</span>:<span class="keyword">public</span> movie</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Vipmovie</span>()</span><br><span class="line">&#123;</span><br><span class="line">videomovie = <span class="keyword">new</span> <span class="built_in">Freebugmovie</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Vipmovie</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> videomovie;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">freemovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过代理对象的freemovies，来访问真正委托类对象的freemovies方法</span></span><br><span class="line">videomovie-&gt;<span class="built_in">freemovies</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vipmovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过代理对象的vipmovies，来访问真正委托类对象的vipmovies方法</span></span><br><span class="line">videomovie-&gt;<span class="built_in">vipmovies</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ticketmovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;您目前没有券，需要购买电影券，才能观看电影&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">movie * videomovie;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用的API接口，使用的都是基类的指针或者引用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">watchmovie</span><span class="params">(unique_ptr&lt;movie&gt; &amp;ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ptr-&gt;<span class="built_in">freemovies</span>();</span><br><span class="line">ptr-&gt;<span class="built_in">vipmovies</span>();</span><br><span class="line">ptr-&gt;<span class="built_in">ticketmovies</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//客户直接访问代理对象</span></span><br><span class="line"><span class="function">unique_ptr&lt;movie&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> Vistormovie())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;movie&gt; <span class="title">p2</span><span class="params">(<span class="keyword">new</span> Vipmovie())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">watchmovie</span>(p1);</span><br><span class="line"><span class="built_in">watchmovie</span>(p2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-7-装饰器模式"><a href="#5-7-装饰器模式" class="headerlink" title="5.7 装饰器模式"></a>5.7 装饰器模式</h3><p>​通过子类实现功能增强的问题：为了增强现有类的功能，通过实现子类的方式，重写接口，是可以完成功能扩展的，但是代码中有太多</p><p>的子类添加进来了。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是一辆宝马汽车，配置有：基类配置&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDI</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是一辆奥迪汽车，配置有：基类配置&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BENZ</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是一辆奔驰汽车，配置有：基类配置&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteDecorator01</span>: <span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ConcreteDecorator01</span>(Car *p1):<span class="built_in">pCar</span>(p1)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pCar-&gt;<span class="built_in">show</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;,定速巡航&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">ConcreteDecorator01</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> pCar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Car *pCar;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteDecorator02</span>: <span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ConcreteDecorator02</span>(Car *p1):<span class="built_in">pCar</span>(p1)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pCar-&gt;<span class="built_in">show</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;,自动刹车&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">ConcreteDecorator02</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> pCar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Car *pCar;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteDecorator03</span>: <span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ConcreteDecorator03</span>(Car *p1):<span class="built_in">pCar</span>(p1)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pCar-&gt;<span class="built_in">show</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;,轨道偏离&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">ConcreteDecorator03</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> pCar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Car *pCar;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Car *p1 = <span class="keyword">new</span> <span class="built_in">BMW</span>();</span><br><span class="line">p1 = <span class="keyword">new</span> <span class="built_in">ConcreteDecorator01</span>(p1);</span><br><span class="line">p1 = <span class="keyword">new</span> <span class="built_in">ConcreteDecorator02</span>(p1);</span><br><span class="line">p1 = <span class="keyword">new</span> <span class="built_in">ConcreteDecorator03</span>(p1);</span><br><span class="line">p1-&gt;<span class="built_in">show</span>(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-8-适配器模式"><a href="#5-8-适配器模式" class="headerlink" title="5.8 适配器模式"></a>5.8 适配器模式</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VGA</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV01</span>:<span class="keyword">public</span> VGA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过VGA接口投影进行播放视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">//新进很多只支持HDMI的投影仪，但旧电脑只支持VGA接口</span></span><br><span class="line"><span class="comment">//方法一:买一个支持HDMI接口的电脑，这个就叫代码重构</span></span><br><span class="line"><span class="comment">//方法二:买一个转换头(适配器),将VGA信号转换成HDMI接口 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HDMI</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV02</span>:<span class="keyword">public</span> HDMI</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过HDMI接口投影进行播放视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VGAadapttoHDMI</span>:<span class="keyword">public</span> VGA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">VGAadapttoHDMI</span>(HDMI *hdmi):<span class="built_in">pHDMI</span>(hdmi)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pHDMI-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">HDMI *pHDMI;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">playvedio</span><span class="params">(VGA *pVGA)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pVGA-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Computer computer;</span><br><span class="line"></span><br><span class="line">computer.<span class="built_in">playvedio</span>(<span class="keyword">new</span> <span class="built_in">TV01</span>());</span><br><span class="line"></span><br><span class="line">computer.<span class="built_in">playvedio</span>(<span class="keyword">new</span> <span class="built_in">VGAadapttoHDMI</span>(<span class="keyword">new</span> <span class="built_in">TV02</span>()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-9-观察者模式"><a href="#5-9-观察者模式" class="headerlink" title="5.9 观察者模式"></a>5.9 观察者模式</h3><p>​行为型模式：主要关注的是对象之间的通信</p><p>​观察者-监听者模式（发布-订阅模式）设计模式：主要关注的是对象的一对多的关系，也就是多个对象都依赖一个对象，当该对象的状</p><p>态发生改变时，其他对象都能够接收到相应通知。比如有一组数据，生成一个数据对象，通过这一组数据可以生成曲线图（对象1）&#x2F;柱状</p><p>图（对象2）&#x2F;圆饼图（对象3），当数据对象发生改变时，对象1、对象2、对象3应该及时的收到相应的通知！</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">observer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">handle</span><span class="params">(<span class="type">int</span> msgid)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">observer1</span>:<span class="keyword">public</span> observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(msgid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer1 recv 1 msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer1 recv 2 msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer1 recv unknow msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">observer2</span>:<span class="keyword">public</span> observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(msgid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer2 recv 2 msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer2 recv unknow msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">observer3</span>:<span class="keyword">public</span> observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(msgid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer3 recv 1 msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer3 recv 1 msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer3 recv unknow msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addobserver</span><span class="params">(observer *server,<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">subjecter[msgid].<span class="built_in">push_back</span>(server);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">disclain</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> it = subjecter.<span class="built_in">find</span>(msgid);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(it != subjecter.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(observer *server:it-&gt;second)</span><br><span class="line">&#123;</span><br><span class="line">server-&gt;<span class="built_in">handle</span>(msgid);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,list&lt;observer*&gt;&gt; subjecter;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Subject subject;</span><br><span class="line"></span><br><span class="line">observer *p1 = <span class="keyword">new</span> <span class="built_in">observer1</span>();</span><br><span class="line">observer *p2 = <span class="keyword">new</span> <span class="built_in">observer2</span>();</span><br><span class="line">observer *p3 = <span class="keyword">new</span> <span class="built_in">observer3</span>();</span><br><span class="line"></span><br><span class="line">subject.<span class="built_in">addobserver</span>(p1,<span class="number">1</span>);</span><br><span class="line">subject.<span class="built_in">addobserver</span>(p1,<span class="number">2</span>);</span><br><span class="line">subject.<span class="built_in">addobserver</span>(p2,<span class="number">2</span>);</span><br><span class="line">subject.<span class="built_in">addobserver</span>(p3,<span class="number">1</span>);</span><br><span class="line">subject.<span class="built_in">addobserver</span>(p3,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> msgid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入消息ID：&quot;</span> ;</span><br><span class="line">cin &gt;&gt; msgid;</span><br><span class="line"></span><br><span class="line">subject.<span class="built_in">disclain</span>(msgid); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-搜索迷宫路径"><a href="#6-搜索迷宫路径" class="headerlink" title="6 搜索迷宫路径"></a>6 搜索迷宫路径</h2><h3 id="6-1-深度优先遍历搜索迷宫路径"><a href="#6-1-深度优先遍历搜索迷宫路径" class="headerlink" title="6.1 深度优先遍历搜索迷宫路径"></a>6.1 深度优先遍历搜索迷宫路径</h3><p>如何深度搜索一个迷宫路径？</p><p>​非递归实现，需要一个栈。深度优先遍历就是一个方向能走，就一直朝着这个方向(同一个方向)走。我们给代码定义一下：优先是向右边走，然后是向下走，然</p><p>后是向左走，最后是向上走。迷宫的左上角元素坐标（0,0）的值是1的话，根本不存在迷宫通行的路径，入口就是封的了。如果是左上角元素坐标(0,0)的值是0的</p><p>话，把它入栈。栈现在不为空，取栈顶元素，先看它右边能不能走，能走的话，就一直向右走，它右边是0，就入栈了。再查看栈顶元素，看它的右边能不能走，</p><p>假设它的右边和下面的元素值都是1，它左边是0，又走回到入口元素了，然后它的右边是0，就这样，不断来回走了。所以，我们得这么判断：如果栈顶元素的右</p><p>边可以走的话，我们要把当前节点的右方向改成不能走，把右边节点的左方向改成不能走。因为不能走回头路，而且因为路子走不通回退后也不能继续走相同的死</p><p>路。因为是深度<a href="https://so.csdn.net/so/search?q=%E9%81%8D%E5%8E%86&spm=1001.2101.3001.7020">遍历</a>，所以入栈后，不用判断之前节点的方向。continue后，重新取栈顶元素，继续进行判断。同理得到向下、向左和向上。</p><p>​如果栈顶元素判断完四个方向都不能走，就是到死路了，就把栈顶元素出栈。然后再取栈顶元素，进行判断，如果它的4个方向都不能走，就出栈，如果栈为</p><p>空，则迷宫无通路。如果有方向能走，就继续走下去。以此类推下去。但是，都要判断一下此节点是不是右下角的节点，如果是，就是找到通路了。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对应state四个状态，因为state是数组，所以一定对应好下标</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LEFT = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> RIGHT = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> UP = <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> DOWN = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> num = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NO = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> YES = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Meth</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Meth</span>(<span class="type">int</span> row, <span class="type">int</span> col) :<span class="built_in">m_row</span>(row),<span class="built_in">m_col</span>(col)</span><br><span class="line">    &#123;</span><br><span class="line">        node = <span class="keyword">new</span> Node *[m_row];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node[i] = <span class="keyword">new</span> Node[m_col];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initnode</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        node[x][y].m_x = x;</span><br><span class="line">        node[x][y].m_y = y;</span><br><span class="line">        node[x][y].m_val = val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node[x][y].state[i] = NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setnodestate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m_col; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (node[i][j].m_val == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j &lt; m_col - <span class="number">1</span> &amp;&amp; node[i][j + <span class="number">1</span>].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[RIGHT] = YES;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i &lt; m_row - <span class="number">1</span> &amp;&amp; node[i + <span class="number">1</span>][j].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[DOWN] = YES;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; node[i][j - <span class="number">1</span>].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[LEFT] = YES;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; node[i - <span class="number">1</span>][j].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[UP] = YES;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">searchnodepath</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node[<span class="number">0</span>][<span class="number">0</span>].m_val == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        pstack.<span class="built_in">push</span>(node[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!pstack.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            Node top = pstack.<span class="built_in">top</span>();</span><br><span class="line">            <span class="type">int</span> x = top.m_x;</span><br><span class="line">            <span class="type">int</span> y = top.m_y;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (x == m_row - <span class="number">1</span> &amp;&amp; y == m_col - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[RIGHT] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[RIGHT] = NO;</span><br><span class="line">                node[x][y + <span class="number">1</span>].state[LEFT] = NO;</span><br><span class="line">                pstack.<span class="built_in">push</span>(node[x][y + <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[DOWN] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[DOWN] = NO;</span><br><span class="line">                node[x + <span class="number">1</span>][y].state[UP] = NO;</span><br><span class="line">                pstack.<span class="built_in">push</span>(node[x + <span class="number">1</span>][y]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[LEFT] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[LEFT] = NO;</span><br><span class="line">                node[x][y - <span class="number">1</span>].state[RIGHT] = NO;</span><br><span class="line">                pstack.<span class="built_in">push</span>(node[x][y - <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[UP] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[UP] = NO;</span><br><span class="line">                node[x - <span class="number">1</span>][y].state[DOWN] = NO;</span><br><span class="line">                pstack.<span class="built_in">push</span>(node[x - <span class="number">1</span>][y]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pstack.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">shownodepath</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pstack.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;不存在迷宫路径&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (!pstack.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                Node top = pstack.<span class="built_in">top</span>();</span><br><span class="line">                node[top.m_x][top.m_y].m_val = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                pstack.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_row; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m_col; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (node[i][j].m_val == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot;* &quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cout &lt;&lt; node[i][j].m_val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> m_x;</span><br><span class="line">        <span class="type">int</span> m_y;</span><br><span class="line">        <span class="type">int</span> m_val;</span><br><span class="line">        <span class="type">int</span> state[num];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Node** node;</span><br><span class="line">    <span class="type">int</span> m_row;</span><br><span class="line">    <span class="type">int</span> m_col;</span><br><span class="line">    stack&lt;Node&gt; pstack;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入迷宫得行列数(例如: 10 10):&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> col = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> row = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; row &gt;&gt; col;</span><br><span class="line"></span><br><span class="line">    <span class="function">Meth <span class="title">meth</span><span class="params">(row, col)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入迷宫的路径信息(0表示可以走,1表示不能走):&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; data;</span><br><span class="line"></span><br><span class="line">            meth.<span class="built_in">initnode</span>(i, j, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    meth.<span class="built_in">setnodestate</span>();</span><br><span class="line"></span><br><span class="line">    meth.<span class="built_in">searchnodepath</span>();</span><br><span class="line"></span><br><span class="line">    meth.<span class="built_in">shownodepath</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-广度优先遍历搜索迷宫路径"><a href="#6-2-广度优先遍历搜索迷宫路径" class="headerlink" title="6.2 广度优先遍历搜索迷宫路径"></a>6.2 广度优先遍历搜索迷宫路径</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对应state四个状态，因为state是数组，所以一定对应好下标</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LEFT = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> RIGHT = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> UP = <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> DOWN = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> num = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NO = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> YES = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Meth</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Meth</span>(<span class="type">int</span> row, <span class="type">int</span> col) :<span class="built_in">m_row</span>(row), <span class="built_in">m_col</span>(col)</span><br><span class="line">    &#123;</span><br><span class="line">        node = <span class="keyword">new</span> Node * [m_row];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node[i] = <span class="keyword">new</span> Node[m_col];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pnode.<span class="built_in">resize</span>(m_row * m_col);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initnode</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        node[x][y].m_x = x;</span><br><span class="line">        node[x][y].m_y = y;</span><br><span class="line">        node[x][y].m_val = val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node[x][y].state[i] = NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setnodestate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m_col; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (node[i][j].m_val == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j &lt; m_col - <span class="number">1</span> &amp;&amp; node[i][j + <span class="number">1</span>].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[RIGHT] = YES;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i &lt; m_row - <span class="number">1</span> &amp;&amp; node[i + <span class="number">1</span>][j].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[DOWN] = YES;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; node[i][j - <span class="number">1</span>].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[LEFT] = YES;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; node[i - <span class="number">1</span>][j].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[UP] = YES;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">searchnodepath</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node[<span class="number">0</span>][<span class="number">0</span>].m_val == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pqueue.<span class="built_in">push</span>(node[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!pqueue.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            Node top = pqueue.<span class="built_in">front</span>();</span><br><span class="line">            <span class="type">int</span> x = top.m_x;</span><br><span class="line">            <span class="type">int</span> y = top.m_y;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[RIGHT] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[RIGHT] = NO;</span><br><span class="line">                node[x][y + <span class="number">1</span>].state[LEFT] = NO;</span><br><span class="line">                pnode[x * m_row + y + <span class="number">1</span>] = node[x][y];</span><br><span class="line">                pqueue.<span class="built_in">push</span>(node[x][y + <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">check</span>(node[x][y + <span class="number">1</span>]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[DOWN] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[DOWN] = NO;</span><br><span class="line">                node[x + <span class="number">1</span>][y].state[UP] = NO;</span><br><span class="line">                pnode[(x + <span class="number">1</span>) * m_row + y] = node[x][y];</span><br><span class="line">                pqueue.<span class="built_in">push</span>(node[x+<span class="number">1</span>][y]);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">check</span>(node[x+<span class="number">1</span>][y]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[LEFT] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[LEFT] = NO;</span><br><span class="line">                node[x][y - <span class="number">1</span>].state[RIGHT] = NO;</span><br><span class="line">                pnode[x * m_row + y - <span class="number">1</span>] = node[x][y];</span><br><span class="line">                pqueue.<span class="built_in">push</span>(node[x][y - <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">check</span>(node[x][y - <span class="number">1</span>]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[UP] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[UP] = NO;</span><br><span class="line">                node[x - <span class="number">1</span>][y].state[DOWN] = NO;</span><br><span class="line">                pnode[(x <span class="number">-1</span>) * m_row + y ] = node[x][y];</span><br><span class="line">                pqueue.<span class="built_in">push</span>(node[x - <span class="number">1</span>][y]);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">check</span>(node[x<span class="number">-1</span>][y]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pqueue.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">shownodepath</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pqueue.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;不存在迷宫路径&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = m_row - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> y = m_col - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].m_val = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Node top = pnode[x * m_row + y];</span><br><span class="line">                x = top.m_x;</span><br><span class="line">                y = top.m_y;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_row; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m_col; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (node[i][j].m_val == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot;* &quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cout &lt;&lt; node[i][j].m_val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> m_x;</span><br><span class="line">        <span class="type">int</span> m_y;</span><br><span class="line">        <span class="type">int</span> m_val;</span><br><span class="line">        <span class="type">int</span> state[num];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(Node&amp; node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( node.m_x == m_row - <span class="number">1</span> &amp;&amp; node.m_y == m_col - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Node** node;</span><br><span class="line">    <span class="type">int</span> m_row;</span><br><span class="line">    <span class="type">int</span> m_col;</span><br><span class="line">    queue&lt;Node&gt; pqueue;</span><br><span class="line">    vector&lt;Node&gt; pnode;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入迷宫得行列数(例如: 10 10):&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> col = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> row = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; row &gt;&gt; col;</span><br><span class="line"></span><br><span class="line">    <span class="function">Meth <span class="title">meth</span><span class="params">(row, col)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入迷宫的路径信息(0表示可以走,1表示不能走):&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; data;</span><br><span class="line"></span><br><span class="line">            meth.<span class="built_in">initnode</span>(i, j, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    meth.<span class="built_in">setnodestate</span>();</span><br><span class="line"></span><br><span class="line">    meth.<span class="built_in">searchnodepath</span>();</span><br><span class="line"></span><br><span class="line">    meth.<span class="built_in">shownodepath</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-大数的加减法"><a href="#6-3-大数的加减法" class="headerlink" title="6.3 大数的加减法"></a>6.3 大数的加减法</h3><h3 id="6-4-海量数据的查重问题"><a href="#6-4-海量数据的查重问题" class="headerlink" title="6.4 海量数据的查重问题"></a>6.4 海量数据的查重问题</h3><p>(1) 哈希表(得看有没有对内存的限制，如果没有限制，就是直接用哈希表解决）</p><p>​比如说 50亿（5G）个整数的查重问题， 10亿个整数内存大约是1G，50亿个整数相当于内存是5G，一个整数4个字节，如果要算50亿个整数的查重问题的话，</p><p>如果要用一个哈希表把这50亿个数据全部存储下来，就得花20G的内存，链式哈希表每个节点还得有一个地址域，又占4字节，所以总共需要（20G+20G&#x3D;40G） </p><p>的内存空间。哈希表就是空间换时间的这么一个结构。</p><p>(2) 分治思想 （如果对内存有要求，就要使用分治思想，对数据的大小进行划分）</p><p>​第1和第2个方法思想是解决查重问题的根本出发点，就是用哈希表。</p><p>(3) Bloom Filter：布隆过滤器（查重用的，节省内存，但是有点误差）</p><p>(4) 如果是字符串类型的查重 除了哈希表，布隆过滤器，还可以使用TrieTree字典树(前缀树)</p><p><strong>考察点1：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> size = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[size] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = <span class="built_in">rand</span>() % <span class="number">10000</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; map1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> val:arr)</span><br><span class="line">&#123;</span><br><span class="line">map1[val]++; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:map1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(it.second &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;值:&quot;</span> &lt;&lt; it.first &lt;&lt; <span class="string">&quot;重复次数:&quot;</span> &lt;&lt; it.second &lt;&lt; endl;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>考察点2：</strong>有一个文件，有大量的整数 50亿个整数，内存限制400M，让你找出文件中重复的元素，重复的次数。如果文件有50亿个整数(5G)，如果要用哈希表，</p><p>就是要开辟 5G乘以4&#x3D;20G乘以2 &#x3D; 40G的内存大小空间，此时只能用分治法的思想了。</p><p><strong>分治法的思想：</strong> 把大文件划分成小文件，使得每一个小文件能够加载到内存当中，求出对应的重复的元素，把结果写入到一个存储重复元素的文件当中。大文件 </p><p>&#x3D;》 小文件的个数（40G&#x2F;400M &#x3D; 120个小文件，一个系统默认一个进程使用的文件数不超过1024遍历大文件的元素，把每一个元素根据哈希映射函数，放到对应</p><p>序号的小文件当中data % 127 &#x3D; file_index，依次划分为data0.txt，data1.tx1……..data126.txt。值相同的，通过一样的哈希映射函数，肯定是放在同一个小文件</p><p>当中的，这样就从小文件里把数据全部读出来放在内存中，进行查重，求重复出现的数字进行输出或者打印或者存储到一个文件中。</p><p><strong>考察点3：</strong>a,b两个文件，里面都有10亿个整数，内存限制400M，让你求出a，b两个文件当中重复的元素有哪些？</p><p><strong>还是分治思想的策略：</strong>10亿个整数相当于是 -&gt; 1G乘以4 &#x3D; 4G乘以2&#x3D;8G&#x2F;400M &#x3D; 27个小文件，把a和b两个大文件，划分为个数相等的一系列小文件。从a文件中读</p><p>取数据，通过 数据%27 &#x3D; file_index 放到a的其中的小文件中。从b文件中读取数据，通过 数据%27 &#x3D; file_index 放到b的其中的小文件中</p><p><strong>a和b两个文件中，数据相同的元素，进行哈希映射以后，肯定在相同序号的</strong></p><h3 id="6-5-海量数据求top-k的问题"><a href="#6-5-海量数据求top-k的问题" class="headerlink" title="6.5 海量数据求top k的问题"></a>6.5 海量数据求top k的问题</h3><p>(1)求最大的&#x2F;最小的前K个元素?求最大的&#x2F;最小的第K个元素?</p><p>10000个整数，找值前10大的元素或者是找值前10</p><p><strong>解法1：</strong>大根堆&#x2F;小根堆 &#x3D;》不用自己实现大根堆&#x2F;小根堆， 使用优先级队列priority_queue就可以，先用前10个整数创建一个小根堆（最小值就在堆顶），然后遍</p><p>历剩下的整数，如果整数比堆顶元素大，那么删除堆顶元素（出堆），然后再把整数入堆，遍历完所有整数，小根堆里面放的就是值最大的前10个元素了；如果找</p><p>的是第k小（大根堆堆顶）或者第k大（小根堆堆顶），只需要访问堆顶一个元素就可以了。大根堆是求最小的前K个元素，小根堆是求最大的前K个元素。</p><p><strong>小根堆求最大的前K个元素</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; minHeap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">minHeap.<span class="built_in">push</span>(vec[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*it &gt; minHeap.<span class="built_in">top</span>())</span><br><span class="line">&#123;</span><br><span class="line">minHeap.<span class="built_in">push</span>(*it);</span><br><span class="line">minHeap.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!minHeap.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; minHeap.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">minHeap.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>大根堆求最小的前K个元素</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">queue.<span class="built_in">push</span>(vec[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*it &lt; queue.<span class="built_in">top</span>())</span><br><span class="line">&#123;</span><br><span class="line">queue.<span class="built_in">push</span>(*it);</span><br><span class="line">queue.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!queue.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; queue.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">queue.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解法2：快排分割函数(比优先级队列效率更高)</strong></p><p>​经过快排分割函数，能够在O(lgn)时间内，把小于基准数的整数调整到左边，把大于基准数的整数调整到右边，基准数（index）就可以认为是第（index+1）小</p><p>的整数了 [0,(index)]就是前index+1小的整数了</p><p><strong>求最小的前k个元素</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k = arr[i];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= k)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">arr[i++] = arr[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt; k)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">arr[j--] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = k;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> pos = <span class="built_in">partition</span>(arr, i, j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos == k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> arr[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pos &gt; k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(arr, i, pos - <span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(arr, pos + <span class="number">1</span>, j, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sort</span>(vec, <span class="number">0</span>, vec.<span class="built_in">size</span>() - <span class="number">1</span>, i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>求最大的前k个元素</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k = arr[i];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &lt; k)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">arr[i++] = arr[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &gt;= k)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">arr[j--] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = k;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> pos = <span class="built_in">partition</span>(arr, i, j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos == k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> arr[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pos &gt; k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(arr, i, pos - <span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(arr, pos + <span class="number">1</span>, j, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sort</span>(vec, <span class="number">0</span>, vec.<span class="built_in">size</span>() - <span class="number">1</span>, i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-海量数据查重和topK的综合应用"><a href="#6-6-海量数据查重和topK的综合应用" class="headerlink" title="6.6 海量数据查重和topK的综合应用"></a>6.6 海量数据查重和topK的综合应用</h3><p>查重：数据是否有重复，以及数据重复的次数</p><p>topK：有几亿个数字。求元素的值，前K大&#x2F;小，第K大&#x2F;小</p><p><strong>题目：数据的重复次数最大&#x2F;最小的前K个&#x2F;第K个</strong></p><p>哈希统计(map) + 堆&#x2F;快排分割</p><p><strong>在一组数字中 ，找出重复次数最多的前10个(小顶堆)</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> val:vec)</span><br><span class="line">&#123;</span><br><span class="line">mymap[val]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it = mymap.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> P = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> FUNC = function&lt;<span class="built_in">bool</span>(P&amp;, P&amp;)&gt;;</span><br><span class="line">priority_queue&lt;P, vector&lt;P&gt;, FUNC&gt; <span class="built_in">myqueue</span>(</span><br><span class="line">[](<span class="keyword">auto</span>&amp; a, <span class="keyword">auto</span>&amp; b)-&gt;<span class="type">bool</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; it != mymap.<span class="built_in">end</span>()&amp;&amp; k &lt; <span class="number">10</span>; k++, it++)</span><br><span class="line">&#123;</span><br><span class="line">myqueue.<span class="built_in">push</span>(*it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; it != mymap.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (it-&gt;second &gt; myqueue.<span class="built_in">top</span>().second)</span><br><span class="line">&#123;</span><br><span class="line">myqueue.<span class="built_in">pop</span>();</span><br><span class="line">myqueue.<span class="built_in">push</span>(*it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!myqueue.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; myqueue.<span class="built_in">top</span>().first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; myqueue.<span class="built_in">top</span>().second &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">myqueue.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在一组数字中 ，找出重复次数最少的前10个(大顶堆)</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> val : vec)</span><br><span class="line">&#123;</span><br><span class="line">mymap[val]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it = mymap.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> P = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> FUNC = function&lt;<span class="built_in">bool</span>(P&amp;, P&amp;)&gt;;</span><br><span class="line">priority_queue&lt;P, vector&lt;P&gt;, FUNC&gt; <span class="built_in">myqueue</span>(</span><br><span class="line">[](<span class="keyword">auto</span>&amp; a, <span class="keyword">auto</span>&amp; b)-&gt;<span class="type">bool</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; it != mymap.<span class="built_in">end</span>() &amp;&amp; k &lt; <span class="number">10</span>; k++, it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (it-&gt;second != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">myqueue.<span class="built_in">push</span>(*it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; it != mymap.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (it-&gt;second &lt; myqueue.<span class="built_in">top</span>().second &amp;&amp; it-&gt;second != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">myqueue.<span class="built_in">pop</span>();</span><br><span class="line">myqueue.<span class="built_in">push</span>(*it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!myqueue.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; myqueue.<span class="built_in">top</span>().first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; myqueue.<span class="built_in">top</span>().second &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">myqueue.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在一组数字中 ，找出重复次数最多的前10个(快速分割函数)</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec,<span class="type">int</span> i,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k = vec[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp;  vec[j] &lt; k)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">vec[i++] = vec[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp;  vec[i] &gt; k)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">vec[j--] = vec[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vec[i] = k;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;vec, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> pos = <span class="built_in">partition</span>(vec, i, j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos == k<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> vec[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pos &gt; k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(vec, i, pos - <span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(vec, pos + <span class="number">1</span>, j, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec2;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> val : vec)</span><br><span class="line">&#123;</span><br><span class="line">mymap[val]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = mymap.<span class="built_in">begin</span>(); it != mymap.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (it-&gt;second &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">vec1.<span class="built_in">push_back</span>(it-&gt;second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> result = <span class="built_in">sort</span>(vec1, <span class="number">0</span>, vec1.<span class="built_in">size</span>() - <span class="number">1</span>, i);</span><br><span class="line">cout &lt;&lt; result &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">vec2.<span class="built_in">push_back</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在一组数字中 ，找出重复次数最少的前10个(快速分割函数)</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec, <span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k = vec[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; vec[j] &gt;= k)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">vec[i++] = vec[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; vec[i] &lt; k)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">vec[j--] = vec[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vec[i] = k;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> pos = <span class="built_in">partition</span>(vec, i, j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos == k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> vec[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pos &gt; k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(vec, i, pos - <span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(vec, pos + <span class="number">1</span>, j, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec2;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> val : vec)</span><br><span class="line">&#123;</span><br><span class="line">mymap[val]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = mymap.<span class="built_in">begin</span>(); it != mymap.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (it-&gt;second &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">vec1.<span class="built_in">push_back</span>(it-&gt;second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> result = <span class="built_in">sort</span>(vec1, <span class="number">0</span>, vec1.<span class="built_in">size</span>() - <span class="number">1</span>, i);</span><br><span class="line">cout &lt;&lt; result &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">vec2.<span class="built_in">push_back</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++标准11-14</title>
      <link href="/2022/07/29/C-%E6%A0%87%E5%87%8611-14/"/>
      <url>/2022/07/29/C-%E6%A0%87%E5%87%8611-14/</url>
      
        <content type="html"><![CDATA[<h1 id="第一讲-语言基础-C-x2F-C"><a href="#第一讲-语言基础-C-x2F-C" class="headerlink" title="第一讲 语言基础(C&#x2F;C++)"></a>第一讲 语言基础(C&#x2F;C++)</h1><h2 id="第一节-基础"><a href="#第一节-基础" class="headerlink" title="第一节 基础"></a>第一节 基础</h2><h3 id="1-1-头文件"><a href="#1-1-头文件" class="headerlink" title="1.1 头文件"></a>1.1 头文件</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C1.1.png"></p><p>（1）标准库都在std名称空间中，全名为std::+名字；</p><p>（2）旧版本就是#include&lt;stdio.h&gt;也可以兼容使用；</p><h3 id="1-2-测试是否支持并设置C-2-0-cplusplus"><a href="#1-2-测试是否支持并设置C-2-0-cplusplus" class="headerlink" title="1.2 测试是否支持并设置C++2.0,_cplusplus"></a>1.2 测试是否支持并设置C++2.0,_cplusplus</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C1.2.png"></p><h3 id="1-3-主要学习内容-C-2-0版本"><a href="#1-3-主要学习内容-C-2-0版本" class="headerlink" title="1.3 主要学习内容-C++2.0版本"></a>1.3 主要学习内容-C++2.0版本</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C1.3.png"></p><h2 id="第二节-Variadic-Templates可变参数模板（重量级改变）"><a href="#第二节-Variadic-Templates可变参数模板（重量级改变）" class="headerlink" title="第二节 Variadic Templates可变参数模板（重量级改变）"></a>第二节 Variadic Templates可变参数模板（重量级改变）</h2><h3 id="2-1-print-为例"><a href="#2-1-print-为例" class="headerlink" title="2.1 print()为例"></a>2.1 print()为例</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C2.1.png"></p><p>（1）const Type&amp;… <a href="https://so.csdn.net/so/search?q=args&spm=1001.2101.3001.7020">args</a>表明接收任意数量任意类型的参数；</p><p>（2）可以帮助我们做递归操作每次取出一个参数；做一个递归结束无参数的函数，终止递归；</p><p>（3）sizeof…(args)返回到底有多少个；</p><p>（4）2和3可以并存吗，是可以的！</p><h3 id="2-2-hash-function为例，依次分离出一个参数"><a href="#2-2-hash-function为例，依次分离出一个参数" class="headerlink" title="2.2 hash function为例，依次分离出一个参数"></a>2.2 hash function为例，依次分离出一个参数</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C2.2.png"></p><p>（1）先调用1，形成seed和一包数据，然后调用2（特化)，hash_combine将一包T融入seed变化，然后自己调用自己，再进行拆分，然后到3做为终止条件；每次调用自己的hash_val就是拆分出一个参数；</p><h3 id="2-3-tuple，多次继承为例"><a href="#2-3-tuple，多次继承为例" class="headerlink" title="2.3 tuple，多次继承为例"></a>2.3 tuple，多次继承为例</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C2.3.png"></p><p>（1）每次继承留下一个参数，继承其余一包数据；</p><h2 id="第三节-小改变集合"><a href="#第三节-小改变集合" class="headerlink" title="第三节 小改变集合"></a>第三节 小改变集合</h2><h3 id="3-1-Spaces-in-Template-Expressions模板表达式中的空格"><a href="#3-1-Spaces-in-Template-Expressions模板表达式中的空格" class="headerlink" title="3.1 Spaces in Template Expressions模板表达式中的空格"></a>3.1 Spaces in Template Expressions模板表达式中的空格</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C3.1.png"></p><h3 id="3-2-nullptr"><a href="#3-2-nullptr" class="headerlink" title="3.2 nullptr"></a>3.2 nullptr</h3><p>（1）用nullptr代替0和NULL；空指针；</p><p>（2）nullptr的类型是std::nullptr_t,定义在头文件中；</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C3.2.png"></p><h3 id="3-3-自动类型判断auto"><a href="#3-3-自动类型判断auto" class="headerlink" title="3.3 自动类型判断auto"></a>3.3 自动类型判断auto</h3><p>​(1) 之前auto就是局部变量的意思，但是现在auto表示自动类型判断；</p><p>​(2) 编译器本身就具备自己判断类型的能力；</p><p>​(3) auto关键字</p><p>​(4) 首先判断版本支持C++2.0；标准库本身也在使用auto；</p><p>​(5) 这里是reverse_iterator是迭代器适配器，利用到了迭代器萃取机进行提问回答difference_type的类型作为函数返回类型；</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C3.3.png"></p><h2 id="第四节-Uniform-Initialization一致性的初始化"><a href="#第四节-Uniform-Initialization一致性的初始化" class="headerlink" title="第四节 Uniform Initialization一致性的初始化"></a>第四节 Uniform Initialization一致性的初始化</h2><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C4.png"></p><p>​(1) 之前的初始化可能用到{},(),&#x3D;赋值；</p><p>​(2) 任意的初始化都可以统一用{}进行初始化，设置初值；</p><p>​(3) 因为编译器遇到{}时会自动生成一个initializer_list,其中T就是int，int,string,double这些，背后 其实是一个array&lt;T,n&gt;,n是元素个数，然后一个一个传给调用的函数（就是int values的构造函数），如果本身接受的就是initial_list,就不用一个一个赋值，直接整个传过去</p><h3 id="4-1-Initializer-list"><a href="#4-1-Initializer-list" class="headerlink" title="4.1 Initializer_list"></a>4.1 Initializer_list</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C4.1.png"></p><p>​(1) 不允许窄化转换；例如double转int是不被允许的;</p><h3 id="4-2-initializer-list的应用"><a href="#4-2-initializer-list的应用" class="headerlink" title="4.2 initializer_list的应用"></a>4.2 initializer_list的应用</h3><h4 id="4-2-1-例子1"><a href="#4-2-1-例子1" class="headerlink" title="4.2.1 例子1"></a>4.2.1 例子1</h4><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C4.2(1).png"></p><p>(1) 此处也是对应任意数量的参数，对应生成一个initializer_list，但是注意，这里的类型只能一致指定的int,因为其背后实现是一个array</p><p>数组；和tuple不同，tuple更加强大，任意数量任意类型；</p><p>(2) 这也是应用initializer_list&lt;&gt;的一个方法；</p><h4 id="4-2-2-例子2"><a href="#4-2-2-例子2" class="headerlink" title="4.2.2 例子2"></a>4.2.2 例子2</h4><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C4.2(2).png"></p><p>(1) 当是complex就调用版本1构造函数；</p><p>(2) 如果没有版本2，q,s还可以使用，因为会被拆解成两个参数，就可以调用版本1，r则不合法操作；</p><p>(3) 右侧是initailizer_list的源代码实现；其data是一个arary的迭代器（指向array的头部），size_type元素个数；编译器可以调用</p><p>initializer_list类private中的一个构造函数，（外部都不可以调用），在看到{}之后就会调用此处，（在调用这个隐私构造函数前，编译器</p><p>会提前创建一个array并把其头迭代器传入此函数参数中）</p><h4 id="4-2-3-array容器新增"><a href="#4-2-3-array容器新增" class="headerlink" title="4.2.3 array容器新增"></a>4.2.3 array容器新增</h4><p>(1) 就可以与STL对接，数组就变成一个容器了，因为算法只跟迭代器对接；</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C4.2(3).png"></p><h4 id="4-2-4-initializer-list-lt-gt-没有内含array"><a href="#4-2-4-initializer-list-lt-gt-没有内含array" class="headerlink" title="4.2.4 initializer_list&lt;&gt;没有内含array"></a>4.2.4 initializer_list&lt;&gt;没有内含array</h4><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C4.2(4).png"></p><p>(1)并没有内含着一个array容器，构造函数只是传入一个array迭代器；因此在拷贝的时候，还是相同的元素，传递的只是指针而已（浅拷</p><p>贝）；原来的一包和新的一包指向同一个array；</p><h4 id="4-2-5-initializer-list-lt-gt-在库中应用广泛，说明可以接收数量不定的参数"><a href="#4-2-5-initializer-list-lt-gt-在库中应用广泛，说明可以接收数量不定的参数" class="headerlink" title="4.2.5 initializer_list&lt;&gt;在库中应用广泛，说明可以接收数量不定的参数"></a>4.2.5 initializer_list&lt;&gt;在库中应用广泛，说明可以接收数量不定的参数</h4><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C4.2(5).png"></p><p>(1) 可看到insert传入了{0,1,2,3,4};</p><p>(2) max和min同时比较多个参数，返回其中最大&#x2F;最小的一个参数；</p><h2 id="第五节-explicit关键字—一个以上参数的构造函数"><a href="#第五节-explicit关键字—一个以上参数的构造函数" class="headerlink" title="第五节 explicit关键字—一个以上参数的构造函数"></a>第五节 explicit关键字—一个以上参数的构造函数</h2><h3 id="5-1-C-2-0之前的（只用于一个实参的防止隐式转换）"><a href="#5-1-C-2-0之前的（只用于一个实参的防止隐式转换）" class="headerlink" title="5.1 C++2.0之前的（只用于一个实参的防止隐式转换）"></a>5.1 C++2.0之前的（只用于一个实参的防止隐式转换）</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C5.1.png"></p><p>(1)关键字explicit用于构造函数，用于防止单参数构造函数的隐式转换；只有在明确调用单参数构造函数时，才使用；左侧就会发生隐式转换；</p><h3 id="5-2-C-2-0现在explicit也同样针对于多参数的构造函数的隐式转换"><a href="#5-2-C-2-0现在explicit也同样针对于多参数的构造函数的隐式转换" class="headerlink" title="5.2 C++2.0现在explicit也同样针对于多参数的构造函数的隐式转换"></a>5.2 C++2.0现在explicit也同样针对于多参数的构造函数的隐式转换</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C5.2.png"></p><h2 id="第六节-新特性"><a href="#第六节-新特性" class="headerlink" title="第六节 新特性"></a>第六节 新特性</h2><h3 id="6-1-for循环的一种特殊写法"><a href="#6-1-for循环的一种特殊写法" class="headerlink" title="6.1 for循环的一种特殊写法"></a>6.1 for循环的一种特殊写法</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C6.1.png"></p><p>(1) 之前for()有三段，现在只有两部分，左侧是声明，右侧放容器；</p><p>(2) 第一段是值赋值，如果是复数就是16字节的100万次搬动，下面是auto&amp;引用，因此就是4字节的100万次搬动；而且如果for循环要改变元素的值，一定要用引用，因为上面的只是拷贝到一个新地方，并不影响原来的元素；</p><p>(3) 关联式容器不允许用迭代器改变其元素；</p><h3 id="6-2-for循环的实现—遍历容器一个一个赋值"><a href="#6-2-for循环的实现—遍历容器一个一个赋值" class="headerlink" title="6.2 for循环的实现—遍历容器一个一个赋值"></a>6.2 for循环的实现—遍历容器一个一个赋值</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C6.2(1).png"></p><p>(1) 其实是遍历右侧容器，并将其一个一个赋值到decl中；</p><p>(2) 两种调用，一个是容器的begin()，一个是全局函数begin(容器);</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C6.2(2).png"></p><p>(3) 左侧C就不允许单参数的隐式转换，因此这种for就会报错；</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将博客推送至github</title>
      <link href="/2022/07/29/%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%8E%A8%E9%80%81%E8%87%B3github/"/>
      <url>/2022/07/29/%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%8E%A8%E9%80%81%E8%87%B3github/</url>
      
        <content type="html"><![CDATA[<h2 id="1-本地安装Hexo博客框架并推送到GitHub"><a href="#1-本地安装Hexo博客框架并推送到GitHub" class="headerlink" title="1 本地安装Hexo博客框架并推送到GitHub"></a>1 本地安装Hexo博客框架并推送到GitHub</h2><h3 id="1-1-将博客部署到-github-个人主页上"><a href="#1-1-将博客部署到-github-个人主页上" class="headerlink" title="1.1 将博客部署到 github 个人主页上"></a>1.1 将博客部署到 github 个人主页上</h3><p><strong>第一步：首先登录github，然后新建仓库</strong></p><p>注意：命名格式为：用户名.github.io</p><p><strong>第二步：进入F:\myblog安装一个git的部署部件</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p><strong>出现错误：</strong>cnpm安装过程中提示optional install error: Package require os(darwin) not compatible with your platform(win32)</p><p>运行cnpm install后，出现</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(1).png" alt="本地png图片PictureTest.png"></p><p><strong>解决方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm rebuild node-sass</span><br><span class="line">#不放心可以重新安装下</span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p><strong>第三步：在github上创建仓库</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C 你的邮箱地址</span><br></pre></td></tr></table></figure><p><strong>第四步：在GitHub 或者 Gitee 上添加 SSH key</strong></p><p>在F:myblog目录下安装 hexo-deployer-git 插件 （git bash here 处安装）</p><p><strong>在github点击头像-&gt;setting</strong></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(2).png" alt="本地png图片PictureTest.png"></p><p><strong>点击SSH and GPG keys</strong></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(3).png" alt="本地png图片PictureTest.png"></p><p><strong>点击New SSH key</strong></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(4).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(5).png" alt="本地png图片PictureTest.png"></p><p><strong>第五步：测试本机本github密钥对是否建立有效连接：git命令ssh -T github.com，如下返回表示连接成功。</strong></p><p><strong>出现错误：</strong></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(6).png" alt="本地png图片PictureTest.png"></p><p><strong>解决方法：</strong>本机的这个git仓库并没有和这个SSH key 关联上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-add &quot;你的 id-rsa 文件地址&quot;</span><br></pre></td></tr></table></figure><p>执行ssh-add “你的 id-rsa 文件地址”出现<strong>Could not open a connection to your authentication agent</strong></p><p><strong>解决方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行如下命令　ssh-agent bash</span><br><span class="line">然后再执行 ssh-add ~/.ssh/id_ras 即可。</span><br></pre></td></tr></table></figure><p><strong>第六步： 修改配置文件_config.yml如下：</strong></p><p><strong>说明：</strong>仓库的ssh链接如下</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(7).png" alt="本地png图片PictureTest.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: git@github.com:keaixiaowei/keaixiaowei.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p><strong>SSH链接</strong></p><p><strong>切记：分支branch切记修改为 main，之前github的默认主分支为master，现已经改为main</strong> ！！！</p><p><strong>第七步：接着hexo clean|hexo g|hexo d就可以远端部署到github上面去啦</strong></p><p><strong>第八步：使用仓库名+.github.io来访问博客主页面。keaixiaowei.github.io</strong></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(8).png" alt="本地png图片PictureTest.png"></p>]]></content>
      
      
      <categories>
          
          <category> hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/2022/07/28/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/07/28/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/28/hello-world/"/>
      <url>/2022/07/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

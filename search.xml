<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据库连接池</title>
      <link href="/2022/07/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2022/07/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据库连接池"><a href="#1-数据库连接池" class="headerlink" title="1 数据库连接池"></a>1 数据库连接池</h2><h3 id="1-1-关键技术点"><a href="#1-1-关键技术点" class="headerlink" title="1.1 关键技术点"></a>1.1 关键技术点</h3><p>​MySQL数据库编程、单例模式、queue队列容器、C++11多线程编程、线程互斥、线程同步通信和unique_lock、基于CAS的原子整形、智能指针shared_ptr、</p><p>lambda表达式、生产者-消费者线程模型</p><h3 id="1-2-项目背景"><a href="#1-2-项目背景" class="headerlink" title="1.2 项目背景"></a>1.2 项目背景</h3><p>​<strong>C&#x2F;S模型，就是mysql client（多线程）和 mysql server（RDBMS）</strong></p><p>​首先，mysql client发起一个连接，TCP的三次握手，网络连接成功，mysql server对新的连接进行身份权限的验证，验证完，返回连接成功给mysql client，</p><p>mysql client 发送CURD增删改查等SQL语句，mysql server进行具体实现，把相应结果返回给mysql client，mysql client接收到执行结果，要关闭这条连接了，</p><p>close掉，不能占用连接资源哦，mysql server对分配的这些资源的回收，回收完以后，TCP四次挥手。如果说，用户量比较大的话，并发量非常大，服务器访问数</p><p>据库的次数相当大，这些增删改查操作肯定相当耗时间。</p><p>​为了提高MySQL数据库（基于C&#x2F;S设计）的访问瓶颈，除了在服务器端增加缓存服务器缓存常用的数据之外（例如redis，减少磁盘I&#x2F;O次数），还可以增加连接</p><p>池，来提高MySQL Server的访问效率，在高并发情况下，大量的TCP三次握手、MySQL Server连接认证、MySQL Server关闭连接回收资源和TCP四次挥手所耗费</p><p>的性能时间也是很明显的，增加连接池就是为了减少这一部分的性能损耗。在市场上比较流行的连接池包括阿里的druid，c3p0以及apache dbcp连接池，它们对</p><p>于短时间内大量的数据库增删改查操作性能的提升是很明显的，但是它们有一个共同点就是，全部由Java实现的。那么本项目就是为了在C&#x2F;C++项目中，提供</p><p>MySQL Server的访问效率，实现基于C++代码的数据库连接池模块。</p><h3 id="1-3-连接池功能点介绍"><a href="#1-3-连接池功能点介绍" class="headerlink" title="1.3 连接池功能点介绍"></a>1.3 连接池功能点介绍</h3><p>​连接池一般包含了数据库连接所用的ip地址、port端口号、用户名和密码以及其它的性能参数，例如初始连接量，最大连接量，最大空闲时间、连接超时时间</p><p>等，该项目是基于C++语言实现的连接池，主要也是实现以上几个所有连接池都支持的通用基础功能。</p><p>​<strong>初始连接量（initSize）：</strong>表示连接池事先会和MySQL Server创建initSize个数的connection连接，当应用发起MySQL访问时，不用再创建和MySQL Server新</p><p>的连接，直接从连接池中获取一个可用的连接就可以，使用完成后，并不去释放connection，而是把当前connection再归还到连接池当中。</p><p>​<strong>最大连接量（maxSize）：</strong>当并发访问MySQL Server的请求增多时，初始连接量已经不够使用了，此时会根据新的请求数量去创建更多的连接给应用去使用，</p><p>但是新创建的连接数量上限是maxSize，不能无限制的创建连接，因为每一个连接都会占用一个socket资源，一般连接池和服务器程序是部署在一台主机上的，如</p><p>果连接池占用过多的socket资源，那么服务器就不能接收太多的客户端请求了。当这些连接使用完成后，再次归还到连接池当中来维护。</p><p>​<strong>最大空闲时间（maxIdleTime）：</strong>当访问MySQL的并发请求多了以后，连接池里面的连接数量会动态增加，上限是maxSize个，当这些连接用完再次归还到连</p><p>接池当中。如果在指定的maxIdleTime里面，这些新增加的连接都没有被再次使用过，那么新增加的这些连接资源就要被回收掉，只需要保持初始连接量initSize</p><p>个连接就可以了。</p><p>​<strong>连接超时时间（connectionTimeout）：</strong>当MySQL的并发请求量过大，连接池中的连接数量已经到达maxSize了，而此时没有空闲的连接可供使用，那么此时</p><p>应用从连接池获取连接无法成功，它通过阻塞的方式获取连接的时间如果超过connectionTimeout时间，那么获取连接失败，无法访问数据库。</p><h3 id="1-4-功能实现设计"><a href="#1-4-功能实现设计" class="headerlink" title="1.4 功能实现设计"></a>1.4 功能实现设计</h3><p>​ConnectionPool.cpp和ConnectionPool.h：<strong>连接池代码实现</strong></p><p>​Connection.cpp和Connection.h：<strong>数据库操作代码、增删改查代码实现</strong></p><p>​<strong>连接池主要包含了以下功能点：</strong></p><p>​1.连接池只需要一个实例，所以ConnectionPool以懒汉使单例模式进行设计</p><p>​2.从ConnectionPool中可以获取和MySQL的连接Connection</p><p>​3.空闲连接Connection全部维护在一个线程安全的Connection队列中，使用线程互斥锁保证队列的线程安全</p><p>​4.如果Connection队列为空，还需要再获取连接，此时需要动态创建连接，上限数量是maxSize</p><p>​5.队列中空闲连接时间超过maxIdleTime的就要被释放掉，只保留初始的initSize个连接就可以了，这个功能点肯定需要放在独立的线程中去做</p><p>​6.如果Connection队列为空，而此时连接的数量已达上限maxSize，那么等待connectionTimeout时间如果还获取不到空闲的连接，那么获取连接失败，此处从</p><p>​Connection队列获取空闲连接，可以使用带超时时间的mutex互斥锁来实现连接超时时间</p><p>​7.用户获取的连接用shared_ptr智能指针来管理，用lambda表达式定制连接释放的功能（不真正释放连接，而是把连接归还到连接池中）</p><p>​8.连接的生产和连接的消费采用生产者-消费者线程模型来设计，使用了线程间的同步通信机制条件变量和互斥锁</p><p>​我们在mysql client增加一个连接池，用C++的队列来存储connection，mysql client发起一个数据库的访问请求，先在队列头取一个connection，通过这个</p><p>​connection跟mysql server通信，直接发SQL语句就可以了。</p><p>​<img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-04(1).png" alt="本地png图片PictureTest.png"></p><p>​<strong>用完了之后，把这个connection再入队</strong></p><p>​<img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-04(2).png" alt="本地png图片PictureTest.png"></p><p>​由于Server APP是多线程的设计，多个线程可能同时请求数据库，也就是说，多个线程获取队列的内容获取connection，一定要保证队列的线程安全特性</p><p>（mutex互斥锁，lock_guard,unique_lock）</p><p><strong>创建连接</strong></p><p>​假设队列为空了，服务器有一个线程，既想访问数据库，又想连接，发现连接池队列为空，暂时获取不到连接，此时有connection timeout（100ms），在这</p><p>个100ms的过程中，不断地去监测队列里面有没有connection，有connection直接拿出来去使用。如果100ms过去了，还没有可用的connection或者新建的</p><p>connection，反正就是连接池队列为空，就获取失败。</p><p><strong>服务器 getconnection()；</strong></p><p>​从连接池队列获取连接，相当于消费者线程，而在连接池队列里面，肯定也是启动1个线程，相当于生产者线程，专门给连接队列里面生产连接的，生产连接的</p><p>上限是maxsize，达到maxsize就不生成连接了。服务器有一个线程，既想访问数据库，又想连接，发现连接池队列为空，暂时获取不到连接，此时有connection </p><p>timeout（100ms），在这个100ms的过程中，不断地去监测队列里面有没有connection，有connection直接拿出来去使用。如果100ms过去了，还没有可用的</p><p>connection或者新建的connection，反正就是连接池队列为空，就获取失败。我们最终，队列里面的connection用完了以后，会缓冲很多的connection，过多的</p><p>connection不必要占用服务器端的socket资源，如果额外生成的connection超过maxIdleTime了，额外的连接就要释放掉，最终只保留initsize个connection就可</p><p>以了。我们还需要额外的线程：定时线程，清理连接队列多余的空闲连接，超过maxIdleTime还没被使用的connection，要释放掉，回收，节省服务器的socket资</p><p>源，最终只保留initsize个connection就可以了。</p><p>​<img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-04(3).png" alt="本地png图片PictureTest.png"></p><h3 id="1-5-开发平台选型"><a href="#1-5-开发平台选型" class="headerlink" title="1.5 开发平台选型"></a><strong>1.5 开发平台选型</strong></h3><p>​有关MySQL数据库编程、多线程编程、线程互斥和同步通信操作、智能指针、设计模式、容器等等这些技术在C++语言层面都可以直接实现，因此该项目选择直</p><p>接在windows平台上进行开发，当然放在Linux平台下用g++也可以直接编译运行。</p><h3 id="1-6-开发流程1"><a href="#1-6-开发流程1" class="headerlink" title="1.6 开发流程1"></a>1.6 开发流程1</h3><p>这里的MySQL数据库编程直接采用oracle公司提供的MySQL C&#x2F;C++客户端开发包，在VS上需要进行相应的头文件和库文件的配置，如下：</p><p>1.右键项目 - C&#x2F;C++ - 常规 - 附加包含目录，填写mysql.h头文件的路径</p><p>2.右键项目 - 链接器 - 常规 - 附加库目录，填写libmysql.lib的路径</p><p>3.右键项目 - 链接器 - 输入 - 附加依赖项，填写libmysql.lib库的名字</p><p>4.把libmysql.dll动态链接库（Linux下后缀名是.so库）放在工程目录下</p><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-06(1).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-06(2).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-06(3).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-06(4).png" alt="本地png图片PictureTest.png"></p><p>**出现的错误:**错误 MSB8020 无法找到 v143 的生成工具(平台工具集 &#x3D;“v143”)。</p><p>从这里可以看到，之前这个项目平台工具集是v143，但是我只安装了visual Studio 2019(v142),选择对应的工具集，我这里只安装了visual Studio 2019(v142)，所</p><p>以我选择visual Studio 2019(v142)，大家安装了哪个就选哪个，选好后记得点保存。</p><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-06(5).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-06(6).png" alt="本地png图片PictureTest.png"></p><p>**出现的错误:**找不到libssl-1_1-x64.dll</p><p>**解决办法:**在项目属性页的“配置属性”-“调试”-“环境” 中编辑，把环境设置为数据库的bin文件夹即可，注意末尾分号要用半角的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH=E:\mysql\mysql-8.0.29-winx64\bin;</span><br></pre></td></tr></table></figure><p>**出现的错误:**使用MySQL语句插入数据时，出现1366错误。</p><p>**原因:**不支持中文字符</p><p><strong>Connection.h</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据库操作代码、增删该查代码实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.h&quot;</span></span></span><br><span class="line"><span class="comment">// 数据库操作类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Connection</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 初始化数据库连接</span></span><br><span class="line"><span class="built_in">Connection</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放数据库连接资源</span></span><br><span class="line">~<span class="built_in">Connection</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">connect</span><span class="params">(string ip,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">unsigned</span> <span class="type">short</span> port,</span></span></span><br><span class="line"><span class="params"><span class="function">string user,</span></span></span><br><span class="line"><span class="params"><span class="function">string password,</span></span></span><br><span class="line"><span class="params"><span class="function">string dbname)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新操作 insert、delete、update</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">update</span><span class="params">(string sql)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询操作 select</span></span><br><span class="line"><span class="function">MYSQL_RES* <span class="title">query</span><span class="params">(string sql)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">MYSQL* _conn; <span class="comment">// 表示和MySQL Server的一条连接</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Connection.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connection.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Connection::<span class="built_in">Connection</span>()</span><br><span class="line">&#123;</span><br><span class="line">_conn = <span class="built_in">mysql_init</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放数据库连接资源</span></span><br><span class="line">Connection::~<span class="built_in">Connection</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_conn != <span class="literal">nullptr</span>)</span><br><span class="line"><span class="built_in">mysql_close</span>(_conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Connection::connect</span><span class="params">(string ip, <span class="type">unsigned</span> <span class="type">short</span> port, string user, string password,</span></span></span><br><span class="line"><span class="params"><span class="function">string dbname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYSQL* p = <span class="built_in">mysql_real_connect</span>(_conn, ip.<span class="built_in">c_str</span>(), user.<span class="built_in">c_str</span>(),</span><br><span class="line">password.<span class="built_in">c_str</span>(), dbname.<span class="built_in">c_str</span>(), port, <span class="literal">nullptr</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> p != <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新操作 insert、delete、update</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Connection::update</span><span class="params">(string sql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(_conn, sql.<span class="built_in">c_str</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;更新失败:&quot;</span> + sql);</span><br><span class="line">cout &lt;&lt; <span class="built_in">mysql_errno</span>(_conn) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询操作 select</span></span><br><span class="line"><span class="function">MYSQL_RES* <span class="title">Connection::query</span><span class="params">(string sql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(_conn, sql.<span class="built_in">c_str</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;查询失败:&quot;</span> + sql);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">mysql_use_result</span>(_conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>public.h</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG(str) \</span></span><br><span class="line"><span class="meta">cout &lt;&lt; __FILE__ &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; __LINE__ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; \</span></span><br><span class="line"><span class="meta">__TIMESTAMP__ &lt;&lt; <span class="string">&quot; : &quot;</span> &lt;&lt; str &lt;&lt; endl;</span></span><br></pre></td></tr></table></figure><p><strong>pch.h</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 入门提示: </span></span><br><span class="line"><span class="comment">//   1. 使用解决方案资源管理器窗口添加/管理文件</span></span><br><span class="line"><span class="comment">//   2. 使用团队资源管理器窗口连接到源代码管理</span></span><br><span class="line"><span class="comment">//   3. 使用输出窗口查看生成输出和其他消息</span></span><br><span class="line"><span class="comment">//   4. 使用错误列表窗口查看错误</span></span><br><span class="line"><span class="comment">//   5. 转到“项目”&gt;“添加新项”以创建新的代码文件，或转到“项目”&gt;“添加现有项”以将现有代码文件添加到项目</span></span><br><span class="line"><span class="comment">//   6. 将来，若要再次打开此项目，请转到“文件”&gt;“打开”&gt;“项目”并选择 .sln 文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PCH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCH_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 添加要在此处预编译的标头</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//PCH_H</span></span></span><br></pre></td></tr></table></figure><p><strong>pch.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pch.cpp: 与预编译标头对应的源文件；编译成功所必需的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般情况下，忽略此文件，但如果你使用的是预编译标头，请保留它。</span></span><br></pre></td></tr></table></figure><p><strong>main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connectionpool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Connection conn;</span><br><span class="line"></span><br><span class="line">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span><br><span class="line"></span><br><span class="line">conn.<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;myb1&quot;</span>);</span><br><span class="line"></span><br><span class="line">conn.<span class="built_in">update</span>(sql);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ConnectionPool connection;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">connection.loadConfigFile();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>程序结果</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-06(7).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-06(8).png" alt="本地png图片PictureTest.png"></p><h3 id="1-7-开发流程2"><a href="#1-7-开发流程2" class="headerlink" title="1.7 开发流程2"></a>1.7 开发流程2</h3><p><strong>1.添加数据库连接池的配置文件 my.ini</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#数据库连接池的配置文件</span><br><span class="line">ip=127.0.0.1</span><br><span class="line">port=3306</span><br><span class="line">username=root</span><br><span class="line">password=123456</span><br><span class="line">dbname=myb1</span><br><span class="line">initSize=10</span><br><span class="line">maxSize=1024</span><br><span class="line">#最大空闲时间默认单位是秒</span><br><span class="line">maxIdleTime=60</span><br><span class="line">#连接超时时间单位是毫秒</span><br><span class="line">connectionTimeOut=100</span><br></pre></td></tr></table></figure><p><strong>2.书写ConnectionPool.h ConnectionPool.cpp</strong></p><p><strong>ConnectionPool.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connectionpool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ConnectionPool *<span class="title">ConnectionPool::getConnectionPool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> ConnectionPool pool;</span><br><span class="line"><span class="keyword">return</span> &amp;pool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ConnectionPool::<span class="built_in">ConnectionPool</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">loadConfigFile</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; _initSize; i++)</span><br><span class="line">&#123;</span><br><span class="line">Connection* p = <span class="keyword">new</span> Connection;</span><br><span class="line">p-&gt;<span class="built_in">connect</span>(_ip,_port, _username, _passwd, _dbname);</span><br><span class="line">_connectionCnt++;</span><br><span class="line">_connectionQue.<span class="built_in">push</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ConnectionPool::loadConfigFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;my.ini&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;mysql.ini file is not exist!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(fp))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="built_in">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fgets</span>(buf, <span class="built_in">sizeof</span>(buf), fp);</span><br><span class="line"></span><br><span class="line">string str = buf;</span><br><span class="line"><span class="type">int</span> idx = str.<span class="built_in">find</span>( <span class="string">&#x27;=&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> endidx = str.<span class="built_in">find</span>(<span class="string">&#x27;\n&#x27;</span>, idx);</span><br><span class="line">string data = str.<span class="built_in">substr</span>(<span class="number">0</span>, idx);</span><br><span class="line">string value = str.<span class="built_in">substr</span>(idx + <span class="number">1</span>, endidx - idx - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (data == <span class="string">&quot;ip&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_ip = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;port&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_port = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;username&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_username = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;password&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_passwd = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;dbname&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_dbname = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;initSize&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_initSize = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;maxSize&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_maxSize = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;maxIdleTime&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_maxIdleTime = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;connectionTimeOut&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_connectionTimeout = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; _ip &lt;&lt; endl; </span><br><span class="line">cout &lt;&lt; _port&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; _username &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; _passwd &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; _dbname &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; _initSize &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; _maxSize &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; _maxIdleTime &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; _connectionTimeout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>ConnectionPool.h</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &quot;Connection.h&quot;</span><br><span class="line">#include &lt;mutex&gt;</span><br><span class="line">#include &quot;public.h&quot;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;atomic&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class ConnectionPool</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">//获取连接池对象实例</span><br><span class="line">static ConnectionPool* getConnectionPool();</span><br><span class="line"></span><br><span class="line">//单例#1 构造函数私有化</span><br><span class="line">ConnectionPool();</span><br><span class="line"></span><br><span class="line">//从配置文件中加载配置项</span><br><span class="line">bool loadConfigFile();</span><br><span class="line"></span><br><span class="line">string _ip; //mysql的ip地址</span><br><span class="line">unsigned short _port;//mysql的ip端口</span><br><span class="line">string _username; //mysql登录用户名</span><br><span class="line">string _passwd; //mysql登录密码</span><br><span class="line">string _dbname; //连接的数据库名称</span><br><span class="line">int _initSize; //连接池的初始连接量</span><br><span class="line">int _maxSize;  //连接池的最大连接量</span><br><span class="line">int _maxIdleTime; //连接池最大空闲时间</span><br><span class="line">int _connectionTimeout; //连接池获取连接的超时时间</span><br><span class="line"></span><br><span class="line">queue&lt;Connection*&gt; _connectionQue;  //存储mysql连接的队列，多线程从队列取放connection </span><br><span class="line">atomic_int _connectionCnt;//记录连接所创建的connection连接的总数量 </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>测试代码</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connectionpool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ConnectionPool connection;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-07(1).png" alt="本地png图片PictureTest.png"></p><h3 id="1-8-开发流程3"><a href="#1-8-开发流程3" class="headerlink" title="1.8 开发流程3"></a>1.8 开发流程3</h3><p>1.采用智能指针管理从连接池获取的空闲连接，用完之后自动归还到连接池当中，完成这个功能需要将智能指针的析构函数重新写一下。</p><p>2.启动一个生产者线程，不管是C++里面的thread还是Linux里面的pthread需要的线程函数都是一个C函数，是不能够使用成员方法的，因为它是C的函数类型，</p><p>不可能把成员方法的函数指针给一个C的函数指针，接收不了。所以就需要绑定，把线程所依赖的参数全部绑定。</p><p>3.需要定义一把互斥锁，来维护连接队列的线程安全问题，还需要定义一个条件变量，是为了生产者线程和消费者线程互相通信的</p><p>4.生产者线程：进入生产者线程函数中，生产者就对连接队列加锁，消费者就得不到锁。</p><p>(1) 生产者发现队列是空的，要生产队列，生产完之后就通知消费者线程。消费者线程从等待状态进入阻塞状态，生产者的代码块结束后，释放互斥锁，消费者得</p><p>到互斥锁，从阻塞状态进入运行状态，消费者就消费。</p><p>(2)当发现队列不为空，释放互斥锁，进入等待状态，消费者线程消费完了，就通知生产者生产连接，生产者线程从等待状态进入阻塞状态，消费者的代码块结束</p><p>后，生产者线程就抢到互斥锁，从阻塞状态进入运行状态，发现队列是空的，就进入第一个过程，重复如此。</p><p>5.消费者线程:进入消费者线程，消费者就对连接队列加锁，生产者就得不到锁。消费者发现队列是空的，释放互斥锁，就进入等待状态。在_connectionTimeout</p><p>时间内，有两种情况，一是未超时，二是超时。</p><p><strong>未超时</strong></p><p>(1) 生产者获得互斥锁，进入生产者线程函数中，生产者就对连接队列加锁，消费者就得不到锁。生产者发现队列是空的，要生产队列，没有达到生产的上限，生</p><p>产完之后就通知消费者线程。消费者线程从等待状态进入阻塞状态，生产者的代码块结束后，释放互斥锁，消费者线程重新得到互斥锁，退出wait_for，返回值为</p><p>notimeout，从阻塞状态进入运行状态，发现队列不为空，消费者线程就消费，消费完连接以后，通知生产者线程检查一下，如果队列为空了，赶紧生产连接。</p><p>(2)  生产者线程获得互斥锁，进入生产者线程函数中，生产者就对连接队列加锁，消费者线程就得不到锁。生产者发现队列是空的，要生产队列，但是已经达到生</p><p>产的上限，通知消费者线程消费。消费者线程从等待状态进入阻塞状态，生产者的代码块结束后，释放互斥锁，消费者重新得到互斥锁，退出wait_for，返回值</p><p>notimeout，从阻塞状态进入运行状态，发现队列为空，就打印出”获取空闲连接超时了…获取连接失败!”，代码块结束时，就释放互斥锁。**(未加自己的代码)**</p><p><strong>超时</strong></p><p>(1) 生产者线程获得互斥锁，进入生产者线程函数中，生产者就对连接队列加锁，消费者线程就得不到锁。生产者发现队列是空的，要生产队列，但是已经达到生</p><p>产的上限，就跳过本次循环，如果队列一直是空的，并且超过_connectionTimeout时间，那么wait_for就自动解除消费者线程的等待状态，返回值notimeout，从</p><p>阻塞状态进入运行状态，发现队列为空，就打印出”获取空闲连接超时了…获取连接失败!”，代码块结束时，就释放互斥锁。**(加自己的代码)**</p><p>(2) 已经消费准备归还队列的线程得到互斥锁，对连接队列加互斥锁，一个消费者线程和生产者线程都得不到互斥锁，当管理归还队列的智能指针析构完之后，就</p><p>释放互斥锁，生产者线程获得互斥锁，进入生产者线程函数中，生产者线程就对连接队列加锁，消费者线程就得不到锁。当发现队列不为空，生产者线程释放互斥</p><p>锁，进入等待状态，生产者线程的代码块结束后，释放互斥锁，一个消费者线程重新得到互斥锁，退出wait_for，返回值notimeout，从阻塞状态进入运行状态，</p><p>发现队列不为空，就开始消费，消费完连接以后，通知生产者线程检查一下，如果队列为空了，赶紧生产连接。</p><p><strong>ConnectionPool.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connectionpool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程安全的懒汉单例函数接口</span></span><br><span class="line"><span class="function">ConnectionPool *<span class="title">ConnectionPool::getConnectionPool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> ConnectionPool pool;</span><br><span class="line"><span class="keyword">return</span> &amp;pool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从配置文件中加载配置项</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ConnectionPool::loadConfigFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;my.ini&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;mysql.ini file is not exist!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(fp))<span class="comment">//文件没有到末尾 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="built_in">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fgets</span>(buf, <span class="built_in">sizeof</span>(buf), fp);</span><br><span class="line"></span><br><span class="line">string str = buf;</span><br><span class="line"><span class="type">int</span> idx = str.<span class="built_in">find</span>(<span class="string">&#x27;=&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">-1</span>)<span class="comment">//无效的配置项</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> endidx = str.<span class="built_in">find</span>(<span class="string">&#x27;\n&#x27;</span>, idx);</span><br><span class="line">string data = str.<span class="built_in">substr</span>(<span class="number">0</span>, idx);</span><br><span class="line">string value = str.<span class="built_in">substr</span>(idx + <span class="number">1</span>, endidx - idx - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (data == <span class="string">&quot;ip&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_ip = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;port&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_port = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;username&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_username = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;password&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_passwd = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;dbname&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_dbname = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;initSize&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_initSize = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;maxSize&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_maxSize = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;maxIdleTime&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_maxIdleTime = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;connectionTimeOut&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_connectionTimeout = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//连接池的构造</span></span><br><span class="line">ConnectionPool::<span class="built_in">ConnectionPool</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//加载配置项了</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">loadConfigFile</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建初始数量的连接</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; _initSize; i++)</span><br><span class="line">&#123;</span><br><span class="line">Connection* p = <span class="keyword">new</span> Connection;</span><br><span class="line">p-&gt;<span class="built_in">connect</span>(_ip,_port, _username, _passwd, _dbname);</span><br><span class="line">_connectionCnt++;</span><br><span class="line">_connectionQue.<span class="built_in">push</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动一个新的线程，作为连接的生产者 linux thread =&gt; pthread_create</span></span><br><span class="line"><span class="function">thread <span class="title">produce</span><span class="params">(bind(&amp;ConnectionPool::produceConnectiontask, <span class="keyword">this</span>))</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行在独立的线程中，专门负责生产新连接</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ConnectionPool::produceConnectiontask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(_queueMutex)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (!_connectionQue.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cv.<span class="built_in">wait</span>(lock);  <span class="comment">//队列不空，此处生产线程进入等待状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数量没有到达上限，继续创建新的连接</span></span><br><span class="line"><span class="keyword">if</span> (_connectionCnt &lt; _maxSize)</span><br><span class="line">&#123;</span><br><span class="line">Connection* p = <span class="keyword">new</span> Connection;</span><br><span class="line">p-&gt;<span class="built_in">connect</span>(_ip, _port, _username, _passwd, _dbname);</span><br><span class="line">_connectionCnt++;</span><br><span class="line">_connectionQue.<span class="built_in">push</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通知消费者线程，可以消费连接了</span></span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给外部提供接口，从连接池中获取一个可用的空闲连接</span></span><br><span class="line"><span class="function">shared_ptr&lt;Connection&gt; <span class="title">ConnectionPool::getConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(_queueMutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (_connectionQue.<span class="built_in">empty</span>())<span class="comment">//连接队列是空的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//原子地释放 lock ，阻塞当前线程，并将它添加到等待在* this 上的线程列表。</span></span><br><span class="line"><span class="comment">//线程将在执行 notify_all() 或 notify_one() 时，或度过相对时限 rel_time 时被解除阻塞。它亦可被虚假地解除阻塞。</span></span><br><span class="line"><span class="comment">//解阻塞时，无关缘由，重获得 lock 并退出 wait_for()。</span></span><br><span class="line"><span class="keyword">if</span> (cv_status::timeout == cv.<span class="built_in">wait_for</span>(lock, chrono::<span class="built_in">milliseconds</span>(_connectionTimeout)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_connectionQue.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;获取空闲连接超时了...获取连接失败!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">shared_ptr智能指针析构时，会把connection资源直接delete掉，相当于</span></span><br><span class="line"><span class="comment">调用connection的析构函数，connection就被close掉了。</span></span><br><span class="line"><span class="comment">这里需要自定义shared_ptr的释放资源的方式，把connection直接归还到queue当中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">shared_ptr&lt;Connection&gt; <span class="title">sp</span><span class="params">(_connectionQue.front(),</span></span></span><br><span class="line"><span class="params"><span class="function">[&amp;](Connection* fp)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//这里是在服务器应用线程中调用的，所以一定要考虑队列的线程安全操作</span></span></span></span><br><span class="line"><span class="params"><span class="function">unique_lock&lt;mutex&gt; lock(_queueMutex);</span></span></span><br><span class="line"><span class="params"><span class="function">_connectionQue.push(fp);</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">_connectionQue.<span class="built_in">pop</span>();</span><br><span class="line">cv.<span class="built_in">notify_all</span>();<span class="comment">//消费完连接以后，通知生产者线程检查一下，如果队列为空了，赶紧生产连接</span></span><br><span class="line"><span class="keyword">return</span> sp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ConnectionPool.h</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &quot;Connection.h&quot;</span><br><span class="line">#include &lt;mutex&gt;</span><br><span class="line">#include &quot;public.h&quot;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;atomic&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">#include &lt;condition_variable&gt;</span><br><span class="line">#include &lt;functional&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class ConnectionPool</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">//获取连接池对象实例</span><br><span class="line">static ConnectionPool* getConnectionPool();</span><br><span class="line"></span><br><span class="line">//给外部提供接口，从连接池中获取一个可用的空闲连接</span><br><span class="line">shared_ptr&lt;Connection&gt; getConnection();//智能指针自动管理连接的释放 </span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">//单例#1 构造函数私有化</span><br><span class="line">ConnectionPool();</span><br><span class="line"></span><br><span class="line">//从配置文件中加载配置项</span><br><span class="line">bool loadConfigFile();</span><br><span class="line"></span><br><span class="line">//运行在独立的线程中，专门负责生产新连接</span><br><span class="line">void produceConnectiontask();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string _ip; //mysql的ip地址</span><br><span class="line">unsigned short _port;//mysql的ip端口</span><br><span class="line">string _username; //mysql登录用户名</span><br><span class="line">string _passwd; //mysql登录密码</span><br><span class="line">string _dbname; //连接的数据库名称</span><br><span class="line">int _initSize; //连接池的初始连接量</span><br><span class="line">int _maxSize;  //连接池的最大连接量</span><br><span class="line">int _maxIdleTime; //连接池最大空闲时间</span><br><span class="line">int _connectionTimeout; //连接池获取连接的超时时间</span><br><span class="line"></span><br><span class="line">queue&lt;Connection*&gt; _connectionQue;  //存储mysql连接的队列，多线程从队列取放connection </span><br><span class="line">mutex _queueMutex;  //维护连接队列的线程安全互斥锁</span><br><span class="line">atomic_int _connectionCnt;//记录连接所创建的connection连接的总数量 </span><br><span class="line">condition_variable cv; //设置条件变量，用于连接生产线程和连接消费线程的通信</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-9-开发流程4"><a href="#1-9-开发流程4" class="headerlink" title="1.9 开发流程4"></a>1.9 开发流程4</h3><p>1.入队列的时候需要更新一下时间，需要在Connection类中，定义一个函数，来刷新一下连接的起始的空闲时间</p><p>2.我们最终，队列里面的connection用完了以后，会缓冲很多的connection，过多的connection不必要占用服务器端的socket资源，如果额外生成的connection</p><p>超过maxIdleTime了，额外的连接就要释放掉，最终只保留initsize个connection就可以了。我们还需要额外的线程：定时线程，清理连接队列多余的空闲连接，</p><p>超过maxIdleTime还没被使用的connection，要释放掉，回收，节省服务器的socket资源，最终只保留initsize个connection就可以了。所以，需要在Connection</p><p>类中，定义一个函数来计算队列里每一个连接存活的时间</p><p><strong>Connection.h</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据库操作代码、增删该查代码实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.h&quot;</span></span></span><br><span class="line"><span class="comment">// 数据库操作类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Connection</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 初始化数据库连接</span></span><br><span class="line"><span class="built_in">Connection</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放数据库连接资源</span></span><br><span class="line">~<span class="built_in">Connection</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">connect</span><span class="params">(string ip,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">unsigned</span> <span class="type">short</span> port,</span></span></span><br><span class="line"><span class="params"><span class="function">string user,</span></span></span><br><span class="line"><span class="params"><span class="function">string password,</span></span></span><br><span class="line"><span class="params"><span class="function">string dbname)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新操作 insert、delete、update</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">update</span><span class="params">(string sql)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询操作 select</span></span><br><span class="line"><span class="function">MYSQL_RES* <span class="title">query</span><span class="params">(string sql)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//刷新一下连接的起始的空闲时间点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">refreshAliveTime</span><span class="params">()</span> </span>&#123; _alivetime = <span class="built_in">clock</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回存活的时间</span></span><br><span class="line"><span class="function"><span class="type">clock_t</span> <span class="title">getAliveeTime</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">clock</span>() - _alivetime; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">MYSQL* _conn; <span class="comment">// 表示和MySQL Server的一条连接</span></span><br><span class="line"><span class="type">clock_t</span> _alivetime;<span class="comment">//记录进入空闲状态后的起始存活时间</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Connectionpool.h</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConnectionPool</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//获取连接池对象实例</span></span><br><span class="line"><span class="function"><span class="type">static</span> ConnectionPool* <span class="title">getConnectionPool</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给外部提供接口，从连接池中获取一个可用的空闲连接</span></span><br><span class="line"><span class="function">shared_ptr&lt;Connection&gt; <span class="title">getConnection</span><span class="params">()</span></span>;<span class="comment">//智能指针自动管理连接的释放 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//单例#1 构造函数私有化</span></span><br><span class="line"><span class="built_in">ConnectionPool</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//从配置文件中加载配置项</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">loadConfigFile</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行在独立的线程中，专门负责生产新连接</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">produceConnectiontask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扫描超过maxIdleTime时间的空闲连接，进行对于的连接回收</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">scannerConnectionTask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">string _ip; <span class="comment">//mysql的ip地址</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> _port;<span class="comment">//mysql的ip端口</span></span><br><span class="line">string _username; <span class="comment">//mysql登录用户名</span></span><br><span class="line">string _passwd; <span class="comment">//mysql登录密码</span></span><br><span class="line">string _dbname; <span class="comment">//连接的数据库名称</span></span><br><span class="line"><span class="type">int</span> _initSize; <span class="comment">//连接池的初始连接量</span></span><br><span class="line"><span class="type">int</span> _maxSize;  <span class="comment">//连接池的最大连接量</span></span><br><span class="line"><span class="type">int</span> _maxIdleTime; <span class="comment">//连接池最大空闲时间</span></span><br><span class="line"><span class="type">int</span> _connectionTimeout; <span class="comment">//连接池获取连接的超时时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">queue&lt;Connection*&gt; _connectionQue;  <span class="comment">//存储mysql连接的队列，多线程从队列取放connection </span></span><br><span class="line">mutex _queueMutex;  <span class="comment">//维护连接队列的线程安全互斥锁</span></span><br><span class="line">atomic_int _connectionCnt;<span class="comment">//记录连接所创建的connection连接的总数量 </span></span><br><span class="line">condition_variable cv; <span class="comment">//设置条件变量，用于连接生产线程和连接消费线程的通信</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Connectionpool.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connectionpool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程安全的懒汉单例函数接口</span></span><br><span class="line"><span class="function">ConnectionPool *<span class="title">ConnectionPool::getConnectionPool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> ConnectionPool pool;</span><br><span class="line"><span class="keyword">return</span> &amp;pool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从配置文件中加载配置项</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ConnectionPool::loadConfigFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;my.ini&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;mysql.ini file is not exist!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(fp))<span class="comment">//文件没有到末尾 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="built_in">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fgets</span>(buf, <span class="built_in">sizeof</span>(buf), fp);</span><br><span class="line"></span><br><span class="line">string str = buf;</span><br><span class="line"><span class="type">int</span> idx = str.<span class="built_in">find</span>(<span class="string">&#x27;=&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">-1</span>)<span class="comment">//无效的配置项</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> endidx = str.<span class="built_in">find</span>(<span class="string">&#x27;\n&#x27;</span>, idx);</span><br><span class="line">string data = str.<span class="built_in">substr</span>(<span class="number">0</span>, idx);</span><br><span class="line">string value = str.<span class="built_in">substr</span>(idx + <span class="number">1</span>, endidx - idx - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (data == <span class="string">&quot;ip&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_ip = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;port&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_port = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;username&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_username = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;password&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_passwd = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;dbname&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_dbname = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;initSize&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_initSize = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;maxSize&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_maxSize = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;maxIdleTime&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_maxIdleTime = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">&quot;connectionTimeOut&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">_connectionTimeout = <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//连接池的构造</span></span><br><span class="line">ConnectionPool::<span class="built_in">ConnectionPool</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//加载配置项了</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">loadConfigFile</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建初始数量的连接</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; _initSize; i++)</span><br><span class="line">&#123;</span><br><span class="line">Connection* p = <span class="keyword">new</span> Connection;</span><br><span class="line">p-&gt;<span class="built_in">connect</span>(_ip,_port, _username, _passwd, _dbname);</span><br><span class="line">_connectionCnt++;</span><br><span class="line">p-&gt;<span class="built_in">refreshAliveTime</span>();<span class="comment">//刷新一下开始空闲的起始时间</span></span><br><span class="line">_connectionQue.<span class="built_in">push</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动一个新的线程，作为连接的生产者 linux thread =&gt; pthread_create</span></span><br><span class="line"><span class="function">thread <span class="title">produce</span><span class="params">(bind(&amp;ConnectionPool::produceConnectiontask, <span class="keyword">this</span>))</span></span>;</span><br><span class="line">produce.<span class="built_in">detach</span>();<span class="comment">//守护线程，主线程结束了，这个线程就结束了 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//启动一个新的定时线程，扫描超过maxIdleTime时间的空闲连接，进行对于的连接回收</span></span><br><span class="line"><span class="function">thread <span class="title">scanner</span><span class="params">(std::bind(&amp;ConnectionPool::scannerConnectionTask, <span class="keyword">this</span>))</span></span>;</span><br><span class="line">scanner.<span class="built_in">detach</span>();<span class="comment">//守护线程，主线程结束了，这个线程就结束了 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行在独立的线程中，专门负责生产新连接</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ConnectionPool::produceConnectiontask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(_queueMutex)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (!_connectionQue.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cv.<span class="built_in">wait</span>(lock);  <span class="comment">//队列不空，此处生产线程进入等待状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数量没有到达上限，继续创建新的连接</span></span><br><span class="line"><span class="keyword">if</span> (_connectionCnt &lt; _maxSize)</span><br><span class="line">&#123;</span><br><span class="line">Connection* p = <span class="keyword">new</span> Connection;</span><br><span class="line">p-&gt;<span class="built_in">connect</span>(_ip, _port, _username, _passwd, _dbname);</span><br><span class="line">p-&gt;<span class="built_in">refreshAliveTime</span>();<span class="comment">//刷新一下开始空闲的起始时间</span></span><br><span class="line">_connectionCnt++;</span><br><span class="line">_connectionQue.<span class="built_in">push</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//连接数量到达上限</span></span><br><span class="line"><span class="comment">if (_connectionCnt &gt;= _maxSize)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">continue;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//通知消费者线程，可以消费连接了</span></span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给外部提供接口，从连接池中获取一个可用的空闲连接</span></span><br><span class="line"><span class="function">shared_ptr&lt;Connection&gt; <span class="title">ConnectionPool::getConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(_queueMutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (_connectionQue.<span class="built_in">empty</span>())<span class="comment">//连接队列是空的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//原子地释放 lock ，阻塞当前线程，并将它添加到等待在* this 上的线程列表。</span></span><br><span class="line"><span class="comment">//线程将在执行 notify_all() 或 notify_one() 时，或度过相对时限 rel_time 时被解除阻塞。它亦可被虚假地解除阻塞。</span></span><br><span class="line"><span class="comment">//解阻塞时，无关缘由，重获得 lock 并退出 wait_for()。</span></span><br><span class="line"><span class="keyword">if</span> (cv_status::timeout == cv.<span class="built_in">wait_for</span>(lock, chrono::<span class="built_in">milliseconds</span>(_connectionTimeout)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_connectionQue.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;获取空闲连接超时了...获取连接失败!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">shared_ptr智能指针析构时，会把connection资源直接delete掉，相当于</span></span><br><span class="line"><span class="comment">调用connection的析构函数，connection就被close掉了。</span></span><br><span class="line"><span class="comment">这里需要自定义shared_ptr的释放资源的方式，把connection直接归还到queue当中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">shared_ptr&lt;Connection&gt; <span class="title">sp</span><span class="params">(_connectionQue.front(),</span></span></span><br><span class="line"><span class="params"><span class="function">[&amp;](Connection* fp)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//这里是在服务器应用线程中调用的，所以一定要考虑队列的线程安全操作</span></span></span></span><br><span class="line"><span class="params"><span class="function">unique_lock&lt;mutex&gt; lock(_queueMutex);</span></span></span><br><span class="line"><span class="params"><span class="function">fp-&gt;refreshAliveTime();<span class="comment">//刷新一下开始空闲的起始时间</span></span></span></span><br><span class="line"><span class="params"><span class="function">_connectionQue.push(fp);</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">_connectionQue.<span class="built_in">pop</span>();</span><br><span class="line">cv.<span class="built_in">notify_all</span>();<span class="comment">//消费完连接以后，通知生产者线程检查一下，如果队列为空了，赶紧生产连接</span></span><br><span class="line"><span class="keyword">return</span> sp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扫描超过maxIdleTime时间的空闲连接，进行对于的连接回收</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ConnectionPool::scannerConnectionTask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//通过sleep模拟定时效果</span></span><br><span class="line">this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(_maxIdleTime));</span><br><span class="line"></span><br><span class="line"><span class="comment">//扫描整个队列，释放多余的连接</span></span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(_queueMutex)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (_connectionCnt &gt; _initSize)</span><br><span class="line">&#123;</span><br><span class="line">Connection* p = _connectionQue.<span class="built_in">front</span>();<span class="comment">//队头的时间没超过，那后面的时间就都没超过 </span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;<span class="built_in">getAliveeTime</span>() &gt;= (_maxIdleTime * <span class="number">1000</span>))</span><br><span class="line">&#123;</span><br><span class="line">_connectionQue.<span class="built_in">pop</span>();</span><br><span class="line">_connectionCnt--;</span><br><span class="line"><span class="keyword">delete</span> p;<span class="comment">//调用~Connection()释放连接</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//队头的连接没有超过_maxIdleTime，其它连接肯定没有</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-10-压力测试"><a href="#1-10-压力测试" class="headerlink" title="1.10 压力测试"></a>1.10 压力测试</h3><p>单线程模拟1000人访问数据库</p><p><strong>不使用连接池</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connectionpool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">clock_t</span> begin = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">ConnectionPool* cp = ConnectionPool::<span class="built_in">getConnectionPool</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Connection conn;</span><br><span class="line"></span><br><span class="line">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span><br><span class="line"></span><br><span class="line">conn.<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;myb1&quot;</span>);</span><br><span class="line"></span><br><span class="line">conn.<span class="built_in">update</span>(sql);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sp-&gt;update(sql);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">clock_t</span> end = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (end - begin) &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-10(1).png" alt="本地png图片PictureTest.png"></p><p><strong>使用连接池</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connectionpool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">clock_t</span> begin = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">ConnectionPool* cp = ConnectionPool::<span class="built_in">getConnectionPool</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Connection conn;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">conn.update(sql);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">shared_ptr&lt;Connection&gt; sp = cp-&gt;<span class="built_in">getConnection</span>();</span><br><span class="line"></span><br><span class="line">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span><br><span class="line"></span><br><span class="line">sp-&gt;<span class="built_in">update</span>(sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">clock_t</span> end = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (end - begin) &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-10(2).png" alt="本地png图片PictureTest.png"></p><p>模拟5000人访问数据库</p><p><strong>不使用连接池</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connectionpool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">clock_t</span> begin = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">ConnectionPool* cp = ConnectionPool::<span class="built_in">getConnectionPool</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Connection conn;</span><br><span class="line"></span><br><span class="line">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span><br><span class="line"></span><br><span class="line">conn.<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;myb1&quot;</span>);</span><br><span class="line"></span><br><span class="line">conn.<span class="built_in">update</span>(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sp-&gt;update(sql);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">clock_t</span> end = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (end - begin) &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-10(3).png" alt="本地png图片PictureTest.png"></p><p><strong>使用连接池</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connectionpool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">clock_t</span> begin = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">ConnectionPool* cp = ConnectionPool::<span class="built_in">getConnectionPool</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Connection conn;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">conn.update(sql);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">shared_ptr&lt;Connection&gt; sp = cp-&gt;<span class="built_in">getConnection</span>();</span><br><span class="line"></span><br><span class="line">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span><br><span class="line"></span><br><span class="line">sp-&gt;<span class="built_in">update</span>(sql);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">clock_t</span> end = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (end - begin) &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-10(4).png" alt="本地png图片PictureTest.png"></p><p>4线程模拟1000人访问数据库</p><p><strong>不使用连接池</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;pch.h&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include &quot;Connection.h&quot;</span><br><span class="line">#include &quot;Connectionpool.h&quot;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Connection conn;</span><br><span class="line">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span><br><span class="line"></span><br><span class="line">clock_t begin = clock();</span><br><span class="line"></span><br><span class="line">thread t1</span><br><span class="line">([]()</span><br><span class="line">&#123;</span><br><span class="line">//ConnectionPool* cp = ConnectionPool::getConnectionPool();</span><br><span class="line">for (int i = 0; i &lt; 250; i++)</span><br><span class="line">&#123;</span><br><span class="line">Connection conn;</span><br><span class="line"></span><br><span class="line">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span><br><span class="line"></span><br><span class="line">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span><br><span class="line"></span><br><span class="line">conn.update(sql);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span><br><span class="line"></span><br><span class="line">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span><br><span class="line"></span><br><span class="line">sp-&gt;update(sql);</span><br><span class="line">*/</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">thread t2</span><br><span class="line">([]()</span><br><span class="line">&#123;</span><br><span class="line">//ConnectionPool* cp = ConnectionPool::getConnectionPool();</span><br><span class="line">for (int i = 0; i &lt; 250; i++)</span><br><span class="line">&#123;</span><br><span class="line">Connection conn;</span><br><span class="line"></span><br><span class="line">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span><br><span class="line"></span><br><span class="line">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span><br><span class="line"></span><br><span class="line">conn.update(sql);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span><br><span class="line"></span><br><span class="line">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span><br><span class="line"></span><br><span class="line">sp-&gt;update(sql);</span><br><span class="line">*/</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">thread t3</span><br><span class="line">([]()</span><br><span class="line">&#123;</span><br><span class="line">//ConnectionPool* cp = ConnectionPool::getConnectionPool();</span><br><span class="line">for (int i = 0; i &lt; 250; i++)</span><br><span class="line">&#123;</span><br><span class="line">Connection conn;</span><br><span class="line"></span><br><span class="line">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span><br><span class="line"></span><br><span class="line">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span><br><span class="line"></span><br><span class="line">conn.update(sql);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span><br><span class="line"></span><br><span class="line">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span><br><span class="line"></span><br><span class="line">sp-&gt;update(sql);</span><br><span class="line">*/</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">thread t4</span><br><span class="line">([]()</span><br><span class="line">&#123;</span><br><span class="line">//ConnectionPool* cp = ConnectionPool::getConnectionPool();</span><br><span class="line">for (int i = 0; i &lt; 250; i++)</span><br><span class="line">&#123;</span><br><span class="line">Connection conn;</span><br><span class="line"></span><br><span class="line">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span><br><span class="line"></span><br><span class="line">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span><br><span class="line"></span><br><span class="line">conn.update(sql);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span><br><span class="line"></span><br><span class="line">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span><br><span class="line"></span><br><span class="line">sp-&gt;update(sql);</span><br><span class="line">*/</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line">t3.join();</span><br><span class="line">t4.join();</span><br><span class="line"></span><br><span class="line">clock_t end = clock();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (end - begin) &lt;&lt; &quot;ms&quot; &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-10(5).png" alt="本地png图片PictureTest.png"></p><p><strong>使用连接池</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connectionpool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">clock_t</span> begin = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t1</span></span></span><br><span class="line"><span class="function"><span class="params">([]()</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">ConnectionPool* cp = ConnectionPool::getConnectionPool();</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">250</span>; i++)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">Connection conn;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.update(sql);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">*/</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t2</span></span></span><br><span class="line"><span class="function"><span class="params">([]()</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">ConnectionPool* cp = ConnectionPool::getConnectionPool();</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">250</span>; i++)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">Connection conn;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.update(sql);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">*/</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t3</span></span></span><br><span class="line"><span class="function"><span class="params">([]()</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">ConnectionPool* cp = ConnectionPool::getConnectionPool();</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">250</span>; i++)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">Connection conn;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.update(sql);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">*/</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t4</span></span></span><br><span class="line"><span class="function"><span class="params">([]()</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">ConnectionPool* cp = ConnectionPool::getConnectionPool();</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">250</span>; i++)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">Connection conn;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.update(sql);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">*/</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.<span class="built_in">join</span>();</span><br><span class="line">t2.<span class="built_in">join</span>();</span><br><span class="line">t3.<span class="built_in">join</span>();</span><br><span class="line">t4.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">clock_t</span> end = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (end - begin) &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-10(6).png" alt="本地png图片PictureTest.png"></p><p>4线程模拟5000人访问数据库</p><p><strong>不使用连接池</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connectionpool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Connection conn;</span><br><span class="line">conn.<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;myb1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">clock_t</span> begin = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t1</span></span></span><br><span class="line"><span class="function"><span class="params">([]()</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//ConnectionPool* cp = ConnectionPool::getConnectionPool();</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1250</span>; i++)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">Connection conn;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">conn.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;myb1&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">conn.update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">*/</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t2</span></span></span><br><span class="line"><span class="function"><span class="params">([]()</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//ConnectionPool* cp = ConnectionPool::getConnectionPool();</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1250</span>; i++)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">Connection conn;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">conn.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;myb1&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">conn.update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">*/</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t3</span></span></span><br><span class="line"><span class="function"><span class="params">([]()</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//ConnectionPool* cp = ConnectionPool::getConnectionPool();</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1250</span>; i++)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">Connection conn;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">conn.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;myb1&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">conn.update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">*/</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t4</span></span></span><br><span class="line"><span class="function"><span class="params">([]()</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//ConnectionPool* cp = ConnectionPool::getConnectionPool();</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1250</span>; i++)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">Connection conn;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">conn.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;myb1&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">conn.update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">*/</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.<span class="built_in">join</span>();</span><br><span class="line">t2.<span class="built_in">join</span>();</span><br><span class="line">t3.<span class="built_in">join</span>();</span><br><span class="line">t4.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">clock_t</span> end = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (end - begin) &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-10(7).png" alt="本地png图片PictureTest.png"></p><p><strong>使用连接池</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connectionpool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">clock_t</span> begin = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t1</span></span></span><br><span class="line"><span class="function"><span class="params">([]()</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">ConnectionPool* cp = ConnectionPool::getConnectionPool();</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1250</span>; i++)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">Connection conn;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.update(sql);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">*/</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t2</span></span></span><br><span class="line"><span class="function"><span class="params">([]()</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">ConnectionPool* cp = ConnectionPool::getConnectionPool();</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1250</span>; i++)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">Connection conn;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.update(sql);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">*/</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t3</span></span></span><br><span class="line"><span class="function"><span class="params">([]()</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">ConnectionPool* cp = ConnectionPool::getConnectionPool();</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1250</span>; i++)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">Connection conn;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.update(sql);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">*/</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t4</span></span></span><br><span class="line"><span class="function"><span class="params">([]()</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">ConnectionPool* cp = ConnectionPool::getConnectionPool();</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1250</span>; i++)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">Connection conn;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">string sql = &quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;;</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.connect(&quot;127.0.0.1&quot;, 3306, &quot;root&quot;, &quot;123456&quot;, &quot;myb1&quot;);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function"></span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">conn.update(sql);</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">*/</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = cp-&gt;getConnection();</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.<span class="built_in">join</span>();</span><br><span class="line">t2.<span class="built_in">join</span>();</span><br><span class="line">t3.<span class="built_in">join</span>();</span><br><span class="line">t4.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">clock_t</span> end = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (end - begin) &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-10(8).png" alt="本地png图片PictureTest.png"></p><table><thead><tr><th align="center">数据量</th><th align="center">未使用连接池花费时间</th><th align="center">使用连接池花费时间</th></tr></thead><tbody><tr><td align="center">1000</td><td align="center">单线程: 93839ms 四线程: 43532ms</td><td align="center">单线程: 89969ms 四线程: 39066ms</td></tr><tr><td align="center">5000</td><td align="center">单线程: 413767ms 四线程: 204768ms</td><td align="center">单线程: 377876ms 四线程: 187940ms</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于muduo网络库的集群服务器项目</title>
      <link href="/2022/07/29/%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/07/29/%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="1-配置远程开发环境"><a href="#1-配置远程开发环境" class="headerlink" title="1 配置远程开发环境"></a>1 配置远程开发环境</h2><h3 id="1-1-安装Json开发库"><a href="#1-1-安装Json开发库" class="headerlink" title="1.1 安装Json开发库"></a>1.1 安装Json开发库</h3><p>打开WinSCP，将json.hpp传送至服务器创建的目录，我的目录是&#x2F;home&#x2F;iot&#x2F;caiwei&#x2F;test</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-01(1).png" alt="本地png图片PictureTest.png"></p><h3 id="1-2-安装boost-muduo网络库开发环境"><a href="#1-2-安装boost-muduo网络库开发环境" class="headerlink" title="1.2 安装boost + muduo网络库开发环境"></a>1.2 安装boost + muduo网络库开发环境</h3><p>使用百度云盘下载muduo库源码，下载地址为</p><p><a href="https://pan.baidu.com/s/1Rqrnz8NY6UOiFemYQv-63Q">https://pan.baidu.com/s/1Rqrnz8NY6UOiFemYQv-63Q</a> 提取码：8nio</p><p>打开WinSCP，将<strong>muduo-master.zip</strong>传送至服务器创建的目录，我的目录是&#x2F;home&#x2F;iot&#x2F;caiwei&#x2F;test</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-01(1).png" alt="本地png图片PictureTest.png"></p><p><strong>muduo库是基于boost开发的，所以需要先在Linux平台上安装boost库</strong></p><p>去boost官网下载boost库源码，下载地址为</p><p><a href="https://www.boost.org/users/history/version_1_79_0.html">Version 1.79.0 (boost.org)</a></p><p>打开WinSCP，将<strong>boost_1_79_0.tar.gz</strong>传送至服务器创建的目录，我的目录是&#x2F;home&#x2F;iot&#x2F;caiwei&#x2F;test</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(1).png" alt="本地png图片PictureTest.png"></p><p>将<strong>boost_1_79_0.tar.gz</strong>进行解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf boost_1_79_0.tar.gz</span><br></pre></td></tr></table></figure><p>tar解压完成后，进入源码文件目录，查看内容：</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(2).png" alt="本地png图片PictureTest.png"></p><p>运行bootstrap.sh工程编译构建程序，需要等待一会儿，查看目录：</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(3).png" alt="本地png图片PictureTest.png"></p><p>源码根目录下生成了b2程序，运行b2程序如下（boost源码比较大，这里编译需要花费一些时间）：</p><p>【注意】：如果Linux系统没有安装g++编译器，需要先安装g++，建议g++4.6版本以上，能比较好的支持C++新标准，可以通过命令 g++ –version 查看g++版本号。</p><p>编译完成后，会有如下打印:</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(4).png" alt="本地png图片PictureTest.png"></p><p>最后，再把上面的boost库头文件和lib库文件安装在默认的Linux系统头文件和库文件的搜索路径下，运行下面命令（<strong>因为要给&#x2F;usr目录下拷贝文件，需要先进入</strong></p><p><strong>root用户</strong>）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./b2 install</span><br></pre></td></tr></table></figure><p>安装完成后，最后会有如下信息打印出来：</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(5).png" alt="本地png图片PictureTest.png"></p><p>验证安装boost是否成功，通过下面的代码验证一下：</p><p>vim test.c</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;boost/bind.hpp&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Hello</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void say(string name) </span><br><span class="line">&#123; cout &lt;&lt; name &lt;&lt; &quot; say: hello world!&quot; &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Hello h;</span><br><span class="line">auto func = boost::bind(&amp;Hello::say, &amp;h, &quot;zhang san&quot;);</span><br><span class="line">func();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过g++编译上面的代码，运行打印如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g++ -o test test.c -std=c++11</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(6).png" alt="本地png图片PictureTest.png"></p><p>解压压缩包muduo-master.zip</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip muduo-master.zip</span><br></pre></td></tr></table></figure><p>解压完成后，进入muduo库的解压目录里面</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(7).png" alt="本地png图片PictureTest.png"></p><p><strong>注意</strong>，muduo库源码编译会编译很多unit_test测试用例代码，编译耗时长，我们也用不到，vim编辑上面源码目录里面的CMakeLists.txt文件，如下修改：</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(8).png" alt="本地png图片PictureTest.png"></p><p><strong>保存并退出</strong>，继续下面的步骤。</p><p><strong>看到有一个build.sh源码编译构建程序，运行该程序（注意：muduo是用cmake来构建的，需要先安装cmake，ubuntu下直接sudo apt-get install cmake就</strong></p><p><strong>可以，redhat或者centos可以从yum仓库直接安装</strong>）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install cmake</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(9).png" alt="本地png图片PictureTest.png"></p><p>然后执行build.sh程序</p><h4 id="1-2-1-错误"><a href="#1-2-1-错误" class="headerlink" title="1.2.1 错误"></a>1.2.1 错误</h4><p>出现的错误：今天在cmake的时候，报错&#x2F;usr&#x2F;bin&#x2F;cmake: &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libcurl.so.4: no version information available (required by &#x2F;usr&#x2F;bin&#x2F;cmake)</p><p>解决方法:</p><p>第一步：输入命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">locate libcurl.so.4</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(10).png" alt="本地png图片PictureTest.png"></p><p>第二步：输入：ll &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libcurl.so.4 查看 libcurl.so.4的指向为 libcurl.so.4.4.0，删除错误指向，重新创建新的链接指向为：&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-</p><p>gnu&#x2F;libcurl.so.4.5.0</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(11).png" alt="本地png图片PictureTest.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /usr/local/lib/libcurl.so.4</span><br><span class="line">sudo ln -s /usr/lib/x86_64-linux-gnu/libcurl.so.4.5.0 /usr/local/lib/libcurl.so.4</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(12).png" alt="本地png图片PictureTest.png"></p><p>解决问题完成后，在make一下</p><p><strong>编译完成后，在输入.&#x2F;build.sh install命令进行muduo库安装</strong></p><p>这个.&#x2F;build.sh install实际上把muduo的头文件和lib库文件放到了muduo-master同级目录下的build目录下的release-install-cpp11文件夹下面了：</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(13).png" alt="本地png图片PictureTest.png"></p><p>所以上面的install命令并没有把它们拷贝到系统路径下，导致我们每次编译程序都需要指定muduo库的头文件和库文件路径，很麻烦，所以我们选择直接把</p><p>inlcude（头文件）和lib（库文件）目录下的文件拷贝到系统目录下：</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(14).png" alt="本地png图片PictureTest.png"></p><p>拷贝完成以后使用muduo库编写C++网络程序，不用在指定头文件和lib库文件路径信息了，因为g++会自动从&#x2F;usr&#x2F;include和&#x2F;usr&#x2F;local&#x2F;lib路径下寻找所需要的文</p><p>件。写测试代码，测试muduo是否能够正常使用，如下：把muduo库的头文件和lib库文件拷贝完成以后，使用muduo库编写一个简单的echo回显服务器，测试</p><p>muduo库是否可以正常使用，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;muduo/net/TcpServer.h&gt;</span><br><span class="line">#include &lt;muduo/base/Logging.h&gt;</span><br><span class="line">#include &lt;boost/bind.hpp&gt;</span><br><span class="line">#include &lt;muduo/net/EventLoop.h&gt;</span><br><span class="line"></span><br><span class="line">// 使用muduo开发回显服务器</span><br><span class="line">class EchoServer</span><br><span class="line">&#123;</span><br><span class="line"> public:</span><br><span class="line">  EchoServer(muduo::net::EventLoop* loop,</span><br><span class="line">             const muduo::net::InetAddress&amp; listenAddr);</span><br><span class="line"></span><br><span class="line">  void start(); </span><br><span class="line"></span><br><span class="line"> private:</span><br><span class="line">  void onConnection(const muduo::net::TcpConnectionPtr&amp; conn);</span><br><span class="line"></span><br><span class="line">  void onMessage(const muduo::net::TcpConnectionPtr&amp; conn,</span><br><span class="line">                 muduo::net::Buffer* buf,</span><br><span class="line">                 muduo::Timestamp time);</span><br><span class="line"></span><br><span class="line">  muduo::net::TcpServer server_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">EchoServer::EchoServer(muduo::net::EventLoop* loop,</span><br><span class="line">                       const muduo::net::InetAddress&amp; listenAddr)</span><br><span class="line">  : server_(loop, listenAddr, &quot;EchoServer&quot;)</span><br><span class="line">&#123;</span><br><span class="line">  server_.setConnectionCallback(</span><br><span class="line">      boost::bind(&amp;EchoServer::onConnection, this, _1));</span><br><span class="line">  server_.setMessageCallback(</span><br><span class="line">      boost::bind(&amp;EchoServer::onMessage, this, _1, _2, _3));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void EchoServer::start()</span><br><span class="line">&#123;</span><br><span class="line">  server_.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void EchoServer::onConnection(const muduo::net::TcpConnectionPtr&amp; conn)</span><br><span class="line">&#123;</span><br><span class="line">  LOG_INFO &lt;&lt; &quot;EchoServer - &quot; &lt;&lt; conn-&gt;peerAddress().toIpPort() &lt;&lt; &quot; -&gt; &quot;</span><br><span class="line">           &lt;&lt; conn-&gt;localAddress().toIpPort() &lt;&lt; &quot; is &quot;</span><br><span class="line">           &lt;&lt; (conn-&gt;connected() ? &quot;UP&quot; : &quot;DOWN&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void EchoServer::onMessage(const muduo::net::TcpConnectionPtr&amp; conn,</span><br><span class="line">                           muduo::net::Buffer* buf,</span><br><span class="line">                           muduo::Timestamp time)</span><br><span class="line">&#123;</span><br><span class="line">  // 接收到所有的消息，然后回显</span><br><span class="line">  muduo::string msg(buf-&gt;retrieveAllAsString());</span><br><span class="line">  LOG_INFO &lt;&lt; conn-&gt;name() &lt;&lt; &quot; echo &quot; &lt;&lt; msg.size() &lt;&lt; &quot; bytes, &quot;</span><br><span class="line">           &lt;&lt; &quot;data received at &quot; &lt;&lt; time.toString();</span><br><span class="line">  conn-&gt;send(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  LOG_INFO &lt;&lt; &quot;pid = &quot; &lt;&lt; getpid();</span><br><span class="line">  muduo::net::EventLoop loop;</span><br><span class="line">  muduo::net::InetAddress listenAddr(8888);</span><br><span class="line">  EchoServer server(&amp;loop, listenAddr);</span><br><span class="line">  server.start();</span><br><span class="line">  loop.loop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用g++进行编译，注意链接muduo和pthread的库文件，编译命令如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g++ main.cpp -lmuduo_net -lmuduo_base -lpthread -std=c++11</span><br></pre></td></tr></table></figure><p>编译链接完成，生成a.out可执行程序，上面的echo服务器监听8888端口，运行上面的a.out回显服务器如下：</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(15).png" alt="本地png图片PictureTest.png"></p><p>等待客户端连接，可以打开一个新的shell命令行用netcat命令模拟客户端连接echo服务器进行功能测试，命令如下：</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(16).png" alt="本地png图片PictureTest.png"></p><p>客户端数据回显正确，看看服务器接日志信息打印如下：</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-02(17).png" alt="本地png图片PictureTest.png"></p><h3 id="1-3-安装nginx"><a href="#1-3-安装nginx" class="headerlink" title="1.3 安装nginx"></a>1.3 安装nginx</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><p>查看nginx是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-03(1).png" alt="本地png图片PictureTest.png"></p><p>启动nginx</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure><p>启动后，在网页重输入ip地址，即可看到nginx的欢迎页面。至此nginx安装成功</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-03(2).png" alt="本地png图片PictureTest.png"></p><p>nginx文件安装完成之后的文件位置：</p><ul><li>&#x2F;usr&#x2F;sbin&#x2F;nginx：主程序</li><li>&#x2F;etc&#x2F;nginx：存放配置文件</li><li>&#x2F;usr&#x2F;share&#x2F;nginx：存放静态文件</li><li>&#x2F;var&#x2F;log&#x2F;nginx：存放日志</li></ul><p>在Ubuntu上卸载nginx</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 删除除了配置文件以外的所有文件。</span><br><span class="line">sudo apt-get remove nginx nginx-common</span><br><span class="line"># 删除所有与nginx有关的东西，包括配置文件。 </span><br><span class="line">sudo apt-get purge nginx nginx-common </span><br><span class="line"># 在上面命令结束后执行，主要是删除与Nginx有关的且不再被使用的依赖包。</span><br><span class="line">sudo apt-get autoremove </span><br><span class="line"># 删除两个主要的包。</span><br><span class="line">sudo apt-get remove nginx-full nginx-common </span><br></pre></td></tr></table></figure><p>验证是否成功卸载nginx</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#重启nginx,重启失败，说明已成功卸载nginx</span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><h3 id="1-4-windows-vscode配置远程linux开发环境"><a href="#1-4-windows-vscode配置远程linux开发环境" class="headerlink" title="1.4 windows+vscode配置远程linux开发环境"></a>1.4 windows+vscode配置远程linux开发环境</h3><p> 要配置远程开发环境，首先要保证linux系统上安装了<a href="https://so.csdn.net/so/search?q=openssh&spm=1001.2101.3001.7020">openssh</a>服务，可以通过netstat -tanp查看网络服务，有没有sshd这样一个进程名，如果PID&#x2F;Program </p><p>name不显示的话，是因为不是root用户</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-04(1).png" alt="本地png图片PictureTest.png"></p><p>从上图可以看出sshd进程监听在22号端口</p><p>在vscode上安装Remote Development插件，其它依赖插件会自动安装</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-04(2).png" alt="本地png图片PictureTest.png"></p><p> 安装完成之后建议重启一下vscode，让更改生效</p><p>快捷键：CTRL + SHITF + P，打开：“命令面板”，输入Reload Window即可</p><p>接下来配置远程Linux主机信息</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-04(3).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-04(4).png" alt="本地png图片PictureTest.png"></p><p>选择默认的配置文件</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-04(5).png" alt="本地png图片PictureTest.png"></p><p>此时可以打开windows的cmd ping一下远程linux主机的ip地址，看是否连通</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/1-04(6).png" alt="本地png图片PictureTest.png"></p><p>最后user就是登陆的用户ly， 填完之后cttl+s保存，左侧会出现如下图标，</p><h2 id="2-Json"><a href="#2-Json" class="headerlink" title="2 Json"></a>2 Json</h2><h3 id="2-1-Json介绍"><a href="#2-1-Json介绍" class="headerlink" title="2.1 Json介绍"></a>2.1 Json介绍</h3><p>Json是一种轻量级的数据交换格式（也叫数据序列化方式）。Json采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 Json 成为</p><p>理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。  </p><p>JSON for Modern C++ 是一个由德国大牛 nlohmann 编写的在 C++ 下使用的 JSON 库。具有以下特点</p><ul><li><p>直观的语法</p></li><li><p>整个代码由一个头文件组成 json.hpp，没有子项目，没有依赖关系，没有复杂的构建系统，使用起来非常方便</p></li><li><p>使用 C++ 11 标准编写</p></li><li><p>使用 json 像使用 STL 容器一样</p></li><li><p>STL 和 json 容器之间可以相互转换</p></li><li><p>严谨的测试：所有类都经过严格的单元测试，覆盖了 100％ 的代码，包括所有特殊的行为。此外，还检查了 Valgrind 是否有内存泄漏。为了保持高质量，该</p></li></ul><p>项目遵循核心基础设施倡议(CII)的最佳实践  </p><h3 id="2-2-Json数据序列化"><a href="#2-2-Json数据序列化" class="headerlink" title="2.2 Json数据序列化"></a>2.2 Json数据序列化</h3><p>json数据序列化示例代码一如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    json js;</span><br><span class="line"></span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    js[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"></span><br><span class="line">    js[<span class="string">&quot;msg&quot;</span>][<span class="string">&quot;zhangsan&quot;</span>] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    js[<span class="string">&quot;msg&quot;</span>][<span class="string">&quot;liu shuo&quot;</span>] = <span class="string">&quot;hello china&quot;</span>;</span><br><span class="line"></span><br><span class="line">    js[<span class="string">&quot;msg&quot;</span>] = &#123;&#123;<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;hello wordl&quot;</span>&#125;,&#123;<span class="string">&quot;liu shuo&quot;</span>,<span class="string">&quot;hello china&quot;</span>&#125;&#125;;</span><br><span class="line">    cout &lt;&lt; js &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">func1</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/2-02(1).png" alt="本地png图片PictureTest.png"></p><p>json数据序列化示例代码二如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;json.hpp&quot;</span><br><span class="line">using json = nlohmann::json;</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void func1()</span><br><span class="line">&#123;</span><br><span class="line">    json js;</span><br><span class="line"></span><br><span class="line">    js[&quot;id&quot;] = &#123;1,2,3,4,5&#125;;</span><br><span class="line"></span><br><span class="line">    js[&quot;name&quot;] = &quot;zhangsan&quot;;</span><br><span class="line"></span><br><span class="line">    js[&quot;msg&quot;][&quot;zhangsan&quot;] = &quot;hello world&quot;;</span><br><span class="line">    js[&quot;msg&quot;][&quot;liu shuo&quot;] = &quot;hello china&quot;;</span><br><span class="line"></span><br><span class="line">    js[&quot;msg&quot;] = &#123;&#123;&quot;zhangsan&quot;,&quot;hello wordl&quot;&#125;,&#123;&quot;liu shuo&quot;,&quot;hello china&quot;&#125;&#125;;</span><br><span class="line">    cout &lt;&lt; js &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void func2()</span><br><span class="line">&#123;</span><br><span class="line">    json js;</span><br><span class="line">    // 直接序列化一个vector容器</span><br><span class="line">    vector&lt;int&gt; vec;</span><br><span class="line">    vec.push_back(1);</span><br><span class="line">    vec.push_back(2);</span><br><span class="line">    vec.push_back(5);</span><br><span class="line">    js[&quot;list&quot;] = vec;</span><br><span class="line">    // 直接序列化一个map容器</span><br><span class="line">    map&lt;int, string&gt; m;</span><br><span class="line">    m.insert(&#123;1, &quot;黄山&quot;&#125;);</span><br><span class="line">    m.insert(&#123;2, &quot;华山&quot;&#125;);</span><br><span class="line">    m.insert(&#123;3, &quot;泰山&quot;&#125;);</span><br><span class="line">    js[&quot;path&quot;] = m;</span><br><span class="line">    cout&lt;&lt;js&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    string sendbuf = js.dump();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; sendbuf &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    func1();</span><br><span class="line">    func2();</span><br><span class="line">    </span><br><span class="line">    return EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/2-02(2).png" alt="本地png图片PictureTest.png"></p><h3 id="2-3-Json数据反序列化"><a href="#2-3-Json数据反序列化" class="headerlink" title="2.3 Json数据反序列化"></a>2.3 Json数据反序列化</h3><p>json数据反序列化示例代码如下:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    json js;</span><br><span class="line"></span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    js[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"></span><br><span class="line">    js[<span class="string">&quot;msg&quot;</span>][<span class="string">&quot;zhangsan&quot;</span>] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    js[<span class="string">&quot;msg&quot;</span>][<span class="string">&quot;liu shuo&quot;</span>] = <span class="string">&quot;hello china&quot;</span>;</span><br><span class="line"></span><br><span class="line">    js[<span class="string">&quot;msg&quot;</span>] = &#123;&#123;<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;hello wordl&quot;</span>&#125;,&#123;<span class="string">&quot;liu shuo&quot;</span>,<span class="string">&quot;hello china&quot;</span>&#125;&#125;;</span><br><span class="line">    </span><br><span class="line">    string sendbuf = js.<span class="built_in">dump</span>();</span><br><span class="line">    <span class="keyword">return</span> sendbuf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    json js;</span><br><span class="line">    <span class="comment">// 直接序列化一个vector容器</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    js[<span class="string">&quot;list&quot;</span>] = vec;</span><br><span class="line">    <span class="comment">// 直接序列化一个map容器</span></span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt; m;</span><br><span class="line">    m.<span class="built_in">insert</span>(&#123;<span class="number">1</span>, <span class="string">&quot;黄山&quot;</span>&#125;);</span><br><span class="line">    m.<span class="built_in">insert</span>(&#123;<span class="number">2</span>, <span class="string">&quot;华山&quot;</span>&#125;);</span><br><span class="line">    m.<span class="built_in">insert</span>(&#123;<span class="number">3</span>, <span class="string">&quot;泰山&quot;</span>&#125;);</span><br><span class="line">    js[<span class="string">&quot;path&quot;</span>] = m;</span><br><span class="line"></span><br><span class="line">    string sendbuf = js.<span class="built_in">dump</span>();</span><br><span class="line">    <span class="keyword">return</span> sendbuf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string jsonstr1 = <span class="built_in">func1</span>();</span><br><span class="line">    cout &lt;&lt; jsonstr1 &lt;&lt; endl;</span><br><span class="line">    string jsonstr2 = <span class="built_in">func2</span>();</span><br><span class="line">    cout &lt;&lt; jsonstr2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    json js1 = json::<span class="built_in">parse</span>(jsonstr1);</span><br><span class="line">    json js2 = json::<span class="built_in">parse</span>(jsonstr2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> arr = js1[<span class="string">&quot;id&quot;</span>];</span><br><span class="line">    string name = js1[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="keyword">auto</span> it = js1[<span class="string">&quot;msg&quot;</span>];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = js2[<span class="string">&quot;list&quot;</span>];</span><br><span class="line">    map&lt;<span class="type">int</span>,string&gt; mymap = js2[<span class="string">&quot;path&quot;</span>];</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; it[<span class="string">&quot;zhangsan&quot;</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; it[<span class="string">&quot;liu shuo&quot;</span>] &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> val:vec)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = mymap.<span class="built_in">begin</span>() ; it != mymap.<span class="built_in">end</span>() ; it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/2-03(1).png" alt="本地png图片PictureTest.png"></p><h2 id="3-muduo网络库编程"><a href="#3-muduo网络库编程" class="headerlink" title="3 muduo网络库编程"></a>3 muduo网络库编程</h2><h3 id="3-1-基于muduo的客户端服务器编程"><a href="#3-1-基于muduo的客户端服务器编程" class="headerlink" title="3.1 基于muduo的客户端服务器编程"></a>3.1 基于muduo的客户端服务器编程</h3><p>代码如下:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">muduo网络库给用户提供了两个主要的类</span></span><br><span class="line"><span class="comment">TcpServer ： 用于编写服务器程序的</span></span><br><span class="line"><span class="comment">TcpClient ： 用于编写客户端程序的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">epoll + 线程池</span></span><br><span class="line"><span class="comment">好处：能够把网络I/O的代码和业务代码区分开</span></span><br><span class="line"><span class="comment">                        用户的连接和断开       用户的可读写事件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*基于muduo网络库开发服务器程序</span></span><br><span class="line"><span class="comment">1.组合TcpServer对象</span></span><br><span class="line"><span class="comment">2.创建EventLoop事件循环对象的指针</span></span><br><span class="line"><span class="comment">3.明确TcpServer构造函数需要什么参数，输出ChatServer的构造函数</span></span><br><span class="line"><span class="comment">4.在当前服务器类的构造函数当中，注册处理连接的回调函数和处理读写时间的回调函数</span></span><br><span class="line"><span class="comment">5.设置合适的服务端线程数量，muduo库会自己分配I/O线程和worker线程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/EventLoop.h&gt;</span><span class="comment">//事件循环 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span> <span class="comment">//绑定器 </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//muduo的名字空间作用域</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> placeholders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatServer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ChatServer</span>(EventLoop *loop,               <span class="comment">// 事件循环</span></span><br><span class="line">               <span class="type">const</span> InetAddress &amp;listenAddr, <span class="comment">// IP+Port</span></span><br><span class="line">               <span class="type">const</span> string &amp;nameArg)         <span class="comment">// 服务器的名字</span></span><br><span class="line">        : _server(loop,listenAddr,nameArg),_loop(loop) <span class="comment">//没有默认构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 给服务器注册用户连接的创建和断开回调</span></span><br><span class="line">        _server.<span class="built_in">setConnectionCallback</span>(std::<span class="built_in">bind</span>(&amp;ChatServer::onConnection,<span class="keyword">this</span>,_1));</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 给服务器注册用户读写事件回调</span></span><br><span class="line">        _server.<span class="built_in">setMessageCallback</span>(std::<span class="built_in">bind</span>(&amp;ChatServer::onMessage,<span class="keyword">this</span>,_1,_2,_3));</span><br><span class="line">    </span><br><span class="line">          <span class="comment">//设置服务器端的线程数量 1个I/O线程（监听新用户的连接事件）， 3个worker线程</span></span><br><span class="line">        <span class="comment">//不设置的话，就1个线程而已，要处理连接又要处理业务 </span></span><br><span class="line">        _server.<span class="built_in">setThreadNum</span>(<span class="number">4</span>);<span class="comment">//设置4个线程，1个I/O线程，3个worker线程 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span><span class="comment">//开启事件循环 </span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _server.<span class="built_in">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//专门处理：用户的连接创建和断开 epoll listenfd accept</span></span><br><span class="line">    <span class="comment">//如果有新用户的连接或者断开，muduo库就会调用这个函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onConnection</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (conn-&gt;<span class="built_in">connected</span>())<span class="comment">//连接 ， peerAddress()对端的地址 localAddress() 本地的地址 </span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; conn-&gt;<span class="built_in">peerAddress</span>().<span class="built_in">toIpPort</span>() &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">localAddress</span>().<span class="built_in">toIpPort</span>() &lt;&lt; <span class="string">&quot; state:online&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//断开 </span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; conn-&gt;<span class="built_in">peerAddress</span>().<span class="built_in">toIpPort</span>() &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">localAddress</span>().<span class="built_in">toIpPort</span>() &lt;&lt; <span class="string">&quot; state:offline&quot;</span> &lt;&lt; endl;</span><br><span class="line">            conn-&gt;<span class="built_in">shutdown</span>();<span class="comment">//相当于这些close(fd)</span></span><br><span class="line">            <span class="comment">//_loop-&gt;quit();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//专门处理：用户的读写事件，muduo库去调用这个函数 </span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onMessage</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, <span class="comment">// 连接，通过这个连接可以读写数据 </span></span></span></span><br><span class="line"><span class="params"><span class="function">                   Buffer *buffer,               <span class="comment">// 缓冲区，提高数据收发的性能</span></span></span></span><br><span class="line"><span class="params"><span class="function">                   Timestamp time)</span>               <span class="comment">// 接收到数据的时间信息</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        string buf = buffer-&gt;<span class="built_in">retrieveAllAsString</span>();<span class="comment">//收到的数据放到这个字符串中 </span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;recv data:&quot;</span> &lt;&lt; buf &lt;&lt; <span class="string">&quot; time:&quot;</span> &lt;&lt; time.<span class="built_in">toFormattedString</span>() &lt;&lt; endl;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(buf);<span class="comment">//返回 ，收到什么发送什么 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TcpServer _server; <span class="comment">// 第一步</span></span><br><span class="line">    EventLoop *_loop;  <span class="comment">//第二步相当于 epoll 事件循环的指针，有事件发生，loop上报 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EventLoop loop;  <span class="comment">//相当于像是创建了epoll</span></span><br><span class="line">    <span class="function">InetAddress <span class="title">addr</span><span class="params">(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6000</span>)</span></span>; <span class="comment">//IP地址，端口号</span></span><br><span class="line">    <span class="function">ChatServer <span class="title">server</span><span class="params">(&amp;loop,addr,<span class="string">&quot;ChatServer&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    server.<span class="built_in">start</span>();  <span class="comment">//listenfd通过 epoll_ctl 添加到 epoll </span></span><br><span class="line">    loop.<span class="built_in">loop</span>();    <span class="comment">//相当于epoll_wait，以阻塞方式等待新用户连接，已连接用户的读写事件等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用命令进行编译，我们依赖muduo库链接写的函数，链接的时候要这样写</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g++ muduo_server.cpp -o server -lmuduo_net -lmuduo_base -lpthread</span><br></pre></td></tr></table></figure><p>我们再开启一个终端输入命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet 127.0.0.1 6000</span><br></pre></td></tr></table></figure><p>连接了</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/3-01(1).png" alt="本地png图片PictureTest.png"></p><p>退出连接</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/3-01(2).png" alt="本地png图片PictureTest.png"></p><h2 id="4-CMake"><a href="#4-CMake" class="headerlink" title="4 CMake"></a>4 CMake</h2><h3 id="4-1-CMake简介"><a href="#4-1-CMake简介" class="headerlink" title="4.1 CMake简介"></a>4.1 CMake简介</h3><p>​使用简单方便，可以跨平台，构建项目编译环境。尤其比直接写<a href="https://so.csdn.net/so/search?q=Makefile&spm=1001.2101.3001.7020">Makefile</a>简单（在构建大型工程编译时，需要写大量的文件依赖关</p><p>系），可以通过简单的CMake生成负责的Makefile文件。</p><h3 id="4-2-CMake安装"><a href="#4-2-CMake安装" class="headerlink" title="4.2 CMake安装"></a>4.2 CMake安装</h3><p>首先使用命令查看，ubuntu系统是否安装CMake</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake --version</span><br></pre></td></tr></table></figure><p>如果没有出现以上结果，就没有安装CMake，直接使用命令安装CMake</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install cmake</span><br></pre></td></tr></table></figure><h3 id="4-3-CMake在Ubuntu的VScode安装插件"><a href="#4-3-CMake在Ubuntu的VScode安装插件" class="headerlink" title="4.3 CMake在Ubuntu的VScode安装插件"></a>4.3 CMake在Ubuntu的<a href="https://so.csdn.net/so/search?q=VScode&spm=1001.2101.3001.7020">VScode</a>安装插件</h3><p>首先下载CMake和CMake tool，如图所示</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/4-03(1).png" alt="本地png图片PictureTest.png"></p><p>在进入CMake Tools的设置，进入settings.json，添加图片中的内容</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/4-03(2).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/4-03(3).png" alt="本地png图片PictureTest.png"></p><h3 id="4-4-CMake构建集成编译环境-1"><a href="#4-4-CMake构建集成编译环境-1" class="headerlink" title="4.4 CMake构建集成编译环境(1)"></a>4.4 CMake构建集成编译环境(1)</h3><p><strong>我们在编译出可执行文件需要执行下面这个命令行</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g++ -o server -g muduo_server.cpp xxx.cpp -I/usr.include -L/usr/lib -lmuduo_net -lmuduo_base -lpthread</span><br><span class="line">可执行文件</span><br><span class="line">*.a</span><br><span class="line">*.so</span><br></pre></td></tr></table></figure><p><strong>涉及到 可执行文件，编译参数（-g）（优化级别-O)(这些是编译选项），源文件，头文件的搜索路径，库文件的搜索路径，要链接的库</strong></p><p><strong>我们首先在test_muduo下创建CMakeLists.txt</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.10)</span><br><span class="line">project(demo)</span><br><span class="line"></span><br><span class="line"># 配置编译选项</span><br><span class="line">set(CMAKE_CXX_FLAGS $&#123;CMAKE_CXX_FLAGS&#125; -g)</span><br><span class="line"></span><br><span class="line"># 配置头文件搜索路径</span><br><span class="line"># include_directories()</span><br><span class="line"># 配置库文件搜索路径</span><br><span class="line"># link_directories()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置需要编译的源文件列表</span><br><span class="line">set(SRC_LIST muduo_server.cpp)</span><br><span class="line"></span><br><span class="line"># 把当前路径下的所有源文件名字放入变量名SRC_LIST里面</span><br><span class="line"># aux_source_directory(. SRC_LIST)</span><br><span class="line"></span><br><span class="line"># 表示生成可执行文件server，由SRC_LIST变量所定义的源文件</span><br><span class="line">add_executable(server $&#123;SRC_LIST&#125;)</span><br><span class="line"># 表示server这个目标程序，需要连接muduo_net muduo_base pthread这三个库文件</span><br><span class="line">target_link_libraries(server muduo_net muduo_base pthread)</span><br></pre></td></tr></table></figure><p>我们在test_muduo下编译CMakeLists.txt</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake .</span><br><span class="line">make</span><br><span class="line">make clean</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/4-04(1).png" alt="本地png图片PictureTest.png"></p><h3 id="4-5-CMake构建集成编译环境-2"><a href="#4-5-CMake构建集成编译环境-2" class="headerlink" title="4.5 CMake构建集成编译环境(2)"></a>4.5 CMake构建集成编译环境(2)</h3><p>我们在项目中应该这么做：<br>在项目下创建一个bin目录：生成的可执行文件<br>lib目录：生成的库文件<br>include：生成的头文件<br>src:源文件<br>build：编译过程中产生的临时的中间文件<br>test：测试文件<br>example：示例<br>thirdparty：依赖的第三方库<br>然后再放一个：CMakeLists.txt<br>然后我们可以再放一个：autobuild.sh一键编译</p><p>首先把上一节生产的编译文件删除，然后创建一个文件夹build</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/4-05(1).png" alt="本地png图片PictureTest.png"></p><p>我们在build下编译CMakeLists.txt</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">make clean</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/4-05(2).png" alt="本地png图片PictureTest.png"></p><p>但是发现所生的可执行也在这个文件夹中，我们需要放在bin文件夹中，我们需要对CMakeLists.txt添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置可执行文件最终存储的路径</span><br><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/bin)</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/4-05(3).png" alt="本地png图片PictureTest.png"></p><h2 id="5-项目数据库以及表的设计"><a href="#5-项目数据库以及表的设计" class="headerlink" title="5 项目数据库以及表的设计"></a>5 项目数据库以及表的设计</h2><h3 id="5-1-MySQL环境安装设置"><a href="#5-1-MySQL环境安装设置" class="headerlink" title="5.1 MySQL环境安装设置"></a>5.1 MySQL环境安装设置</h3><p>ubuntu环境安装mysql-server和mysql开发包，包括mysql头文件和动态库文件，命令如下 :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/5-01(1).png" alt="本地png图片PictureTest.png"></p><p>重新用root和123456登录mysql-server  </p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/5-01(2).png" alt="本地png图片PictureTest.png"></p><p>设置MySQL字符编码utf-8，可以支持中文操作  </p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/5-01(3).png" alt="本地png图片PictureTest.png"></p><h3 id="5-2-MySQL数据库编程"><a href="#5-2-MySQL数据库编程" class="headerlink" title="5.2 MySQL数据库编程"></a>5.2 MySQL数据库编程</h3><p>新建目录<strong>test_mysql</strong>，新建<strong>Connetion.cpp Connetion.h public.h main.cpp</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/5-02(1).png" alt="本地png图片PictureTest.png"></p><p><strong>Connection.h</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据库操作代码、增删该查代码实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.h&quot;</span></span></span><br><span class="line"><span class="comment">// 数据库操作类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Connection</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 初始化数据库连接</span></span><br><span class="line"><span class="built_in">Connection</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放数据库连接资源</span></span><br><span class="line">~<span class="built_in">Connection</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">connect</span><span class="params">(string ip,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">unsigned</span> <span class="type">short</span> port,</span></span></span><br><span class="line"><span class="params"><span class="function">string user,</span></span></span><br><span class="line"><span class="params"><span class="function">string password,</span></span></span><br><span class="line"><span class="params"><span class="function">string dbname)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新操作 insert、delete、update</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">update</span><span class="params">(string sql)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询操作 select</span></span><br><span class="line"><span class="function">MYSQL_RES* <span class="title">query</span><span class="params">(string sql)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">MYSQL* _conn; <span class="comment">// 表示和MySQL Server的一条连接</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意头文件需要修改为#include &lt;mysql&#x2F;mysql.h&gt;</p><p>如果在上面的目录没有找到mysql.h文件，那么你需要安装mysql-devel   在ubuntu下安装mysql-devel命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libmysqld-dev</span><br></pre></td></tr></table></figure><p>需要在c_cpp_properties.json中includePath添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/usr/include&quot; </span><br></pre></td></tr></table></figure><p><strong>Connection.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connection.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Connection::<span class="built_in">Connection</span>()</span><br><span class="line">&#123;</span><br><span class="line">_conn = <span class="built_in">mysql_init</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放数据库连接资源</span></span><br><span class="line">Connection::~<span class="built_in">Connection</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_conn != <span class="literal">nullptr</span>)</span><br><span class="line"><span class="built_in">mysql_close</span>(_conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Connection::connect</span><span class="params">(string ip, <span class="type">unsigned</span> <span class="type">short</span> port, string user, string password,</span></span></span><br><span class="line"><span class="params"><span class="function">string dbname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYSQL* p = <span class="built_in">mysql_real_connect</span>(_conn, ip.<span class="built_in">c_str</span>(), user.<span class="built_in">c_str</span>(),</span><br><span class="line">password.<span class="built_in">c_str</span>(), dbname.<span class="built_in">c_str</span>(), port, <span class="literal">nullptr</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> p != <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新操作 insert、delete、update</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Connection::update</span><span class="params">(string sql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(_conn, sql.<span class="built_in">c_str</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;更新失败:&quot;</span> + sql);</span><br><span class="line">cout &lt;&lt; <span class="built_in">mysql_errno</span>(_conn) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询操作 select</span></span><br><span class="line"><span class="function">MYSQL_RES* <span class="title">Connection::query</span><span class="params">(string sql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(_conn, sql.<span class="built_in">c_str</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;查询失败:&quot;</span> + sql);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">mysql_use_result</span>(_conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Connection.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Connection conn;</span><br><span class="line"></span><br><span class="line">string sql = <span class="string">&quot;insert into employee(sid,name,sex,salary) values(4,&#x27;caiwei&#x27;,&#x27;male&#x27;,11111)&quot;</span>;</span><br><span class="line"></span><br><span class="line">conn.<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;myb1&quot;</span>);</span><br><span class="line"></span><br><span class="line">conn.<span class="built_in">update</span>(sql);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建数据库，创建表格</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/5-02(2).png" alt="本地png图片PictureTest.png"></p><p>然后进行编译，要链接动态库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g++ -o main main.cpp Connection.cpp Connection.h public.h -L/usr/lib/x86_64-linux-gnu/ -lmysqlclient</span><br></pre></td></tr></table></figure><h3 id="5-3-数据库设计"><a href="#5-3-数据库设计" class="headerlink" title="5.3 数据库设计"></a>5.3 数据库设计</h3><p>先新建一个数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database chat</span><br><span class="line">use chat</span><br></pre></td></tr></table></figure><p><strong>设计User表</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE user</span><br><span class="line">(</span><br><span class="line">id INT AUTO_INCREMENT,</span><br><span class="line">name VARCHAR(50) NOT NULL UNIQUE,</span><br><span class="line">`password` VARCHAR(50) NOT NULL,</span><br><span class="line">state ENUM(&#x27;online&#x27;,&#x27;offline&#x27;) DEFAULT&#x27;offline&#x27;,</span><br><span class="line">PRIMARY KEY(id)</span><br><span class="line">)ENGINE=INNODB;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/5-03(1).png" alt="本地png图片PictureTest.png"></p><p><strong>设计Friend表</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE friend</span><br><span class="line">(</span><br><span class="line">`userid` INT NOT NULL,</span><br><span class="line">`friendid` INT NOT NULL,</span><br><span class="line">PRIMARY KEY(`userid`,`friendid`)</span><br><span class="line">)ENGINE=INNODB;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/5-03(2).png" alt="本地png图片PictureTest.png"></p><p><strong>设计AllGroup表</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE allgroup</span><br><span class="line">(</span><br><span class="line">id INT AUTO_INCREMENT,</span><br><span class="line">groupname VARCHAR(50) NOT NULL UNIQUE,</span><br><span class="line">groupdesc VARCHAR(200) DEFAULT&#x27;&#x27;,</span><br><span class="line">PRIMARY KEY(id)</span><br><span class="line">)ENGINE=INNODB;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/5-03(3).png" alt="本地png图片PictureTest.png"></p><p><strong>设计GroupUser表</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE groupuser</span><br><span class="line">(</span><br><span class="line">groupid INT NOT NULL,</span><br><span class="line">userid INT NOT NULL,</span><br><span class="line">grouprole enum(&#x27;creator&#x27;,&#x27;normal&#x27;) DEFAULT&#x27;normal&#x27;,</span><br><span class="line">PRIMARY KEY(groupid,userid)</span><br><span class="line">)ENGINE=INNODB;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/5-03(4).png" alt="本地png图片PictureTest.png"></p><p><strong>设计OfflineMessage表</strong>  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE offlinemessage</span><br><span class="line">(</span><br><span class="line">userid INT NOT NULL,</span><br><span class="line">message VARCHAR(500) NOT NULL</span><br><span class="line">)ENGINE=INNODB;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/5-03(5).png" alt="本地png图片PictureTest.png"></p><h2 id="6-集群聊天项目工程目录创建"><a href="#6-集群聊天项目工程目录创建" class="headerlink" title="6 集群聊天项目工程目录创建"></a>6 集群聊天项目工程目录创建</h2><p>目录如下:</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/6-01(1).png" alt="本地png图片PictureTest.png"></p><p><strong>我们的聊天服务器程序和客户端程序都在一个工程里面，最后在bin生成2个可执行文件，一个是服务器，一个是客户端。</strong></p><p><strong>配置chatserver(根)下的CMakeLists.txt</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.10)</span><br><span class="line">project(chat)</span><br><span class="line"></span><br><span class="line"># 配置编译选项</span><br><span class="line">set(CMAKE_CXX_FLAGS $&#123;CMAKE_CXX_FLAGS&#125; -g)</span><br><span class="line"></span><br><span class="line"># 设置可执行文件最终存储的路径</span><br><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/bin)</span><br><span class="line"></span><br><span class="line"># 配置头文件的搜索路径</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/include)</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/include/server)</span><br><span class="line"></span><br><span class="line">set(CMAKE_EXPORT_COMPILE_COMMANDS ON)</span><br><span class="line"></span><br><span class="line">add_subdirectory(src)</span><br></pre></td></tr></table></figure><p><strong>它就会跑去src目录下找CMakeLists.txt文件。所以，我们在src下创建CMakeLists.txt</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_subdirectory(server)</span><br></pre></td></tr></table></figure><p><strong>因为我们先开发server，所以先不添加客户端client，我们还要在server下创建CMakeLists.txt</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 把当前路径下的所有源文件名字放入变量名SRC_LIST里面</span><br><span class="line">aux_source_directory(. SRC_LIST)</span><br><span class="line"></span><br><span class="line"># 表示生成可执行文件ChatServer，由SRC_LIST变量所定义的源文件</span><br><span class="line">add_executable(ChatServer $&#123;SRC_LIST&#125;)</span><br><span class="line"></span><br><span class="line"># 指定可执行文件链接时需要依赖的库文件</span><br><span class="line">target_link_libraries(ChatServer muduo_net muduo_base  pthread)</span><br></pre></td></tr></table></figure><h2 id="7-网络模块代码ChatServer"><a href="#7-网络模块代码ChatServer" class="headerlink" title="7 网络模块代码ChatServer"></a>7 网络模块代码ChatServer</h2><p><strong>首先我们在include&#x2F;server下创建chatserver.hpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">muduo网络库给用户提供了两个主要的类</span></span><br><span class="line"><span class="comment">TcpServer ： 用于编写服务器程序的</span></span><br><span class="line"><span class="comment">TcpClient ： 用于编写客户端程序的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">epoll + 线程池</span></span><br><span class="line"><span class="comment">好处：能够把网络I/O的代码和业务代码区分开</span></span><br><span class="line"><span class="comment">                        用户的连接和断开       用户的可读写事件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*基于muduo网络库开发服务器程序</span></span><br><span class="line"><span class="comment">1.组合TcpServer对象</span></span><br><span class="line"><span class="comment">2.创建EventLoop事件循环对象的指针</span></span><br><span class="line"><span class="comment">3.明确TcpServer构造函数需要什么参数，输出ChatServer的构造函数</span></span><br><span class="line"><span class="comment">4.在当前服务器类的构造函数当中，注册处理连接的回调函数和处理读写时间的回调函数</span></span><br><span class="line"><span class="comment">5.设置合适的服务端线程数量，muduo库会自己分配I/O线程和worker线程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/EventLoop.h&gt;</span><span class="comment">//事件循环 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span> <span class="comment">//绑定器 </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//muduo的名字空间作用域</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> placeholders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatServer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ChatServer</span>(EventLoop *loop,               <span class="comment">// 事件循环</span></span><br><span class="line">               <span class="type">const</span> InetAddress &amp;listenAddr, <span class="comment">// IP+Port</span></span><br><span class="line">               <span class="type">const</span> string &amp;nameArg);         <span class="comment">// 服务器的名字</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span>;<span class="comment">//开启事件循环 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//专门处理：用户的连接创建和断开 epoll listenfd accept</span></span><br><span class="line">    <span class="comment">//如果有新用户的连接或者断开，muduo库就会调用这个函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onConnection</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//专门处理：用户的读写事件，muduo库去调用这个函数 </span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onMessage</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, <span class="comment">// 连接，通过这个连接可以读写数据 </span></span></span></span><br><span class="line"><span class="params"><span class="function">                   Buffer *buffer,               <span class="comment">// 缓冲区，提高数据收发的性能</span></span></span></span><br><span class="line"><span class="params"><span class="function">                   Timestamp time)</span> </span>;              <span class="comment">// 接收到数据的时间信息</span></span><br><span class="line"></span><br><span class="line">    TcpServer _server; <span class="comment">// 第一步</span></span><br><span class="line">    EventLoop *_loop;  <span class="comment">//第二步相当于 epoll 事件循环的指针，有事件发生，loop上报 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>在src&#x2F;server下创建chatserver.cpp main.cpp</strong></p><p><strong>charserver.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatserver.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line">ChatServer::<span class="built_in">ChatServer</span>(EventLoop *loop,               <span class="comment">// 事件循环</span></span><br><span class="line">               <span class="type">const</span> InetAddress &amp;listenAddr, <span class="comment">// IP+Port</span></span><br><span class="line">               <span class="type">const</span> string &amp;nameArg)</span><br><span class="line">            : _server(loop,listenAddr,nameArg),_loop(loop)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 给服务器注册用户连接的创建和断开回调</span></span><br><span class="line">    _server.<span class="built_in">setConnectionCallback</span>(std::<span class="built_in">bind</span>(&amp;ChatServer::onConnection,<span class="keyword">this</span>,_1));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给服务器注册用户读写事件回调</span></span><br><span class="line">    _server.<span class="built_in">setMessageCallback</span>(std::<span class="built_in">bind</span>(&amp;ChatServer::onMessage,<span class="keyword">this</span>,_1,_2,_3));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置服务器端的线程数量 1个I/O线程（监听新用户的连接事件）， 3个worker线程</span></span><br><span class="line">    <span class="comment">//不设置的话，就1个线程而已，要处理连接又要处理业务 </span></span><br><span class="line">    _server.<span class="built_in">setThreadNum</span>(<span class="number">4</span>);<span class="comment">//设置4个线程，1个I/O线程，3个worker线程 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _server.<span class="built_in">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::onConnection</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::onMessage</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, </span></span></span><br><span class="line"><span class="params"><span class="function">                   Buffer *buffer,              </span></span></span><br><span class="line"><span class="params"><span class="function">                   Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatserver.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EventLoop loop;  <span class="comment">//相当于像是创建了epoll</span></span><br><span class="line">    <span class="function">InetAddress <span class="title">addr</span><span class="params">(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6000</span>)</span></span>; <span class="comment">//IP地址，端口号</span></span><br><span class="line">    <span class="function">ChatServer <span class="title">server</span><span class="params">(&amp;loop,addr,<span class="string">&quot;ChatServer&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    server.<span class="built_in">start</span>();  <span class="comment">//listenfd通过 epoll_ctl 添加到 epoll </span></span><br><span class="line">    loop.<span class="built_in">loop</span>();    <span class="comment">//相当于epoll_wait，以阻塞方式等待新用户连接，已连接用户的读写事件等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-业务模块代码ChatService"><a href="#8-业务模块代码ChatService" class="headerlink" title="8 业务模块代码ChatService"></a>8 业务模块代码ChatService</h2><p><strong>首先我们对&#x2F;src&#x2F;server&#x2F;chatserver.cpp继续完善</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;include/server/chatserver.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ChatServer::<span class="built_in">ChatServer</span>(EventLoop *loop,               <span class="comment">// 事件循环</span></span><br><span class="line">               <span class="type">const</span> InetAddress &amp;listenAddr, <span class="comment">// IP+Port</span></span><br><span class="line">               <span class="type">const</span> string &amp;nameArg)</span><br><span class="line">            : _server(loop,listenAddr,nameArg),_loop(loop)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 给服务器注册用户连接的创建和断开回调</span></span><br><span class="line">    _server.<span class="built_in">setConnectionCallback</span>(std::<span class="built_in">bind</span>(&amp;ChatServer::onConnection,<span class="keyword">this</span>,_1));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给服务器注册用户读写事件回调</span></span><br><span class="line">    _server.<span class="built_in">setMessageCallback</span>(std::<span class="built_in">bind</span>(&amp;ChatServer::onMessage,<span class="keyword">this</span>,_1,_2,_3));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置服务器端的线程数量 1个I/O线程（监听新用户的连接事件）， 3个worker线程</span></span><br><span class="line">    <span class="comment">//不设置的话，就1个线程而已，要处理连接又要处理业务 </span></span><br><span class="line">    _server.<span class="built_in">setThreadNum</span>(<span class="number">4</span>);<span class="comment">//设置4个线程，1个I/O线程，3个worker线程 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _server.<span class="built_in">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::onConnection</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//客户端断开连接</span></span><br><span class="line">    <span class="keyword">if</span> (!conn-&gt;<span class="built_in">connected</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        conn-&gt;<span class="built_in">shutdown</span>();<span class="comment">//相当于这些close(fd)</span></span><br><span class="line">        <span class="comment">//_loop-&gt;quit();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::onMessage</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, </span></span></span><br><span class="line"><span class="params"><span class="function">                   Buffer *buffer,              </span></span></span><br><span class="line"><span class="params"><span class="function">                   Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string buf = buffer-&gt;<span class="built_in">retrieveAllAsString</span>();<span class="comment">//收到的数据放到这个字符串中 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//数据的反序列化</span></span><br><span class="line">    json js = json::<span class="built_in">parse</span>(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们在include下的server创建头文件：chatservice.hpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CHATSERVICE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHATSERVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpConnection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;thirdparty/json.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示处理消息的事件回调方法类型，事件处理器，派发3个东西 </span></span><br><span class="line"><span class="keyword">using</span> MsgHandler = function&lt;<span class="built_in">void</span>(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聊天服务器业务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//获取单例对象的接口函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ChatService *<span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//处理登录业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">//处理注册业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ChatService</span>(); <span class="comment">//单例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储消息id和其对应的业务处理方法，消息处理器的一个表，写消息id对应的处理操作 </span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,MsgHandler&gt; _msgHandlerMap;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p><strong>我们在include下定义一个文件：public.hpp（公共的文件）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef PUBLIC_H</span><br><span class="line">#define PUBLIC_H</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">是属于server和client的公共文件</span><br><span class="line">*/</span><br><span class="line">enum EnMsgType</span><br><span class="line">&#123;</span><br><span class="line">    LOGIN_MSG = 1,//登录消息</span><br><span class="line">    REG_MSG, //注册消息</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif // !PUBLIC_H</span><br></pre></td></tr></table></figure><h2 id="9-网络模块和业务模块耦合度降级代码处理"><a href="#9-网络模块和业务模块耦合度降级代码处理" class="headerlink" title="9 网络模块和业务模块耦合度降级代码处理"></a>9 网络模块和业务模块耦合度降级代码处理</h2><p><strong>我们在src的server下创建一个文件：chatservice.cpp</strong>（服务）</p><p>增加对获取消息对应的处理器函数编写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatservice.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ChatService *<span class="title">ChatService::instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> ChatService service;</span><br><span class="line">    <span class="keyword">return</span> &amp;service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，注册消息以及对应的Handler回调操作</span></span><br><span class="line">ChatService::<span class="built_in">ChatService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用户基本业务管理相关事件处理回调注册</span></span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGIN_MSG,<span class="built_in">bind</span>(&amp;ChatService::login,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG,<span class="built_in">bind</span>(&amp;ChatService::reg,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取消息对应的处理器</span></span><br><span class="line"><span class="function">MsgHandler <span class="title">ChatService::getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录错误日志，msgid没有对应的事件处理回调</span></span><br><span class="line">    <span class="keyword">auto</span> it = _msgHandlerMap.<span class="built_in">find</span>(msgid);</span><br><span class="line">    <span class="keyword">if</span>(it == _msgHandlerMap.<span class="built_in">end</span>())<span class="comment">//找不到 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回一个默认的处理器，空操作，=按值获取 </span></span><br><span class="line">        <span class="keyword">return</span> [=](<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_ERROR &lt;&lt; <span class="string">&quot;msgid:&quot;</span> &lt;&lt; msgid &lt;&lt; <span class="string">&quot; can not find handler!&quot;</span>;<span class="comment">//muduo日志会自动输出endl </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//成功的话 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second; <span class="comment">//返回这个处理器 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理登录业务  id  pwd   pwd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LOG_INFO&lt;&lt;<span class="string">&quot;do login service!!!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注册业务  name  password</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LOG_INFO&lt;&lt;<span class="string">&quot;do reg service!!!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们对&#x2F;include&#x2F;server&#x2F;chatservice.hpp继续完善</strong></p><p>增加对获取消息对应的处理器函数声明</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CHATSERVICE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHATSERVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span> <span class="comment">//一个消息ID映射一个事件处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpConnection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;thirdparty/json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/base/Logging.h&gt;</span> <span class="comment">//muduo的日志 </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示处理消息的事件回调方法类型，事件处理器，派发3个东西 </span></span><br><span class="line"><span class="keyword">using</span> MsgHandler = function&lt;<span class="built_in">void</span>(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聊天服务器业务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//获取单例对象的接口函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ChatService *<span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//处理登录业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">//处理注册业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">// 获取消息对应的处理器</span></span><br><span class="line">    <span class="function">MsgHandler <span class="title">getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ChatService</span>(); <span class="comment">//单例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储消息id和其对应的业务处理方法，消息处理器的一个表，写消息id对应的处理操作 </span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,MsgHandler&gt; _msgHandlerMap;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p><strong>我们对&#x2F;src&#x2F;server&#x2F;chatserver.cpp继续完善</strong></p><p>增加对解耦网络模块的代码和业务模块的代码编写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;include/server/chatserver.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ChatServer::<span class="built_in">ChatServer</span>(EventLoop *loop,               <span class="comment">// 事件循环</span></span><br><span class="line">               <span class="type">const</span> InetAddress &amp;listenAddr, <span class="comment">// IP+Port</span></span><br><span class="line">               <span class="type">const</span> string &amp;nameArg)</span><br><span class="line">            : _server(loop,listenAddr,nameArg),_loop(loop)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 给服务器注册用户连接的创建和断开回调</span></span><br><span class="line">    _server.<span class="built_in">setConnectionCallback</span>(std::<span class="built_in">bind</span>(&amp;ChatServer::onConnection,<span class="keyword">this</span>,_1));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给服务器注册用户读写事件回调</span></span><br><span class="line">    _server.<span class="built_in">setMessageCallback</span>(std::<span class="built_in">bind</span>(&amp;ChatServer::onMessage,<span class="keyword">this</span>,_1,_2,_3));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置服务器端的线程数量 1个I/O线程（监听新用户的连接事件）， 3个worker线程</span></span><br><span class="line">    <span class="comment">//不设置的话，就1个线程而已，要处理连接又要处理业务 </span></span><br><span class="line">    _server.<span class="built_in">setThreadNum</span>(<span class="number">4</span>);<span class="comment">//设置4个线程，1个I/O线程，3个worker线程 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _server.<span class="built_in">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::onConnection</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//客户端断开连接</span></span><br><span class="line">    <span class="keyword">if</span> (!conn-&gt;<span class="built_in">connected</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        conn-&gt;<span class="built_in">shutdown</span>();<span class="comment">//相当于这些close(fd)</span></span><br><span class="line">        <span class="comment">//_loop-&gt;quit();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::onMessage</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, </span></span></span><br><span class="line"><span class="params"><span class="function">                   Buffer *buffer,              </span></span></span><br><span class="line"><span class="params"><span class="function">                   Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string buf = buffer-&gt;<span class="built_in">retrieveAllAsString</span>();<span class="comment">//收到的数据放到这个字符串中 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//数据的反序列化</span></span><br><span class="line">    json js = json::<span class="built_in">parse</span>(buf);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//达到的目的：完全解耦网络模块的代码和业务模块的代码</span></span><br><span class="line">    <span class="comment">//通过js[&quot;msgid&quot;] 获取=》业务handler处理器（在业务模块事先绑定好的）=》conn  js  time传给你 </span></span><br><span class="line">    <span class="keyword">auto</span> msgHandler = ChatService::<span class="built_in">instance</span>()-&gt;<span class="built_in">getHandler</span>(js[<span class="string">&quot;msgid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());<span class="comment">//转成整型 </span></span><br><span class="line">    <span class="comment">//回调消息绑定好的事件处理器，来执行相应的业务处理，一个ID一个操作 </span></span><br><span class="line">    <span class="built_in">msgHandler</span>(conn, js, time);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-网络模块分发业务事件回调操作功能测试"><a href="#10-网络模块分发业务事件回调操作功能测试" class="headerlink" title="10 网络模块分发业务事件回调操作功能测试"></a>10 网络模块分发业务事件回调操作功能测试</h2><p><strong>写完代码我们测试一下，首先cmake一下，然后make，产生二进制文件Chatserver</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/10-01(1).png" alt="本地png图片PictureTest.png"></p><h2 id="11-MySQL数据库代码封装"><a href="#11-MySQL数据库代码封装" class="headerlink" title="11 MySQL数据库代码封装"></a>11 MySQL数据库代码封装</h2><p><strong>我们在上一节中把网络模块和业务模块的代码通过事件回调完全地拆分开。现在我们需要把业务模块的和数据层的代码区分开。</strong></p><p><strong>我们在include下的server下创建一个文件夹：db，然后完善项目工程目录上的CMakeLists.txt</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.10)</span><br><span class="line">project(chat)</span><br><span class="line"></span><br><span class="line"># 配置编译选项</span><br><span class="line">set(CMAKE_CXX_FLAGS $&#123;CMAKE_CXX_FLAGS&#125; -g)</span><br><span class="line"></span><br><span class="line"># 设置可执行文件最终存储的路径</span><br><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/bin)</span><br><span class="line"></span><br><span class="line"># 配置头文件的搜索路径</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/include)</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/include/server)</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/thirdparty)</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/include/server/db)</span><br><span class="line"></span><br><span class="line">add_subdirectory(src)</span><br></pre></td></tr></table></figure><p><strong>然后我们完善src下的server下的CMakeLists.txt</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 把当前路径下的所有源文件名字放入变量名SRC_LIST里面</span><br><span class="line">aux_source_directory(. SRC_LIST)</span><br><span class="line"></span><br><span class="line"># 表示生成可执行文件ChatServer，由SRC_LIST变量所定义的源文件</span><br><span class="line">add_executable(ChatServer $&#123;SRC_LIST&#125;)</span><br><span class="line"></span><br><span class="line"># 指定可执行文件链接时需要依赖的库文件</span><br><span class="line">target_link_libraries(ChatServer muduo_net muduo_base  pthread mysqlclient)</span><br></pre></td></tr></table></figure><p><strong>我们在include下的server下的db下，创建头文件:db.hpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DB_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DB_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mysql/mysql.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/base/Logging.h&gt;</span> <span class="comment">//muduo的日志 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库操作类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySQL</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 初始化数据库连接</span></span><br><span class="line"><span class="built_in">MySQL</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放数据库连接资源</span></span><br><span class="line">~<span class="built_in">MySQL</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">connect</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新操作 insert、delete、update</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">update</span><span class="params">(string sql)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询操作 select</span></span><br><span class="line"><span class="function">MYSQL_RES* <span class="title">query</span><span class="params">(string sql)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">MYSQL* _conn; <span class="comment">// 表示和MySQL Server的一条连接</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !DB_H</span></span></span><br></pre></td></tr></table></figure><p><strong>我们在src下的server下创建文件夹：db</strong><br><strong>我们在src下的server下的db下创建文件：db.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;db.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库配置信息</span></span><br><span class="line"><span class="type">static</span> string server = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="type">static</span> string user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">static</span> string password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">static</span> string dbname = <span class="string">&quot;chat&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据库连接</span></span><br><span class="line">MySQL::<span class="built_in">MySQL</span>()</span><br><span class="line">&#123;</span><br><span class="line">    _conn = <span class="built_in">mysql_init</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放数据库连接资源</span></span><br><span class="line">MySQL::~<span class="built_in">MySQL</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_conn != <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="built_in">mysql_close</span>(_conn);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MySQL::connect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   MYSQL *p = <span class="built_in">mysql_real_connect</span>(_conn, server.<span class="built_in">c_str</span>(), user.<span class="built_in">c_str</span>(),</span><br><span class="line">                                  password.<span class="built_in">c_str</span>(), dbname.<span class="built_in">c_str</span>(), <span class="number">3306</span>, <span class="literal">nullptr</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//C和C++代码默认的编码字符是ASCII，如果不设置，从MySQL上拉下来的中文显示？</span></span><br><span class="line">        <span class="built_in">mysql_query</span>(_conn, <span class="string">&quot;set names gbk&quot;</span>);</span><br><span class="line">        LOG_INFO &lt;&lt; <span class="string">&quot;connect mysql success!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        LOG_INFO &lt;&lt; <span class="string">&quot;connect mysql fail!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新操作</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MySQL::update</span><span class="params">(string sql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_query</span>(_conn, sql.<span class="built_in">c_str</span>()))</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_INFO &lt;&lt; __FILE__ &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; __LINE__ &lt;&lt; <span class="string">&quot;:&quot;</span></span><br><span class="line">                 &lt;&lt; sql &lt;&lt; <span class="string">&quot;更新失败!&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询操作</span></span><br><span class="line"><span class="function">MYSQL_RES * <span class="title">MySQL::query</span><span class="params">(string sql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_query</span>(_conn, sql.<span class="built_in">c_str</span>()))</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_INFO &lt;&lt; __FILE__ &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; __LINE__ &lt;&lt; <span class="string">&quot;:&quot;</span></span><br><span class="line">                 &lt;&lt; sql &lt;&lt; <span class="string">&quot;查询失败!&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">mysql_use_result</span>(_conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们完善src下的server的CMakeLists.txt</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 把当前路径下的所有源文件名字放入变量名SRC_LIST里面</span><br><span class="line">aux_source_directory(. SRC_LIST)</span><br><span class="line">aux_source_directory(./db DB_LIST)</span><br><span class="line"></span><br><span class="line"># 表示生成可执行文件ChatServer，由SRC_LIST变量所定义的源文件</span><br><span class="line">add_executable(ChatServer $&#123;SRC_LIST&#125; $&#123;DB_LIST&#125;)</span><br><span class="line"></span><br><span class="line"># 指定可执行文件链接时需要依赖的库文件</span><br><span class="line">target_link_libraries(ChatServer muduo_net muduo_base  pthread mysqlclient)</span><br></pre></td></tr></table></figure><p><strong>保存，编译成功</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/11-01(1).png" alt="本地png图片PictureTest.png"></p><h2 id="12-Model数据层代码框架设计"><a href="#12-Model数据层代码框架设计" class="headerlink" title="12 Model数据层代码框架设计"></a>12 Model数据层代码框架设计</h2><p><strong>数据库的操作和业务代码分离开，在业务层看到对象，在数据库层看到数据库的操作。我们要定义相关的一些类，和数据库的表一一对应的，才能把数据库读出来的字段合成一个对象提供给业务方去使用！</strong></p><p><strong>我们在include下的server下的创建文件：user.hpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> USER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">User</span>(<span class="type">int</span> id = <span class="number">-1</span>,string name = <span class="string">&quot;&quot;</span>,string pwd = <span class="string">&quot;&quot;</span>,string state = <span class="string">&quot;offline&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;password = pwd;</span><br><span class="line">        <span class="keyword">this</span>-&gt;state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setId</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123; <span class="keyword">this</span>-&gt;id = id; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span> </span>&#123; <span class="keyword">this</span>-&gt;name = name; &#125;  </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setPassword</span><span class="params">(string pwd)</span> </span>&#123; <span class="keyword">this</span>-&gt;password = pwd; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setState</span><span class="params">(string state)</span> </span>&#123; <span class="keyword">this</span>-&gt;state = state; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;id; &#125;</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name; &#125; </span><br><span class="line">    <span class="function">string <span class="title">getPassword</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;password; &#125;</span><br><span class="line">    <span class="function">string <span class="title">getState</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;state; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">    string password;</span><br><span class="line">    string state;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>我们在include下的server下的创建文件：usermodel.hpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> USERMODEL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USERMODEL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;db.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserModel</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(User &amp;user)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>我们在src下的server下的创建文件：usermodel.cpp</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;usermodel.hpp&quot;</span><br><span class="line"></span><br><span class="line">//User表的增加方法</span><br><span class="line">bool UserModel::insert(User &amp;user)</span><br><span class="line">&#123;</span><br><span class="line">    //1.组装sql语句</span><br><span class="line">    char sql[1024] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    sprintf(sql,&quot;insert into user(name,passsword,state) values(%d,&#x27;%s&#x27;,&#x27;%s&#x27;)&quot;,</span><br><span class="line">    user.getName().c_str(), user.getPassword().c_str(), user.getState().c_str());</span><br><span class="line"></span><br><span class="line">    MySQL mysql;//定义一个mysql对象</span><br><span class="line"></span><br><span class="line">    if(mysql.connect())//连接成功了 </span><br><span class="line">    &#123;</span><br><span class="line">        if(mysql.update(sql))//更新这个sql语句传进去 </span><br><span class="line">        &#123;</span><br><span class="line">              //获取插入成功的用户数据生成的主键id</span><br><span class="line">              //这里需要完善一下dp.hpp,dp.cpp，增加一个函数，获取连接。</span><br><span class="line">            user.setId(mysql_insert_id(mysql.getConnection()));</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-用户注册业务代码编写和测试"><a href="#13-用户注册业务代码编写和测试" class="headerlink" title="13 用户注册业务代码编写和测试"></a>13 用户注册业务代码编写和测试</h2><p><strong>我们先完善&#x2F;include&#x2F;server&#x2F;chatservice.hpp</strong></p><p>声明数据操作类对象</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CHATSERVICE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHATSERVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span> <span class="comment">//一个消息ID映射一个事件处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpConnection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/base/Logging.h&gt;</span> <span class="comment">//muduo的日志 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usermodel.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示处理消息的事件回调方法类型，事件处理器，派发3个东西 </span></span><br><span class="line"><span class="keyword">using</span> MsgHandler = function&lt;<span class="built_in">void</span>(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聊天服务器业务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//获取单例对象的接口函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ChatService *<span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//处理登录业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">//处理注册业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">// 获取消息对应的处理器</span></span><br><span class="line">    <span class="function">MsgHandler <span class="title">getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ChatService</span>(); <span class="comment">//单例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储消息id和其对应的业务处理方法，消息处理器的一个表，写消息id对应的处理操作 </span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,MsgHandler&gt; _msgHandlerMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据操作类对象</span></span><br><span class="line">    UserModel _userModel;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p><strong>我们完善一下&#x2F;include&#x2F;public.hpp</strong></p><p>增加注册回应消息</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PUBLIC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUBLIC_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">是属于server和client的公共文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">EnMsgType</span></span><br><span class="line">&#123;</span><br><span class="line">    LOGIN_MSG = <span class="number">1</span>,<span class="comment">//登录消息</span></span><br><span class="line">    REG_MSG, <span class="comment">//注册消息</span></span><br><span class="line">    REG_MSG_ACK, <span class="comment">//注册回应消息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !PUBLIC_H</span></span></span><br></pre></td></tr></table></figure><p><strong>我们完善&#x2F;src&#x2F;server&#x2F;chatservice.cpp</strong></p><p>完成处理注册业务函数的编写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatservice.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ChatService *<span class="title">ChatService::instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> ChatService service;</span><br><span class="line">    <span class="keyword">return</span> &amp;service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，注册消息以及对应的Handler回调操作</span></span><br><span class="line">ChatService::<span class="built_in">ChatService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用户基本业务管理相关事件处理回调注册</span></span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGIN_MSG,<span class="built_in">bind</span>(&amp;ChatService::login,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG,<span class="built_in">bind</span>(&amp;ChatService::reg,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取消息对应的处理器</span></span><br><span class="line"><span class="function">MsgHandler <span class="title">ChatService::getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录错误日志，msgid没有对应的事件处理回调</span></span><br><span class="line">    <span class="keyword">auto</span> it = _msgHandlerMap.<span class="built_in">find</span>(msgid);</span><br><span class="line">    <span class="keyword">if</span>(it == _msgHandlerMap.<span class="built_in">end</span>())<span class="comment">//找不到 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回一个默认的处理器，空操作，=按值获取 </span></span><br><span class="line">        <span class="keyword">return</span> [=](<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_ERROR &lt;&lt; <span class="string">&quot;msgid:&quot;</span> &lt;&lt; msgid &lt;&lt; <span class="string">&quot; can not find handler!&quot;</span>;<span class="comment">//muduo日志会自动输出endl </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//成功的话 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second; <span class="comment">//返回这个处理器 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理登录业务  id  pwd   pwd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LOG_INFO&lt;&lt;<span class="string">&quot;do login service!!!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注册业务  name  password</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name = js[<span class="string">&quot;name&quot;</span>];  <span class="comment">//获取名字 </span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码</span></span><br><span class="line"></span><br><span class="line">    User user;  <span class="comment">//创建用户对象 </span></span><br><span class="line">    user.<span class="built_in">setName</span>(name);</span><br><span class="line">    user.<span class="built_in">setPassword</span>(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_userModel.<span class="built_in">insert</span>(user)) <span class="comment">//插入成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册成功</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">        response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>保存，编译成功</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/13-01(1).png" alt="本地png图片PictureTest.png"></p><h2 id="14-用户登录业务代码编写和测试"><a href="#14-用户登录业务代码编写和测试" class="headerlink" title="14 用户登录业务代码编写和测试"></a>14 用户登录业务代码编写和测试</h2><p><strong>我们完善&#x2F;src&#x2F;server&#x2F;chatservice.cpp</strong></p><p>增加对登录业务代码的编写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatservice.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ChatService *<span class="title">ChatService::instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> ChatService service;</span><br><span class="line">    <span class="keyword">return</span> &amp;service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，注册消息以及对应的Handler回调操作</span></span><br><span class="line">ChatService::<span class="built_in">ChatService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用户基本业务管理相关事件处理回调注册</span></span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGIN_MSG,<span class="built_in">bind</span>(&amp;ChatService::login,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG,<span class="built_in">bind</span>(&amp;ChatService::reg,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取消息对应的处理器</span></span><br><span class="line"><span class="function">MsgHandler <span class="title">ChatService::getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录错误日志，msgid没有对应的事件处理回调</span></span><br><span class="line">    <span class="keyword">auto</span> it = _msgHandlerMap.<span class="built_in">find</span>(msgid);</span><br><span class="line">    <span class="keyword">if</span>(it == _msgHandlerMap.<span class="built_in">end</span>())<span class="comment">//找不到 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回一个默认的处理器，空操作，=按值获取 </span></span><br><span class="line">        <span class="keyword">return</span> [=](<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_ERROR &lt;&lt; <span class="string">&quot;msgid:&quot;</span> &lt;&lt; msgid &lt;&lt; <span class="string">&quot; can not find handler!&quot;</span>;<span class="comment">//muduo日志会自动输出endl </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//成功的话 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second; <span class="comment">//返回这个处理器 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理登录业务  id  pwd   pwd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取id号</span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码 </span></span><br><span class="line"></span><br><span class="line">    User user = _userModel.<span class="built_in">query</span>(id); <span class="comment">//查找 这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() == id &amp;&amp; user.<span class="built_in">getPassword</span>() == password) <span class="comment">//查出来了，登录成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>) <span class="comment">//该用户已经登录，不允许重复登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;this account is using,input another&quot;</span>;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串            </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">             <span class="comment">//登录成功，更新用户状态信息 state offline=&gt;online</span></span><br><span class="line">            user.<span class="built_in">setState</span>(<span class="string">&quot;online&quot;</span>);</span><br><span class="line">            _userModel.<span class="built_in">updateState</span>(user); <span class="comment">//这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">            response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">            response[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//该用户不存在，用户存在但是密码错误，登录失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;id or password is invalid&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注册业务  name  password</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name = js[<span class="string">&quot;name&quot;</span>];  <span class="comment">//获取名字 </span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码</span></span><br><span class="line"></span><br><span class="line">    User user;  <span class="comment">//创建用户对象 </span></span><br><span class="line">    user.<span class="built_in">setName</span>(name);</span><br><span class="line">    user.<span class="built_in">setPassword</span>(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_userModel.<span class="built_in">insert</span>(user)) <span class="comment">//插入成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册成功</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">        response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里要完善&#x2F;src&#x2F;server&#x2F;usermodel.cpp &#x2F;include&#x2F;server&#x2F;usermodel.hpp</strong></p><p>增加对updateState函数的声明，对updateState函数的编写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> USERMODEL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USERMODEL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;db.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//User表的数据操作类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserModel</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//User表的增加方法</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(User &amp;user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户号码查询用户信息</span></span><br><span class="line">    <span class="function">User <span class="title">query</span><span class="params">(<span class="type">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户的信息</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">updateState</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usermodel.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//User表的增加方法</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">UserModel::insert</span><span class="params">(User &amp;user)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.组装sql语句</span></span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">&quot;insert into user(name,password,state) values(&#x27;%s&#x27;,&#x27;%s&#x27;,&#x27;%s&#x27;)&quot;</span>,</span><br><span class="line">    user.<span class="built_in">getName</span>().<span class="built_in">c_str</span>(), user.<span class="built_in">getPassword</span>().<span class="built_in">c_str</span>(), user.<span class="built_in">getState</span>().<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    MySQL mysql;<span class="comment">//定义一个mysql对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>())<span class="comment">//连接成功了 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mysql.<span class="built_in">update</span>(sql))<span class="comment">//更新这个sql语句传进去 </span></span><br><span class="line">        &#123;</span><br><span class="line">              <span class="comment">//获取插入成功的用户数据生成的主键id</span></span><br><span class="line">            user.<span class="built_in">setId</span>(<span class="built_in">mysql_insert_id</span>(mysql.<span class="built_in">getConnection</span>()));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据用户号码查询用户信息</span></span><br><span class="line"><span class="function">User <span class="title">UserModel::query</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">//1.组装sql语句</span></span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">&quot;select * from user where id = &#x27;%d&#x27;&quot;</span>,id);</span><br><span class="line"></span><br><span class="line">    MySQL mysql;<span class="comment">//定义一个mysql对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>())<span class="comment">//连接成功了 </span></span><br><span class="line">    &#123;</span><br><span class="line">        MYSQL_RES * res = mysql.<span class="built_in">query</span>(sql); <span class="comment">//调用mysql数据库的查询 </span></span><br><span class="line">        <span class="keyword">if</span>(res != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MYSQL_ROW  row = <span class="built_in">mysql_fetch_row</span>(res); <span class="comment">//获取行，用主键查的，查一行</span></span><br><span class="line">            <span class="keyword">if</span>(row != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                User user;</span><br><span class="line">                user.<span class="built_in">setId</span>(<span class="built_in">atoi</span>(row[<span class="number">0</span>]));</span><br><span class="line">                user.<span class="built_in">setName</span>(row[<span class="number">1</span>]);</span><br><span class="line">                user.<span class="built_in">setPassword</span>(row[<span class="number">2</span>]);</span><br><span class="line">                user.<span class="built_in">setState</span>(row[<span class="number">3</span>]);</span><br><span class="line">                <span class="built_in">mysql_free_result</span>(res);  <span class="comment">//释放资源 </span></span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        return User();  //当没有查询到的时候，没有返回任何值，这是错误的。</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">User</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">UserModel::updateState</span><span class="params">(User user)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">//1.组装sql语句</span></span><br><span class="line">    <span class="type">int</span> id = user.<span class="built_in">getId</span>();</span><br><span class="line">    string state = user.<span class="built_in">getState</span>();</span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">&quot;update user set state = &#x27;%s&#x27; where id = &#x27;%d&#x27;&quot;</span>,state.<span class="built_in">c_str</span>(),id);</span><br><span class="line"></span><br><span class="line">    MySQL mysql;<span class="comment">//定义一个mysql对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>())<span class="comment">//连接成功了 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mysql.<span class="built_in">update</span>(sql))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/14-01(1).png" alt="本地png图片PictureTest.png"></p><h2 id="15-记录用户的连接信息以及线程安全问题"><a href="#15-记录用户的连接信息以及线程安全问题" class="headerlink" title="15 记录用户的连接信息以及线程安全问题"></a>15 记录用户的连接信息以及线程安全问题</h2><p>假设有2个用户，用户1把它的id号和要说的内容发过去，服务器要主动地去给用户2推送这个消息，但是用户2又不知道什么时候谁会给他说话，他不可能去服务器</p><p>上拉取消息，所以这个聊天 肯定得是服务器推送给用户2，所以聊天服务器也必须是长连接，不仅仅是客户端请求，服务端被动接收，而且服务端还要主动推送消</p><p>息到客户端，所以我们拿到用户2的id号，怎么知道这个用户的连接connection在哪里，所以，我们在业务层要想办法，一个用户一个connection，登录成功，连</p><p>接就建立成功了，这个连接就可以存储下来。</p><p><strong>我们先完善&#x2F;include&#x2F;server&#x2F;chatservice.hpp</strong></p><p>增加存储在线用户的通信连接，用unordered_map存储</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CHATSERVICE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHATSERVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span> <span class="comment">//一个消息ID映射一个事件处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpConnection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/base/Logging.h&gt;</span> <span class="comment">//muduo的日志 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usermodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示处理消息的事件回调方法类型，事件处理器，派发3个东西 </span></span><br><span class="line"><span class="keyword">using</span> MsgHandler = function&lt;<span class="built_in">void</span>(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聊天服务器业务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//获取单例对象的接口函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ChatService *<span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//处理登录业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">//处理注册业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">// 获取消息对应的处理器</span></span><br><span class="line">    <span class="function">MsgHandler <span class="title">getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ChatService</span>(); <span class="comment">//单例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储在线用户的通信连接，用户的id， TcpConnectionPtr</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,TcpConnectionPtr&gt; __userConnMap;</span><br><span class="line">    <span class="comment">//存储消息id和其对应的业务处理方法，消息处理器的一个表，写消息id对应的处理操作 </span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,MsgHandler&gt; _msgHandlerMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据操作类对象</span></span><br><span class="line">    UserModel _userModel;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p><strong>我们完善&#x2F;src&#x2F;server&#x2F;chatservice.cpp</strong></p><p>增加登录成功后，记录用户连接信息</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatservice.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ChatService *<span class="title">ChatService::instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> ChatService service;</span><br><span class="line">    <span class="keyword">return</span> &amp;service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，注册消息以及对应的Handler回调操作</span></span><br><span class="line">ChatService::<span class="built_in">ChatService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用户基本业务管理相关事件处理回调注册</span></span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGIN_MSG,<span class="built_in">bind</span>(&amp;ChatService::login,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG,<span class="built_in">bind</span>(&amp;ChatService::reg,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取消息对应的处理器</span></span><br><span class="line"><span class="function">MsgHandler <span class="title">ChatService::getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录错误日志，msgid没有对应的事件处理回调</span></span><br><span class="line">    <span class="keyword">auto</span> it = _msgHandlerMap.<span class="built_in">find</span>(msgid);</span><br><span class="line">    <span class="keyword">if</span>(it == _msgHandlerMap.<span class="built_in">end</span>())<span class="comment">//找不到 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回一个默认的处理器，空操作，=按值获取 </span></span><br><span class="line">        <span class="keyword">return</span> [=](<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_ERROR &lt;&lt; <span class="string">&quot;msgid:&quot;</span> &lt;&lt; msgid &lt;&lt; <span class="string">&quot; can not find handler!&quot;</span>;<span class="comment">//muduo日志会自动输出endl </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//成功的话 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second; <span class="comment">//返回这个处理器 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理登录业务  id  pwd   pwd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取id号</span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码 </span></span><br><span class="line"></span><br><span class="line">    User user = _userModel.<span class="built_in">query</span>(id); <span class="comment">//查找 这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() == id &amp;&amp; user.<span class="built_in">getPassword</span>() == password) <span class="comment">//查出来了，登录成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>) <span class="comment">//该用户已经登录，不允许重复登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;this account is using,input another&quot;</span>;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串            </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//登录成功，记录用户连接信息，当多个用户登录时，都会操作这个_userConnMap</span></span><br><span class="line">            __userConnMap.<span class="built_in">insert</span>(&#123;id,conn&#125;);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//登录成功，更新用户状态信息 state offline=&gt;online</span></span><br><span class="line">            user.<span class="built_in">setState</span>(<span class="string">&quot;online&quot;</span>);</span><br><span class="line">            _userModel.<span class="built_in">updateState</span>(user); <span class="comment">//这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">            response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">            response[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//该用户不存在，用户存在但是密码错误，登录失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;id or password is invalid&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注册业务  name  password</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name = js[<span class="string">&quot;name&quot;</span>];  <span class="comment">//获取名字 </span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码</span></span><br><span class="line"></span><br><span class="line">    User user;  <span class="comment">//创建用户对象 </span></span><br><span class="line">    user.<span class="built_in">setName</span>(name);</span><br><span class="line">    user.<span class="built_in">setPassword</span>(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_userModel.<span class="built_in">insert</span>(user)) <span class="comment">//插入成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册成功</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">        response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当多个用户登录时，都会操作这个_userConnMap，所以需要保证一下线程安全。</p><p><strong>我们在&#x2F;include&#x2F;server&#x2F;chatservice.hpp添加一把互斥锁</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CHATSERVICE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHATSERVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span> <span class="comment">//一个消息ID映射一个事件处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpConnection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/base/Logging.h&gt;</span> <span class="comment">//muduo的日志 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usermodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示处理消息的事件回调方法类型，事件处理器，派发3个东西 </span></span><br><span class="line"><span class="keyword">using</span> MsgHandler = function&lt;<span class="built_in">void</span>(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聊天服务器业务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//获取单例对象的接口函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ChatService *<span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//处理登录业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">//处理注册业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">// 获取消息对应的处理器</span></span><br><span class="line">    <span class="function">MsgHandler <span class="title">getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ChatService</span>(); <span class="comment">//单例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储在线用户的通信连接，用户的id， TcpConnectionPtr</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,TcpConnectionPtr&gt; _userConnMap;</span><br><span class="line">    <span class="comment">//存储消息id和其对应的业务处理方法，消息处理器的一个表，写消息id对应的处理操作 </span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,MsgHandler&gt; _msgHandlerMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据操作类对象</span></span><br><span class="line">    UserModel _userModel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义互斥锁，保证_userConnMap的线程安全</span></span><br><span class="line">    mutex _connMutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p><strong>我们完善&#x2F;src&#x2F;server&#x2F;chatservice.cpp</strong></p><p>为了_userConnMap的线程，需要加一把互斥锁。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatservice.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ChatService *<span class="title">ChatService::instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> ChatService service;</span><br><span class="line">    <span class="keyword">return</span> &amp;service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，注册消息以及对应的Handler回调操作</span></span><br><span class="line">ChatService::<span class="built_in">ChatService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用户基本业务管理相关事件处理回调注册</span></span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGIN_MSG,<span class="built_in">bind</span>(&amp;ChatService::login,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG,<span class="built_in">bind</span>(&amp;ChatService::reg,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取消息对应的处理器</span></span><br><span class="line"><span class="function">MsgHandler <span class="title">ChatService::getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录错误日志，msgid没有对应的事件处理回调</span></span><br><span class="line">    <span class="keyword">auto</span> it = _msgHandlerMap.<span class="built_in">find</span>(msgid);</span><br><span class="line">    <span class="keyword">if</span>(it == _msgHandlerMap.<span class="built_in">end</span>())<span class="comment">//找不到 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回一个默认的处理器，空操作，=按值获取 </span></span><br><span class="line">        <span class="keyword">return</span> [=](<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_ERROR &lt;&lt; <span class="string">&quot;msgid:&quot;</span> &lt;&lt; msgid &lt;&lt; <span class="string">&quot; can not find handler!&quot;</span>;<span class="comment">//muduo日志会自动输出endl </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//成功的话 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second; <span class="comment">//返回这个处理器 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理登录业务  id  pwd   pwd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取id号</span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码 </span></span><br><span class="line"></span><br><span class="line">    User user = _userModel.<span class="built_in">query</span>(id); <span class="comment">//查找 这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() == id &amp;&amp; user.<span class="built_in">getPassword</span>() == password) <span class="comment">//查出来了，登录成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>) <span class="comment">//该用户已经登录，不允许重复登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;this account is using,input another&quot;</span>;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串            </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//登录成功，记录用户连接信息，当多个用户登录时，都会操作这个_userConnMap</span></span><br><span class="line">            &#123;</span><br><span class="line">                lock_guard&lt;mutex&gt; <span class="built_in">lock</span>(_connMutex);</span><br><span class="line">                _userConnMap.<span class="built_in">insert</span>(&#123;id,conn&#125;);</span><br><span class="line">            &#125;<span class="comment">//加个作用域，出了这个右括号就自动解锁</span></span><br><span class="line">            </span><br><span class="line">             <span class="comment">//登录成功，更新用户状态信息 state offline=&gt;online</span></span><br><span class="line">            user.<span class="built_in">setState</span>(<span class="string">&quot;online&quot;</span>);</span><br><span class="line">            _userModel.<span class="built_in">updateState</span>(user); <span class="comment">//这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">            response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">            response[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//该用户不存在，用户存在但是密码错误，登录失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;id or password is invalid&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注册业务  name  password</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name = js[<span class="string">&quot;name&quot;</span>];  <span class="comment">//获取名字 </span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码</span></span><br><span class="line"></span><br><span class="line">    User user;  <span class="comment">//创建用户对象 </span></span><br><span class="line">    user.<span class="built_in">setName</span>(name);</span><br><span class="line">    user.<span class="built_in">setPassword</span>(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_userModel.<span class="built_in">insert</span>(user)) <span class="comment">//插入成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册成功</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">        response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译一下</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/15-01(1).png" alt="本地png图片PictureTest.png"></p><h2 id="16-客户端异常退出业务代码编写和测试"><a href="#16-客户端异常退出业务代码编写和测试" class="headerlink" title="16 客户端异常退出业务代码编写和测试"></a>16 客户端异常退出业务代码编写和测试</h2><p>我们要处理一下客户端的异常退出，客户端在没有任何响应的情况下，直接给异常退出了，它在目前的代码下，退出没有合法的json<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>，json请求，而只是网</p><p>络连接断开了，我们还要修改用户的状态为offline。</p><p><strong>我们先完善&#x2F;src&#x2F;server&#x2F;chatserver.cpp</strong></p><p>客户端断开连接代码上增加客户端异常关闭的代码</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatserver.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line">ChatServer::<span class="built_in">ChatServer</span>(EventLoop *loop,               <span class="comment">// 事件循环</span></span><br><span class="line">               <span class="type">const</span> InetAddress &amp;listenAddr, <span class="comment">// IP+Port</span></span><br><span class="line">               <span class="type">const</span> string &amp;nameArg)</span><br><span class="line">            : _server(loop,listenAddr,nameArg),_loop(loop)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 给服务器注册用户连接的创建和断开回调</span></span><br><span class="line">    _server.<span class="built_in">setConnectionCallback</span>(std::<span class="built_in">bind</span>(&amp;ChatServer::onConnection,<span class="keyword">this</span>,_1));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给服务器注册用户读写事件回调</span></span><br><span class="line">    _server.<span class="built_in">setMessageCallback</span>(std::<span class="built_in">bind</span>(&amp;ChatServer::onMessage,<span class="keyword">this</span>,_1,_2,_3));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置服务器端的线程数量 1个I/O线程（监听新用户的连接事件）， 3个worker线程</span></span><br><span class="line">    <span class="comment">//不设置的话，就1个线程而已，要处理连接又要处理业务 </span></span><br><span class="line">    _server.<span class="built_in">setThreadNum</span>(<span class="number">4</span>);<span class="comment">//设置4个线程，1个I/O线程，3个worker线程 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _server.<span class="built_in">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::onConnection</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//客户端断开连接</span></span><br><span class="line">    <span class="keyword">if</span> (!conn-&gt;<span class="built_in">connected</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        ChatService::<span class="built_in">instance</span>()-&gt;<span class="built_in">clientCloseException</span>(conn); <span class="comment">//客户端异常关闭 </span></span><br><span class="line">        conn-&gt;<span class="built_in">shutdown</span>();<span class="comment">//相当于这些close(fd)</span></span><br><span class="line">        <span class="comment">//_loop-&gt;quit();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::onMessage</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, </span></span></span><br><span class="line"><span class="params"><span class="function">                   Buffer *buffer,              </span></span></span><br><span class="line"><span class="params"><span class="function">                   Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string buf = buffer-&gt;<span class="built_in">retrieveAllAsString</span>();<span class="comment">//收到的数据放到这个字符串中 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//数据的反序列化</span></span><br><span class="line">    json js = json::<span class="built_in">parse</span>(buf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//达到的目的：完全解耦网络模块的代码和业务模块的代码</span></span><br><span class="line">    <span class="comment">//通过js[&quot;msgid&quot;] 获取=》业务handler处理器（在业务模块事先绑定好的）=》conn  js  time传给你 </span></span><br><span class="line">    <span class="keyword">auto</span> msgHandler = ChatService::<span class="built_in">instance</span>()-&gt;<span class="built_in">getHandler</span>(js[<span class="string">&quot;msgid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());<span class="comment">//转成整型 </span></span><br><span class="line">    <span class="comment">//回调消息绑定好的事件处理器，来执行相应的业务处理，一个ID一个操作 </span></span><br><span class="line">    <span class="built_in">msgHandler</span>(conn, js, time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在完善一下&#x2F;include&#x2F;server&#x2F;chatservice.hpp</strong></p><p>增加异常关闭代码的声明</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CHATSERVICE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHATSERVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span> <span class="comment">//一个消息ID映射一个事件处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpConnection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/base/Logging.h&gt;</span> <span class="comment">//muduo的日志 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usermodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示处理消息的事件回调方法类型，事件处理器，派发3个东西 </span></span><br><span class="line"><span class="keyword">using</span> MsgHandler = function&lt;<span class="built_in">void</span>(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聊天服务器业务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//获取单例对象的接口函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ChatService *<span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//处理登录业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">//处理注册业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">// 获取消息对应的处理器</span></span><br><span class="line">    <span class="function">MsgHandler <span class="title">getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span>;</span><br><span class="line">    <span class="comment">//处理客户端异常退出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ChatService</span>(); <span class="comment">//单例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储在线用户的通信连接，用户的id， TcpConnectionPtr</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,TcpConnectionPtr&gt; _userConnMap;</span><br><span class="line">    <span class="comment">//存储消息id和其对应的业务处理方法，消息处理器的一个表，写消息id对应的处理操作 </span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,MsgHandler&gt; _msgHandlerMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据操作类对象</span></span><br><span class="line">    UserModel _userModel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义互斥锁，保证_userConnMap的线程安全</span></span><br><span class="line">    mutex _connMutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p><strong>在完善一下&#x2F;src&#x2F;server&#x2F;chatservice.cpp</strong></p><p>增加异常关闭代码函数的编写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatservice.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ChatService *<span class="title">ChatService::instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> ChatService service;</span><br><span class="line">    <span class="keyword">return</span> &amp;service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，注册消息以及对应的Handler回调操作</span></span><br><span class="line">ChatService::<span class="built_in">ChatService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用户基本业务管理相关事件处理回调注册</span></span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGIN_MSG,<span class="built_in">bind</span>(&amp;ChatService::login,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG,<span class="built_in">bind</span>(&amp;ChatService::reg,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取消息对应的处理器</span></span><br><span class="line"><span class="function">MsgHandler <span class="title">ChatService::getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录错误日志，msgid没有对应的事件处理回调</span></span><br><span class="line">    <span class="keyword">auto</span> it = _msgHandlerMap.<span class="built_in">find</span>(msgid);</span><br><span class="line">    <span class="keyword">if</span>(it == _msgHandlerMap.<span class="built_in">end</span>())<span class="comment">//找不到 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回一个默认的处理器，空操作，=按值获取 </span></span><br><span class="line">        <span class="keyword">return</span> [=](<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_ERROR &lt;&lt; <span class="string">&quot;msgid:&quot;</span> &lt;&lt; msgid &lt;&lt; <span class="string">&quot; can not find handler!&quot;</span>;<span class="comment">//muduo日志会自动输出endl </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//成功的话 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second; <span class="comment">//返回这个处理器 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理登录业务  id  pwd   pwd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取id号</span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码 </span></span><br><span class="line"></span><br><span class="line">    User user = _userModel.<span class="built_in">query</span>(id); <span class="comment">//查找 这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() == id &amp;&amp; user.<span class="built_in">getPassword</span>() == password) <span class="comment">//查出来了，登录成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>) <span class="comment">//该用户已经登录，不允许重复登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;this account is using,input another&quot;</span>;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串            </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//登录成功，记录用户连接信息，当多个用户登录时，都会操作这个_userConnMap</span></span><br><span class="line">            &#123;</span><br><span class="line">                lock_guard&lt;mutex&gt; <span class="built_in">lock</span>(_connMutex);</span><br><span class="line">                _userConnMap.<span class="built_in">insert</span>(&#123;id,conn&#125;);</span><br><span class="line">            &#125;<span class="comment">//加个作用域，出了这个右括号就自动解锁</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//登录成功，更新用户状态信息 state offline=&gt;online</span></span><br><span class="line">            user.<span class="built_in">setState</span>(<span class="string">&quot;online&quot;</span>);</span><br><span class="line">            _userModel.<span class="built_in">updateState</span>(user); <span class="comment">//这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">            response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">            response[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//该用户不存在，用户存在但是密码错误，登录失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;id or password is invalid&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注册业务  name  password</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name = js[<span class="string">&quot;name&quot;</span>];  <span class="comment">//获取名字 </span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码</span></span><br><span class="line"></span><br><span class="line">    User user;  <span class="comment">//创建用户对象 </span></span><br><span class="line">    user.<span class="built_in">setName</span>(name);</span><br><span class="line">    user.<span class="built_in">setPassword</span>(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_userModel.<span class="built_in">insert</span>(user)) <span class="comment">//插入成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册成功</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">        response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理客户端异常退出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    User user;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = _userConnMap.<span class="built_in">begin</span>(); it != _userConnMap.<span class="built_in">end</span>();it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second == conn)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//从map表删除用户的链接信息</span></span><br><span class="line">                user.<span class="built_in">setId</span>(it-&gt;first);</span><br><span class="line">                _userConnMap.<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户的状态信息</span></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        user.<span class="built_in">setState</span>(<span class="string">&quot;offline&quot;</span>);</span><br><span class="line">        _userModel.<span class="built_in">updateState</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写完成之后，我们测试一下</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/16-01(1).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/16-01(2).png" alt="本地png图片PictureTest.png"></p><h2 id="17-点对点聊天业务代码编写和测试"><a href="#17-点对点聊天业务代码编写和测试" class="headerlink" title="17 点对点聊天业务代码编写和测试"></a><strong>17 点对点聊天业务代码编写和测试</strong></h2><p><strong>首先我们修改&#x2F;include&#x2F;public.hpp</strong></p><p>增加聊天消息</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PUBLIC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUBLIC_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">是属于server和client的公共文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">EnMsgType</span></span><br><span class="line">&#123;</span><br><span class="line">    LOGIN_MSG = <span class="number">1</span>,<span class="comment">//登录消息</span></span><br><span class="line">    LOGIN_MSG_ACK, <span class="comment">//登录回应消息</span></span><br><span class="line">    REG_MSG, <span class="comment">//注册消息</span></span><br><span class="line">    REG_MSG_ACK, <span class="comment">//注册回应消息</span></span><br><span class="line">    ONE_CHAT_MSG, <span class="comment">//聊天消息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !PUBLIC_H</span></span></span><br></pre></td></tr></table></figure><p><strong>我们完善&#x2F;include&#x2F;server&#x2F;chatservice.hpp</strong></p><p>增加对处理一对一聊天业务函数的声明</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CHATSERVICE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHATSERVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span> <span class="comment">//一个消息ID映射一个事件处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpConnection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/base/Logging.h&gt;</span> <span class="comment">//muduo的日志 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usermodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示处理消息的事件回调方法类型，事件处理器，派发3个东西 </span></span><br><span class="line"><span class="keyword">using</span> MsgHandler = function&lt;<span class="built_in">void</span>(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聊天服务器业务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//获取单例对象的接口函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ChatService *<span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//处理登录业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">//处理注册业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">//处理一对一聊天业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">// 获取消息对应的处理器</span></span><br><span class="line">    <span class="function">MsgHandler <span class="title">getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span>;</span><br><span class="line">    <span class="comment">//处理客户端异常退出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ChatService</span>(); <span class="comment">//单例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储在线用户的通信连接，用户的id， TcpConnectionPtr</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,TcpConnectionPtr&gt; _userConnMap;</span><br><span class="line">    <span class="comment">//存储消息id和其对应的业务处理方法，消息处理器的一个表，写消息id对应的处理操作 </span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,MsgHandler&gt; _msgHandlerMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据操作类对象</span></span><br><span class="line">    UserModel _userModel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义互斥锁，保证_userConnMap的线程安全</span></span><br><span class="line">    mutex _connMutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p><strong>我们完善&#x2F;src&#x2F;server&#x2F;chatservice.cpp</strong></p><p>增加对处理一对一聊天业务函数的编写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatservice.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ChatService *<span class="title">ChatService::instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> ChatService service;</span><br><span class="line">    <span class="keyword">return</span> &amp;service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，注册消息以及对应的Handler回调操作</span></span><br><span class="line">ChatService::<span class="built_in">ChatService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用户基本业务管理相关事件处理回调注册</span></span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGIN_MSG,<span class="built_in">bind</span>(&amp;ChatService::login,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG,<span class="built_in">bind</span>(&amp;ChatService::reg,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG,<span class="built_in">bind</span>(&amp;ChatService::oneChat,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取消息对应的处理器</span></span><br><span class="line"><span class="function">MsgHandler <span class="title">ChatService::getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录错误日志，msgid没有对应的事件处理回调</span></span><br><span class="line">    <span class="keyword">auto</span> it = _msgHandlerMap.<span class="built_in">find</span>(msgid);</span><br><span class="line">    <span class="keyword">if</span>(it == _msgHandlerMap.<span class="built_in">end</span>())<span class="comment">//找不到 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回一个默认的处理器，空操作，=按值获取 </span></span><br><span class="line">        <span class="keyword">return</span> [=](<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_ERROR &lt;&lt; <span class="string">&quot;msgid:&quot;</span> &lt;&lt; msgid &lt;&lt; <span class="string">&quot; can not find handler!&quot;</span>;<span class="comment">//muduo日志会自动输出endl </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//成功的话 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second; <span class="comment">//返回这个处理器 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理登录业务  id  pwd   pwd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取id号</span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码 </span></span><br><span class="line"></span><br><span class="line">    User user = _userModel.<span class="built_in">query</span>(id); <span class="comment">//查找 这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() == id &amp;&amp; user.<span class="built_in">getPassword</span>() == password) <span class="comment">//查出来了，登录成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>) <span class="comment">//该用户已经登录，不允许重复登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;this account is using,input another&quot;</span>;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串            </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//登录成功，记录用户连接信息，当多个用户登录时，都会操作这个_userConnMap</span></span><br><span class="line">            &#123;</span><br><span class="line">                lock_guard&lt;mutex&gt; <span class="built_in">lock</span>(_connMutex);</span><br><span class="line">                _userConnMap.<span class="built_in">insert</span>(&#123;id,conn&#125;);</span><br><span class="line">            &#125;<span class="comment">//加个作用域，出了这个右括号就自动解锁</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//登录成功，更新用户状态信息 state offline=&gt;online</span></span><br><span class="line">            user.<span class="built_in">setState</span>(<span class="string">&quot;online&quot;</span>);</span><br><span class="line">            _userModel.<span class="built_in">updateState</span>(user); <span class="comment">//这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">            response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">            response[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//该用户不存在，用户存在但是密码错误，登录失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;id or password is invalid&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注册业务  name  password</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name = js[<span class="string">&quot;name&quot;</span>];  <span class="comment">//获取名字 </span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码</span></span><br><span class="line"></span><br><span class="line">    User user;  <span class="comment">//创建用户对象 </span></span><br><span class="line">    user.<span class="built_in">setName</span>(name);</span><br><span class="line">    user.<span class="built_in">setPassword</span>(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_userModel.<span class="built_in">insert</span>(user)) <span class="comment">//插入成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册成功</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">        response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理客户端异常退出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    User user;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = _userConnMap.<span class="built_in">begin</span>(); it != _userConnMap.<span class="built_in">end</span>();it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second == conn)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//从map表删除用户的链接信息</span></span><br><span class="line">                user.<span class="built_in">setId</span>(it-&gt;first);</span><br><span class="line">                _userConnMap.<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户的状态信息</span></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        user.<span class="built_in">setState</span>(<span class="string">&quot;offline&quot;</span>);</span><br><span class="line">        _userModel.<span class="built_in">updateState</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理一对一聊天业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> toid = js[<span class="string">&quot;toid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取对方的id号 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>; <span class="comment">//访问连接信息表，要保证线程安全 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(toid);  <span class="comment">//查找对方id号 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it != _userConnMap.<span class="built_in">end</span>()) <span class="comment">//找到了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//toid在线，转发消息  服务器主动推送消息给toid用户</span></span><br><span class="line">            it-&gt;second-&gt;<span class="built_in">send</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写完成之后，我们测试一下</strong></p><p><strong>我们先注册一个新用户</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/17-01(1).png" alt="本地png图片PictureTest.png"></p><p><strong>注册成功，id号为2</strong></p><p><strong>我们打开mysql数据库查看一下</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/17-01(2).png" alt="本地png图片PictureTest.png"></p><p><strong>我们登录caiwei用户、zouzeyu用户</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/17-01(3).png" alt="本地png图片PictureTest.png"></p><p><strong>我们打开mysql数据库查看一下</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/17-01(4).png" alt="本地png图片PictureTest.png"></p><p><strong>我们让zouzeyu给caiwei发送hello!然后caiwei给zouzeyu发送消息OK</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/17-01(5).png" alt="本地png图片PictureTest.png"></p><h2 id="18-离线消息业务代码编写和测试"><a href="#18-离线消息业务代码编写和测试" class="headerlink" title="18 离线消息业务代码编写和测试"></a>18 离线消息业务代码编写和测试</h2><p><strong>我们在&#x2F;include&#x2F;server&#x2F;下创建offlinemsgmodel.hpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> OFFLINEMSGEMODEL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OFFLINEMSGEMODEL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供离线消息表的操作接口方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OfflineMsgModel</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//存储用户的离线消息</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> userid,string msg)</span></span>;</span><br><span class="line">    <span class="comment">//删除用户的离线消息</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> userid)</span></span>;</span><br><span class="line">    <span class="comment">//查询用户的离线消息</span></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">query</span><span class="params">(<span class="type">int</span> userid)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !OFFLINEMSGEMODEL_H</span></span></span><br></pre></td></tr></table></figure><p><strong>我们在&#x2F;src&#x2F;server&#x2F;下创建offlinemsgmodel.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;offlinemsgmodel.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存储用户的离线消息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OfflineMsgModel::insert</span><span class="params">(<span class="type">int</span> userid,string msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.组装sql语句</span></span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">&quot;insert into offlinemessage(userid,message) values(&#x27;%d&#x27;,&#x27;%s&#x27;)&quot;</span>,</span><br><span class="line">    userid,msg.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    MySQL mysql;<span class="comment">//定义一个mysql对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>()) <span class="comment">//连接成功了 </span></span><br><span class="line">    &#123;</span><br><span class="line">        mysql.<span class="built_in">update</span>(sql);<span class="comment">//更新这个sql语句传进去</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除用户的离线消息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OfflineMsgModel::remove</span><span class="params">(<span class="type">int</span> userid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.组装sql语句</span></span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">&quot;delete from offlinemessage where userid=&#x27;%d&#x27;&quot;</span>,userid);</span><br><span class="line"></span><br><span class="line">    MySQL mysql;<span class="comment">//定义一个mysql对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>()) <span class="comment">//连接成功了 </span></span><br><span class="line">    &#123;</span><br><span class="line">        mysql.<span class="built_in">update</span>(sql);<span class="comment">//更新这个sql语句传进去</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询用户的离线消息</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">OfflineMsgModel::query</span><span class="params">(<span class="type">int</span> userid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.组装sql语句</span></span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">&quot;select message from offlinemessage where userid=&#x27;%d&#x27;&quot;</span>,userid);</span><br><span class="line"></span><br><span class="line">    MySQL mysql;<span class="comment">//定义一个mysql对象</span></span><br><span class="line">    vector&lt;string&gt; vec;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>()) <span class="comment">//连接成功了 </span></span><br><span class="line">    &#123;</span><br><span class="line">        MYSQL_RES * res = mysql.<span class="built_in">query</span>(sql);<span class="comment">//调用mysql数据库的查询</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(res != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MYSQL_ROW row = <span class="built_in">mysql_fetch_row</span>(res); <span class="comment">//获取行，用主键查的，查一行</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(row != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vec.<span class="built_in">push_back</span>(row[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">            <span class="keyword">return</span> vec;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> vec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们完善&#x2F;include&#x2F;server&#x2F;下的chatservice.hpp</strong></p><p>增加数据操作类对象_offlineMsgModel</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CHATSERVICE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHATSERVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span> <span class="comment">//一个消息ID映射一个事件处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpConnection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/base/Logging.h&gt;</span> <span class="comment">//muduo的日志 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usermodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;offlinemsgmodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示处理消息的事件回调方法类型，事件处理器，派发3个东西 </span></span><br><span class="line"><span class="keyword">using</span> MsgHandler = function&lt;<span class="built_in">void</span>(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聊天服务器业务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//获取单例对象的接口函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ChatService *<span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//处理登录业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">//处理注册业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">//处理一对一聊天业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">// 获取消息对应的处理器</span></span><br><span class="line">    <span class="function">MsgHandler <span class="title">getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span>;</span><br><span class="line">    <span class="comment">//处理客户端异常退出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ChatService</span>(); <span class="comment">//单例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储在线用户的通信连接，用户的id， TcpConnectionPtr</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,TcpConnectionPtr&gt; _userConnMap;</span><br><span class="line">    <span class="comment">//存储消息id和其对应的业务处理方法，消息处理器的一个表，写消息id对应的处理操作 </span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,MsgHandler&gt; _msgHandlerMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据操作类对象</span></span><br><span class="line">    UserModel _userModel;</span><br><span class="line">    OfflineMsgModel _offlineMsgModel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义互斥锁，保证_userConnMap的线程安全</span></span><br><span class="line">    mutex _connMutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>我们完善&#x2F;src&#x2F;server&#x2F;chatservice.cpp</strong></p><p>增加登录成功之后，查询该用户是否有离线消息</p><p>增加聊天一对一业务中不在线把消息存储在offlinemessag中</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatservice.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ChatService *<span class="title">ChatService::instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> ChatService service;</span><br><span class="line">    <span class="keyword">return</span> &amp;service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，注册消息以及对应的Handler回调操作</span></span><br><span class="line">ChatService::<span class="built_in">ChatService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用户基本业务管理相关事件处理回调注册</span></span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGIN_MSG,<span class="built_in">bind</span>(&amp;ChatService::login,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG,<span class="built_in">bind</span>(&amp;ChatService::reg,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;ONE_CHAT_MSG,<span class="built_in">bind</span>(&amp;ChatService::oneChat,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取消息对应的处理器</span></span><br><span class="line"><span class="function">MsgHandler <span class="title">ChatService::getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录错误日志，msgid没有对应的事件处理回调</span></span><br><span class="line">    <span class="keyword">auto</span> it = _msgHandlerMap.<span class="built_in">find</span>(msgid);</span><br><span class="line">    <span class="keyword">if</span>(it == _msgHandlerMap.<span class="built_in">end</span>())<span class="comment">//找不到 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回一个默认的处理器，空操作，=按值获取 </span></span><br><span class="line">        <span class="keyword">return</span> [=](<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_ERROR &lt;&lt; <span class="string">&quot;msgid:&quot;</span> &lt;&lt; msgid &lt;&lt; <span class="string">&quot; can not find handler!&quot;</span>;<span class="comment">//muduo日志会自动输出endl </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//成功的话 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second; <span class="comment">//返回这个处理器 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理登录业务  id  pwd   pwd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取id号</span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码 </span></span><br><span class="line"></span><br><span class="line">    User user = _userModel.<span class="built_in">query</span>(id); <span class="comment">//查找 这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() == id &amp;&amp; user.<span class="built_in">getPassword</span>() == password) <span class="comment">//查出来了，登录成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>) <span class="comment">//该用户已经登录，不允许重复登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;this account is using,input another&quot;</span>;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串            </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//登录成功，记录用户连接信息，当多个用户登录时，都会操作这个_userConnMap</span></span><br><span class="line">            &#123;</span><br><span class="line">                lock_guard&lt;mutex&gt; <span class="built_in">lock</span>(_connMutex);</span><br><span class="line">                _userConnMap.<span class="built_in">insert</span>(&#123;id,conn&#125;);</span><br><span class="line">            &#125;<span class="comment">//加个作用域，出了这个右括号就自动解锁</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//登录成功，更新用户状态信息 state offline=&gt;online</span></span><br><span class="line">            user.<span class="built_in">setState</span>(<span class="string">&quot;online&quot;</span>);</span><br><span class="line">            _userModel.<span class="built_in">updateState</span>(user); <span class="comment">//这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">            response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">            response[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//查询该用户是否有离线消息</span></span><br><span class="line">            vector&lt;string&gt; vec = _offlineMsgModel.<span class="built_in">query</span>(id); <span class="comment">//查询用户ID</span></span><br><span class="line">            <span class="keyword">if</span>(!vec.<span class="built_in">empty</span>()) <span class="comment">//不为空</span></span><br><span class="line">            &#123;</span><br><span class="line">                response[<span class="string">&quot;offlinemsg&quot;</span>] = vec; <span class="comment">//json库可以和容器之间序列化和反序列化 </span></span><br><span class="line">                <span class="comment">//读取该用户的离线消息后，把该用户的所有离线消息删除掉</span></span><br><span class="line">                _offlineMsgModel.<span class="built_in">remove</span>(id);</span><br><span class="line">            &#125;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串  </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//该用户不存在，用户存在但是密码错误，登录失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;id or password is invalid&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注册业务  name  password</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name = js[<span class="string">&quot;name&quot;</span>];  <span class="comment">//获取名字 </span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码</span></span><br><span class="line"></span><br><span class="line">    User user;  <span class="comment">//创建用户对象 </span></span><br><span class="line">    user.<span class="built_in">setName</span>(name);</span><br><span class="line">    user.<span class="built_in">setPassword</span>(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_userModel.<span class="built_in">insert</span>(user)) <span class="comment">//插入成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册成功</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">        response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理客户端异常退出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    User user;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = _userConnMap.<span class="built_in">begin</span>(); it != _userConnMap.<span class="built_in">end</span>();it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second == conn)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//从map表删除用户的链接信息</span></span><br><span class="line">                user.<span class="built_in">setId</span>(it-&gt;first);</span><br><span class="line">                _userConnMap.<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户的状态信息</span></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        user.<span class="built_in">setState</span>(<span class="string">&quot;offline&quot;</span>);</span><br><span class="line">        _userModel.<span class="built_in">updateState</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理一对一聊天业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> toid = js[<span class="string">&quot;toid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取对方的id号 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>; <span class="comment">//访问连接信息表，要保证线程安全 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(toid);  <span class="comment">//查找对方id号 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it != _userConnMap.<span class="built_in">end</span>()) <span class="comment">//找到了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//toid在线，转发消息  服务器主动推送消息给toid用户</span></span><br><span class="line">            it-&gt;second-&gt;<span class="built_in">send</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toid不在线，存储离线消息</span></span><br><span class="line">    _offlineMsgModel.<span class="built_in">insert</span>(toid,js.<span class="built_in">dump</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>首先我们登录ID为1的用户，向ID为2的用户连发3条消息，ID为2的用户不在线，那么offlinemessage就会存储3条消息</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/18-01(1).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/18-01(2).png" alt="本地png图片PictureTest.png"></p><p><strong>登录ID为2的用户，收到3条来自ID为1的用户，offlinemessage没有存储数据</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/18-01(3).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/18-01(4).png" alt="本地png图片PictureTest.png"></p><h2 id="19-服务器异常退出处理代码编写和测试"><a href="#19-服务器异常退出处理代码编写和测试" class="headerlink" title="19 服务器异常退出处理代码编写和测试"></a>19 服务器异常退出处理代码编写和测试</h2><p>在之前，我完成看客户端异常退出的处理代码，客户端异常退出是因为它没有发出json字符串，是通过连接异常断开进行用户的connection的删除和用户表状态的</p><p>更改。但是服务器异常退出了，user表的用户的状态还是online，这个问题还没有解决。因为我们Ctrl C强制退出服务器的时候，服务器根本没有机会去数据库里</p><p>更改用户的状态信息。</p><p><strong>我们完善&#x2F;src&#x2F;server&#x2F;main.cpp</strong></p><p>增加处理服务器ctrl+c结束后，进行重置user的状态信息</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatserver.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理服务器ctrl+c结束后，进行重置user的状态信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resetHandler</span><span class="params">(<span class="type">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ChatService::<span class="built_in">instance</span>()-&gt;<span class="built_in">reset</span>(); <span class="comment">//调用重置 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">signal</span>(SIGINT,resetHandler);</span><br><span class="line"></span><br><span class="line">    EventLoop loop;  <span class="comment">//相当于像是创建了epoll</span></span><br><span class="line">    <span class="function">InetAddress <span class="title">addr</span><span class="params">(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6000</span>)</span></span>; <span class="comment">//IP地址，端口号</span></span><br><span class="line">    <span class="function">ChatServer <span class="title">server</span><span class="params">(&amp;loop,addr,<span class="string">&quot;ChatServer&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    server.<span class="built_in">start</span>();  <span class="comment">//listenfd通过 epoll_ctl 添加到 epoll </span></span><br><span class="line">    loop.<span class="built_in">loop</span>();    <span class="comment">//相当于epoll_wait，以阻塞方式等待新用户连接，已连接用户的读写事件等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们完善&#x2F;include&#x2F;server&#x2F;chatservice.hpp</strong></p><p>增加对处理服务器异常退出函数的声明</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CHATSERVICE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHATSERVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span> <span class="comment">//一个消息ID映射一个事件处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpConnection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/base/Logging.h&gt;</span> <span class="comment">//muduo的日志 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usermodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;offlinemsgmodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示处理消息的事件回调方法类型，事件处理器，派发3个东西 </span></span><br><span class="line"><span class="keyword">using</span> MsgHandler = function&lt;<span class="built_in">void</span>(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聊天服务器业务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//获取单例对象的接口函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ChatService *<span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//处理登录业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">//处理注册业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">//处理一对一聊天业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">// 获取消息对应的处理器</span></span><br><span class="line">    <span class="function">MsgHandler <span class="title">getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span>;</span><br><span class="line">    <span class="comment">//处理客户端异常退出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span>;</span><br><span class="line">    <span class="comment">//处理服务器异常退出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ChatService</span>(); <span class="comment">//单例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储在线用户的通信连接，用户的id， TcpConnectionPtr</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,TcpConnectionPtr&gt; _userConnMap;</span><br><span class="line">    <span class="comment">//存储消息id和其对应的业务处理方法，消息处理器的一个表，写消息id对应的处理操作 </span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,MsgHandler&gt; _msgHandlerMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据操作类对象</span></span><br><span class="line">    UserModel _userModel;</span><br><span class="line">    OfflineMsgModel _offlineMsgModel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义互斥锁，保证_userConnMap的线程安全</span></span><br><span class="line">    mutex _connMutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p><strong>我们完善&#x2F;src&#x2F;server&#x2F;chatservice.cpp</strong></p><p>增加对处理服务器异常退出函数的编写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatservice.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ChatService *<span class="title">ChatService::instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> ChatService service;</span><br><span class="line">    <span class="keyword">return</span> &amp;service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，注册消息以及对应的Handler回调操作</span></span><br><span class="line">ChatService::<span class="built_in">ChatService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用户基本业务管理相关事件处理回调注册</span></span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGIN_MSG,<span class="built_in">bind</span>(&amp;ChatService::login,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG,<span class="built_in">bind</span>(&amp;ChatService::reg,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;ONE_CHAT_MSG,<span class="built_in">bind</span>(&amp;ChatService::oneChat,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器异常，业务重置方法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//把online状态的用户，设置成offline</span></span><br><span class="line">    _userModel.<span class="built_in">resetState</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取消息对应的处理器</span></span><br><span class="line"><span class="function">MsgHandler <span class="title">ChatService::getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录错误日志，msgid没有对应的事件处理回调</span></span><br><span class="line">    <span class="keyword">auto</span> it = _msgHandlerMap.<span class="built_in">find</span>(msgid);</span><br><span class="line">    <span class="keyword">if</span>(it == _msgHandlerMap.<span class="built_in">end</span>())<span class="comment">//找不到 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回一个默认的处理器，空操作，=按值获取 </span></span><br><span class="line">        <span class="keyword">return</span> [=](<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_ERROR &lt;&lt; <span class="string">&quot;msgid:&quot;</span> &lt;&lt; msgid &lt;&lt; <span class="string">&quot; can not find handler!&quot;</span>;<span class="comment">//muduo日志会自动输出endl </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//成功的话 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second; <span class="comment">//返回这个处理器 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理登录业务  id  pwd   pwd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取id号</span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码 </span></span><br><span class="line"></span><br><span class="line">    User user = _userModel.<span class="built_in">query</span>(id); <span class="comment">//查找 这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() == id &amp;&amp; user.<span class="built_in">getPassword</span>() == password) <span class="comment">//查出来了，登录成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>) <span class="comment">//该用户已经登录，不允许重复登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;this account is using,input another&quot;</span>;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串            </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//登录成功，记录用户连接信息，当多个用户登录时，都会操作这个_userConnMap</span></span><br><span class="line">            &#123;</span><br><span class="line">                lock_guard&lt;mutex&gt; <span class="built_in">lock</span>(_connMutex);</span><br><span class="line">                _userConnMap.<span class="built_in">insert</span>(&#123;id,conn&#125;);</span><br><span class="line">            &#125;<span class="comment">//加个作用域，出了这个右括号就自动解锁</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//登录成功，更新用户状态信息 state offline=&gt;online</span></span><br><span class="line">            user.<span class="built_in">setState</span>(<span class="string">&quot;online&quot;</span>);</span><br><span class="line">            _userModel.<span class="built_in">updateState</span>(user); <span class="comment">//这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">            response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">            response[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//查询该用户是否有离线消息</span></span><br><span class="line">            vector&lt;string&gt; vec = _offlineMsgModel.<span class="built_in">query</span>(id); <span class="comment">//查询用户ID</span></span><br><span class="line">            <span class="keyword">if</span>(!vec.<span class="built_in">empty</span>()) <span class="comment">//不为空</span></span><br><span class="line">            &#123;</span><br><span class="line">                response[<span class="string">&quot;offlinemsg&quot;</span>] = vec; <span class="comment">//json库可以和容器之间序列化和反序列化 </span></span><br><span class="line">                <span class="comment">//读取该用户的离线消息后，把该用户的所有离线消息删除掉</span></span><br><span class="line">                _offlineMsgModel.<span class="built_in">remove</span>(id);</span><br><span class="line">            &#125;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串  </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//该用户不存在，用户存在但是密码错误，登录失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;id or password is invalid&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注册业务  name  password</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name = js[<span class="string">&quot;name&quot;</span>];  <span class="comment">//获取名字 </span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码</span></span><br><span class="line"></span><br><span class="line">    User user;  <span class="comment">//创建用户对象 </span></span><br><span class="line">    user.<span class="built_in">setName</span>(name);</span><br><span class="line">    user.<span class="built_in">setPassword</span>(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_userModel.<span class="built_in">insert</span>(user)) <span class="comment">//插入成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册成功</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">        response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理客户端异常退出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    User user;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = _userConnMap.<span class="built_in">begin</span>(); it != _userConnMap.<span class="built_in">end</span>();it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second == conn)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//从map表删除用户的链接信息</span></span><br><span class="line">                user.<span class="built_in">setId</span>(it-&gt;first);</span><br><span class="line">                _userConnMap.<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户的状态信息</span></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        user.<span class="built_in">setState</span>(<span class="string">&quot;offline&quot;</span>);</span><br><span class="line">        _userModel.<span class="built_in">updateState</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理一对一聊天业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> toid = js[<span class="string">&quot;toid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取对方的id号 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>; <span class="comment">//访问连接信息表，要保证线程安全 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(toid);  <span class="comment">//查找对方id号 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it != _userConnMap.<span class="built_in">end</span>()) <span class="comment">//找到了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//toid在线，转发消息  服务器主动推送消息给toid用户</span></span><br><span class="line">            it-&gt;second-&gt;<span class="built_in">send</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toid不在线，存储离线消息</span></span><br><span class="line">    _offlineMsgModel.<span class="built_in">insert</span>(toid,js.<span class="built_in">dump</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们完善&#x2F;include&#x2F;server&#x2F;usermodel.hpp</strong></p><p>增加对函数重置用户信息的函数声明</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> USERMODEL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USERMODEL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;db.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//User表的数据操作类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserModel</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//User表的增加方法</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(User &amp;user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户号码查询用户信息</span></span><br><span class="line">    <span class="function">User <span class="title">query</span><span class="params">(<span class="type">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户的信息</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">updateState</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重置用户信息</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resetState</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>我们完善&#x2F;src&#x2F;server&#x2F;usermodel.cpp</strong></p><p>增加对函数重置用户信息的函数编写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usermodel.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//User表的增加方法</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">UserModel::insert</span><span class="params">(User &amp;user)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.组装sql语句</span></span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">&quot;insert into user(name,password,state) values(&#x27;%s&#x27;,&#x27;%s&#x27;,&#x27;%s&#x27;)&quot;</span>,</span><br><span class="line">    user.<span class="built_in">getName</span>().<span class="built_in">c_str</span>(), user.<span class="built_in">getPassword</span>().<span class="built_in">c_str</span>(), user.<span class="built_in">getState</span>().<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    MySQL mysql;<span class="comment">//定义一个mysql对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>())<span class="comment">//连接成功了 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mysql.<span class="built_in">update</span>(sql))<span class="comment">//更新这个sql语句传进去 </span></span><br><span class="line">        &#123;</span><br><span class="line">              <span class="comment">//获取插入成功的用户数据生成的主键id</span></span><br><span class="line">            user.<span class="built_in">setId</span>(<span class="built_in">mysql_insert_id</span>(mysql.<span class="built_in">getConnection</span>()));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据用户号码查询用户信息</span></span><br><span class="line"><span class="function">User <span class="title">UserModel::query</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">//1.组装sql语句</span></span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">&quot;select * from user where id = &#x27;%d&#x27;&quot;</span>,id);</span><br><span class="line"></span><br><span class="line">    MySQL mysql;<span class="comment">//定义一个mysql对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>())<span class="comment">//连接成功了 </span></span><br><span class="line">    &#123;</span><br><span class="line">        MYSQL_RES * res = mysql.<span class="built_in">query</span>(sql); <span class="comment">//调用mysql数据库的查询 </span></span><br><span class="line">        <span class="keyword">if</span>(res != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MYSQL_ROW row = <span class="built_in">mysql_fetch_row</span>(res); <span class="comment">//获取行，用主键查的，查一行</span></span><br><span class="line">            <span class="keyword">if</span>(row != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                User user;</span><br><span class="line">                user.<span class="built_in">setId</span>(<span class="built_in">atoi</span>(row[<span class="number">0</span>]));</span><br><span class="line">                user.<span class="built_in">setName</span>(row[<span class="number">1</span>]);</span><br><span class="line">                user.<span class="built_in">setPassword</span>(row[<span class="number">2</span>]);</span><br><span class="line">                user.<span class="built_in">setState</span>(row[<span class="number">3</span>]);</span><br><span class="line">                <span class="built_in">mysql_free_result</span>(res);  <span class="comment">//释放资源 </span></span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">User</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">UserModel::updateState</span><span class="params">(User user)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">//1.组装sql语句</span></span><br><span class="line">    <span class="type">int</span> id = user.<span class="built_in">getId</span>();</span><br><span class="line">    string state = user.<span class="built_in">getState</span>();</span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">&quot;update user set state = &#x27;%s&#x27; where id = &#x27;%d&#x27;&quot;</span>,state.<span class="built_in">c_str</span>(),id);</span><br><span class="line"></span><br><span class="line">    MySQL mysql;<span class="comment">//定义一个mysql对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>())<span class="comment">//连接成功了 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mysql.<span class="built_in">update</span>(sql))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UserModel::resetState</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">//1.组装sql语句</span></span><br><span class="line">    string sql = <span class="string">&quot;update user set state = &#x27;offline&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    MySQL mysql; <span class="comment">//定义mysql对象 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>()) <span class="comment">//连接成功</span></span><br><span class="line">    &#123;</span><br><span class="line">        mysql.<span class="built_in">update</span>(sql); <span class="comment">//更新</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/19-01(1).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/19-01(2).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/19-01(3).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/19-01(4).png" alt="本地png图片PictureTest.png"></p><h2 id="20-添加好友业务代码编写和测试"><a href="#20-添加好友业务代码编写和测试" class="headerlink" title="20 添加好友业务代码编写和测试"></a>20 添加好友业务代码编写和测试</h2><p><strong>我们完善public.hpp</strong></p><p>添加对添加好友消息</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PUBLIC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUBLIC_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">是属于server和client的公共文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">EnMsgType</span></span><br><span class="line">&#123;</span><br><span class="line">    LOGIN_MSG = <span class="number">1</span>,<span class="comment">//登录消息</span></span><br><span class="line">    LOGIN_MSG_ACK, <span class="comment">//登录回应消息</span></span><br><span class="line">    REG_MSG, <span class="comment">//注册消息</span></span><br><span class="line">    REG_MSG_ACK, <span class="comment">//注册回应消息</span></span><br><span class="line">    ONE_CHAT_MSG, <span class="comment">//聊天消息</span></span><br><span class="line">    ADD_FRIEND_MSG,<span class="comment">//添加好友消息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !PUBLIC_H</span></span></span><br></pre></td></tr></table></figure><p><strong>我们完善&#x2F;include&#x2F;server&#x2F;chatservice.hpp</strong></p><p>增加头文件#include “friendmodel.hpp”的声明</p><p>增加对添加好友业务函数的声明</p><p>增加数据类操作对象</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CHATSERVICE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHATSERVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span> <span class="comment">//一个消息ID映射一个事件处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpConnection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/base/Logging.h&gt;</span> <span class="comment">//muduo的日志 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usermodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;offlinemsgmodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;friendmodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示处理消息的事件回调方法类型，事件处理器，派发3个东西 </span></span><br><span class="line"><span class="keyword">using</span> MsgHandler = function&lt;<span class="built_in">void</span>(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聊天服务器业务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//获取单例对象的接口函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ChatService *<span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//处理登录业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">//处理注册业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">//处理一对一聊天业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">// 获取消息对应的处理器</span></span><br><span class="line">    <span class="function">MsgHandler <span class="title">getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span>;</span><br><span class="line">    <span class="comment">//处理客户端异常退出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span>;</span><br><span class="line">    <span class="comment">//处理服务器异常退出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//添加好友业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addFriend</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ChatService</span>(); <span class="comment">//单例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储在线用户的通信连接，用户的id， TcpConnectionPtr</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,TcpConnectionPtr&gt; _userConnMap;</span><br><span class="line">    <span class="comment">//存储消息id和其对应的业务处理方法，消息处理器的一个表，写消息id对应的处理操作 </span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,MsgHandler&gt; _msgHandlerMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据操作类对象</span></span><br><span class="line">    UserModel _userModel;</span><br><span class="line">    OfflineMsgModel _offlineMsgModel;</span><br><span class="line">    FriendModel _friendModel;</span><br><span class="line">    <span class="comment">//定义互斥锁，保证_userConnMap的线程安全</span></span><br><span class="line">    mutex _connMutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p><strong>我们完善&#x2F;src&#x2F;server&#x2F;chatservice.cpp</strong></p><p>增加对添加好友业务函数的编写</p><p>增加对登录成功后查询是否有好友</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatservice.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ChatService *<span class="title">ChatService::instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> ChatService service;</span><br><span class="line">    <span class="keyword">return</span> &amp;service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，注册消息以及对应的Handler回调操作</span></span><br><span class="line">ChatService::<span class="built_in">ChatService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用户基本业务管理相关事件处理回调注册</span></span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGIN_MSG,<span class="built_in">bind</span>(&amp;ChatService::login,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG,<span class="built_in">bind</span>(&amp;ChatService::reg,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;ONE_CHAT_MSG,<span class="built_in">bind</span>(&amp;ChatService::oneChat,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;ADD_FRIEND_MSG,<span class="built_in">bind</span>(&amp;ChatService::addFriend,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器异常，业务重置方法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//把online状态的用户，设置成offline</span></span><br><span class="line">    _userModel.<span class="built_in">resetState</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取消息对应的处理器</span></span><br><span class="line"><span class="function">MsgHandler <span class="title">ChatService::getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录错误日志，msgid没有对应的事件处理回调</span></span><br><span class="line">    <span class="keyword">auto</span> it = _msgHandlerMap.<span class="built_in">find</span>(msgid);</span><br><span class="line">    <span class="keyword">if</span>(it == _msgHandlerMap.<span class="built_in">end</span>())<span class="comment">//找不到 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回一个默认的处理器，空操作，=按值获取 </span></span><br><span class="line">        <span class="keyword">return</span> [=](<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_ERROR &lt;&lt; <span class="string">&quot;msgid:&quot;</span> &lt;&lt; msgid &lt;&lt; <span class="string">&quot; can not find handler!&quot;</span>;<span class="comment">//muduo日志会自动输出endl </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//成功的话 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second; <span class="comment">//返回这个处理器 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理登录业务  id  pwd   pwd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取id号</span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码 </span></span><br><span class="line"></span><br><span class="line">    User user = _userModel.<span class="built_in">query</span>(id); <span class="comment">//查找 这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() == id &amp;&amp; user.<span class="built_in">getPassword</span>() == password) <span class="comment">//查出来了，登录成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>) <span class="comment">//该用户已经登录，不允许重复登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;this account is using,input another&quot;</span>;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串            </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//登录成功，记录用户连接信息，当多个用户登录时，都会操作这个_userConnMap</span></span><br><span class="line">            &#123;</span><br><span class="line">                lock_guard&lt;mutex&gt; <span class="built_in">lock</span>(_connMutex);</span><br><span class="line">                _userConnMap.<span class="built_in">insert</span>(&#123;id,conn&#125;);</span><br><span class="line">            &#125;<span class="comment">//加个作用域，出了这个右括号就自动解锁</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//登录成功，更新用户状态信息 state offline=&gt;online</span></span><br><span class="line">            user.<span class="built_in">setState</span>(<span class="string">&quot;online&quot;</span>);</span><br><span class="line">            _userModel.<span class="built_in">updateState</span>(user); <span class="comment">//这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">            response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">            response[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//查询该用户是否有离线消息</span></span><br><span class="line">            vector&lt;string&gt; vec = _offlineMsgModel.<span class="built_in">query</span>(id); <span class="comment">//查询用户ID</span></span><br><span class="line">            <span class="keyword">if</span>(!vec.<span class="built_in">empty</span>()) <span class="comment">//不为空</span></span><br><span class="line">            &#123;</span><br><span class="line">                response[<span class="string">&quot;offlinemsg&quot;</span>] = vec; <span class="comment">//json库可以和容器之间序列化和反序列化 </span></span><br><span class="line">                <span class="comment">//读取该用户的离线消息后，把该用户的所有离线消息删除掉</span></span><br><span class="line">                _offlineMsgModel.<span class="built_in">remove</span>(id);</span><br><span class="line">            &#125;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串  </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//该用户不存在，用户存在但是密码错误，登录失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;id or password is invalid&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注册业务  name  password</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name = js[<span class="string">&quot;name&quot;</span>];  <span class="comment">//获取名字 </span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码</span></span><br><span class="line"></span><br><span class="line">    User user;  <span class="comment">//创建用户对象 </span></span><br><span class="line">    user.<span class="built_in">setName</span>(name);</span><br><span class="line">    user.<span class="built_in">setPassword</span>(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_userModel.<span class="built_in">insert</span>(user)) <span class="comment">//插入成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册成功</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">        response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理客户端异常退出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    User user;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = _userConnMap.<span class="built_in">begin</span>(); it != _userConnMap.<span class="built_in">end</span>();it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second == conn)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//从map表删除用户的链接信息</span></span><br><span class="line">                user.<span class="built_in">setId</span>(it-&gt;first);</span><br><span class="line">                _userConnMap.<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户的状态信息</span></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        user.<span class="built_in">setState</span>(<span class="string">&quot;offline&quot;</span>);</span><br><span class="line">        _userModel.<span class="built_in">updateState</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理一对一聊天业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> toid = js[<span class="string">&quot;toid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取对方的id号 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>; <span class="comment">//访问连接信息表，要保证线程安全 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(toid);  <span class="comment">//查找对方id号 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it != _userConnMap.<span class="built_in">end</span>()) <span class="comment">//找到了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//toid在线，转发消息  服务器主动推送消息给toid用户</span></span><br><span class="line">            it-&gt;second-&gt;<span class="built_in">send</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toid不在线，存储离线消息</span></span><br><span class="line">    _offlineMsgModel.<span class="built_in">insert</span>(toid,js.<span class="built_in">dump</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::addFriend</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;userid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="type">int</span> friendid = js[<span class="string">&quot;friendid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取对方的id号 </span></span><br><span class="line"></span><br><span class="line">    _friendModel.<span class="built_in">insert</span>(userid,friendid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们在include的server下创建文件：friendmodel.hpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> FRIENDMODEL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRIENDMODEL_#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;db.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FriendModel</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//添加好友关系</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> userId,<span class="type">int</span> friendId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回用户好友列表</span></span><br><span class="line">    <span class="function">vector&lt;User&gt; <span class="title">query</span><span class="params">(<span class="type">int</span> userId)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !FRIENDMODEL_H</span></span></span><br></pre></td></tr></table></figure><p><strong>我们在src的server下创建文件：friendmodel.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;friendmodel.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加好友关系</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FriendModel::insert</span><span class="params">(<span class="type">int</span> userId,<span class="type">int</span> friendId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">//1.组装sql语句</span></span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">&quot;insert into friend values(userid,friendid) values(&#x27;%d&#x27;,&#x27;%d&#x27;);&quot;</span>,</span><br><span class="line">    userId,friendId);</span><br><span class="line"></span><br><span class="line">    MySQL mysql;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        mysql.<span class="built_in">update</span>(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回用户好友列表</span></span><br><span class="line"><span class="function">vector&lt;User&gt; <span class="title">FriendModel::query</span><span class="params">(<span class="type">int</span> userId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">//1.组装sql语句</span></span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">&quot;select a.id,a.name,a.state from user a inner join friend b on b.friendid = a.id where b.userid = &#x27;%d&#x27;&quot;</span>,</span><br><span class="line">    userId);</span><br><span class="line"></span><br><span class="line">    MySQL mysql;</span><br><span class="line">    vector&lt;User&gt; vec;</span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        MYSQL_RES * res = mysql.<span class="built_in">query</span>(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(res != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>((row = <span class="built_in">mysql_fetch_row</span>(res)) != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                User user;</span><br><span class="line">                user.<span class="built_in">setId</span>(<span class="built_in">atoi</span>(row[<span class="number">0</span>]));</span><br><span class="line">                user.<span class="built_in">setName</span>(row[<span class="number">1</span>]);</span><br><span class="line">                user.<span class="built_in">setState</span>(row[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">                vec.<span class="built_in">push_back</span>(user);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">mysql_free_result</span>(res);  <span class="comment">//释放资源 </span></span><br><span class="line">            <span class="keyword">return</span> vec;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> vec; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试一下</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/20-01(1).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/20-01(2).png" alt="本地png图片PictureTest.png"></p><p><strong>然后现在用户1先退出，然后重新登录</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/20-01(3).png" alt="本地png图片PictureTest.png"></p><h3 id="20-1-问题"><a href="#20-1-问题" class="headerlink" title="20.1 问题"></a>20.1 问题</h3><p>**问题一:**添加新文件之后，出现未定义的情况</p><p>**解决方法:**重新cmake一下</p><p><strong>找到的bug：</strong>不是自己id号也可以给别人发消息</p><p>解决方法：在一对一聊天业务增加判断只有自己的ID的号才可以去发送消息，不是自己ID号返回只有本ID号才可以发消息给别人或者自己”</p><h2 id="21-群组业务代码编写"><a href="#21-群组业务代码编写" class="headerlink" title="21 群组业务代码编写"></a>21 群组业务代码编写</h2><p>我们在&#x2F;include&#x2F;server&#x2F;下创建新文件夹model，将数据层的头文件移动进去，在&#x2F;src&#x2F;server下创建新文件夹model，见数据层的文件移动进去</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/21-01(1).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/21-01(2).png" alt="本地png图片PictureTest.png"></p><p><strong>在&#x2F;include&#x2F;server&#x2F;model下创建group.hpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GROUP_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GROUP_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;groupuser.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Allgroup表的ORM类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Group</span>(<span class="type">int</span> id = <span class="number">-1</span>,string name = <span class="string">&quot;&quot;</span>,string desc = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setId</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;<span class="keyword">this</span>-&gt;id = id; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span> </span>&#123;<span class="keyword">this</span>-&gt;name = name;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setDesc</span><span class="params">(string desc)</span> </span>&#123;<span class="keyword">this</span>-&gt;desc = desc;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;id;&#125;</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;&#125;</span><br><span class="line">    <span class="function">string <span class="title">getDesc</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;desc;&#125;   </span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;GroupUser&gt; &amp;<span class="title">getUsers</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;users;&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">    string desc;   <span class="comment">//组的功能描述</span></span><br><span class="line">    vector&lt;GroupUser&gt; users;  <span class="comment">//组的成员</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !GROUP_H</span></span></span><br></pre></td></tr></table></figure><p><strong>在&#x2F;include&#x2F;server&#x2F;model下创建groupuser.hpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GROUPUSER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GROUPUSER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GroupUser</span> : <span class="keyword">public</span> User</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setRole</span><span class="params">(string role)</span> </span>&#123;<span class="keyword">this</span>-&gt;grouprole = role;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getRole</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;grouprole;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string grouprole;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>在&#x2F;include&#x2F;server&#x2F;model下创建groupmodel.hpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GROUPMODEL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GROUPMODEL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;groupuser.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gruop.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;db.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GroupModel</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//创建群组</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">createGroup</span><span class="params">(Group &amp; group)</span></span>;</span><br><span class="line">    <span class="comment">//加入群组</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addGroup</span><span class="params">(<span class="type">int</span> userid,<span class="type">int</span> groupid,string role)</span></span>;</span><br><span class="line">    <span class="comment">//查询用户所在群组信息  在客户端呈现</span></span><br><span class="line">    <span class="function">vector&lt;Group&gt; <span class="title">queryGroups</span><span class="params">(<span class="type">int</span> userid)</span></span>;</span><br><span class="line">    <span class="comment">//群聊。根据指定的groupid查询群组用户id列表，</span></span><br><span class="line">    <span class="comment">//除userid自己，主要用户群聊业务给群组其它成员群发消息</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">queryGroupUsers</span><span class="params">(<span class="type">int</span> userid,<span class="type">int</span> groupid)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>在&#x2F;src&#x2F;server&#x2F;model下创建groupmodel.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;groupmodel.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建群组</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GroupModel::createGroup</span><span class="params">(Group &amp;group)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">&quot;insert into group(groupname,groupdesc) values(&#x27;%s&#x27;,&#x27;%s&#x27;)&quot;</span>,</span><br><span class="line">    group.<span class="built_in">getName</span>().<span class="built_in">c_str</span>(),group.<span class="built_in">getDesc</span>().<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    MySQL mysql;</span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mysql.<span class="built_in">update</span>(sql))</span><br><span class="line">        &#123;</span><br><span class="line">            group.<span class="built_in">setId</span>(<span class="built_in">mysql_insert_id</span>(mysql.<span class="built_in">getConnection</span>()));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加入群组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GroupModel::addGroup</span><span class="params">(<span class="type">int</span> userid,<span class="type">int</span> groupid,string role)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">&quot;insert into groupuser(groupid,userid,grouprole)\ </span></span><br><span class="line"><span class="string">    values(&#x27;%d&#x27;,&#x27;%d&#x27;,&#x27;%s&#x27;)&quot;</span>,groupid,userid,role);</span><br><span class="line"></span><br><span class="line">    MySQL mysql;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        mysql.<span class="built_in">update</span>(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//查询用户所在群组信息  在客户端呈现 </span></span><br><span class="line"><span class="function">vector&lt;Group&gt; <span class="title">GroupModel::queryGroups</span><span class="params">(<span class="type">int</span> userid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 先根据userid在groupuser表中查询出该用户所属的群组信息</span></span><br><span class="line"><span class="comment">    2. 在根据群组信息，查询属于该群组的所有用户的userid，并且和user表进行多表联合查询，查出用户的详细信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">&quot;select a.id,a.groupname,a.groupdesc from allgroup a inner\</span></span><br><span class="line"><span class="string">    join groupuser b on a.id = b.groupid where b.userid = &#x27;%d&#x27;&quot;</span>,userid);</span><br><span class="line">    <span class="comment">//把指定用户的所在的群组信息全部描述出来</span></span><br><span class="line">    MySQL mysql;</span><br><span class="line"></span><br><span class="line">    vector&lt;Group&gt; groupVec;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        MYSQL_RES * res = mysql.<span class="built_in">query</span>(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(res != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MYSQL_ROW row;</span><br><span class="line">            <span class="comment">//查出userid所有的群组的信息</span></span><br><span class="line">            <span class="keyword">while</span>((row = <span class="built_in">mysql_fetch_row</span>(res)) != <span class="literal">nullptr</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                Group group;</span><br><span class="line"></span><br><span class="line">                group.<span class="built_in">setId</span>(<span class="built_in">atoi</span>(row[<span class="number">0</span>]));</span><br><span class="line">                group.<span class="built_in">setName</span>(row[<span class="number">1</span>]);</span><br><span class="line">                group.<span class="built_in">setDesc</span>(row[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">                groupVec.<span class="built_in">push_back</span>(group);  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">mysql_free_result</span>(res); <span class="comment">//释放资源 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询群组的用户信息</span></span><br><span class="line">    <span class="keyword">for</span>(Group &amp;group : groupVec)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sprintf</span>(sql,<span class="string">&quot;select a.id,a.name,a.state,b.grouprole from user \</span></span><br><span class="line"><span class="string">        a inner join groupuser b on a.id = b.userid where b.groupid\</span></span><br><span class="line"><span class="string">        = &#x27;%d&#x27;&quot;</span>,group.<span class="built_in">getId</span>());</span><br><span class="line"></span><br><span class="line">        MySQL mysql;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            MYSQL_RES *res = mysql.<span class="built_in">query</span>(sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(res != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>((row = <span class="built_in">mysql_fetch_row</span>(res)) != <span class="literal">nullptr</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    GroupUser user;</span><br><span class="line">                    user.<span class="built_in">setId</span>(<span class="built_in">atoi</span>(row[<span class="number">0</span>]));</span><br><span class="line">                    user.<span class="built_in">setName</span>(row[<span class="number">1</span>]);</span><br><span class="line">                    user.<span class="built_in">setState</span>(row[<span class="number">2</span>]);</span><br><span class="line">                    user.<span class="built_in">setRole</span>(row[<span class="number">3</span>]);</span><br><span class="line">                    group.<span class="built_in">getUsers</span>().<span class="built_in">push_back</span>(user);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">mysql_free_result</span>(res); <span class="comment">//释放资源</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> groupVec;<span class="comment">//这个东西存着用户的所有群组和所有群组里的用户信息 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据指定的groupid查询群组用户id列表</span></span><br><span class="line"><span class="comment">//除userid自己，主要用户群聊业务给群组其它成员群发消息</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">GroupModel::queryGroupUsers</span><span class="params">(<span class="type">int</span> userid,<span class="type">int</span> groupid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(sql, <span class="string">&quot;select userid from groupuser \</span></span><br><span class="line"><span class="string">    where groupid = %d and userid != %d&quot;</span>, groupid, userid);</span><br><span class="line"></span><br><span class="line">    MySQL mysql;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; idVec;</span><br><span class="line">    <span class="keyword">if</span>(mysql.<span class="built_in">connect</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        MYSQL_RES *res = mysql.<span class="built_in">query</span>(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(res != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MYSQL_ROW row;</span><br><span class="line">            <span class="keyword">while</span>((row = <span class="built_in">mysql_fetch_row</span>(res)) != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                idVec.<span class="built_in">push_back</span>(<span class="built_in">atoi</span>(row[<span class="number">0</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> idVec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>完善&#x2F;include&#x2F;public.hpp</strong></p><p>增加创建群组、加入群组、群聊天枚举</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PUBLIC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUBLIC_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">是属于server和client的公共文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">EnMsgType</span></span><br><span class="line">&#123;</span><br><span class="line">    LOGIN_MSG = <span class="number">1</span>,<span class="comment">//登录消息</span></span><br><span class="line">    LOGIN_MSG_ACK, <span class="comment">//登录回应消息</span></span><br><span class="line">    REG_MSG, <span class="comment">//注册消息</span></span><br><span class="line">    REG_MSG_ACK, <span class="comment">//注册回应消息</span></span><br><span class="line">    ONE_CHAT_MSG, <span class="comment">//聊天消息</span></span><br><span class="line">    ADD_FRIEND_MSG,<span class="comment">//添加好友消息</span></span><br><span class="line"></span><br><span class="line">    CREATE_GROUP_MSG,<span class="comment">//创建群组</span></span><br><span class="line">    ADD_GROUP_MSG,<span class="comment">//加入群组</span></span><br><span class="line">    GROUP_CHAT_MSG,<span class="comment">//群聊天</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !PUBLIC_H</span></span></span><br></pre></td></tr></table></figure><p><strong>完善&#x2F;include&#x2F;server&#x2F;chatservice.hpp</strong></p><p>增加对创建群组业务、加入群组业务、群组聊天业务的声明、数据操作类对象</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CHATSERVICE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHATSERVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span> <span class="comment">//一个消息ID映射一个事件处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpConnection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/base/Logging.h&gt;</span> <span class="comment">//muduo的日志 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usermodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;offlinemsgmodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;friendmodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;groupmodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示处理消息的事件回调方法类型，事件处理器，派发3个东西 </span></span><br><span class="line"><span class="keyword">using</span> MsgHandler = function&lt;<span class="built_in">void</span>(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聊天服务器业务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//获取单例对象的接口函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ChatService *<span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理登录业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理注册业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理一对一聊天业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取消息对应的处理器</span></span><br><span class="line">    <span class="function">MsgHandler <span class="title">getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理客户端异常退出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理服务器异常退出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加好友业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addFriend</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建群组业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">createGroup</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入群组业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addGroup</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//群组聊天业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">groupChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ChatService</span>(); <span class="comment">//单例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储在线用户的通信连接，用户的id， TcpConnectionPtr</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,TcpConnectionPtr&gt; _userConnMap;</span><br><span class="line">    <span class="comment">//存储消息id和其对应的业务处理方法，消息处理器的一个表，写消息id对应的处理操作 </span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,MsgHandler&gt; _msgHandlerMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据操作类对象</span></span><br><span class="line">    UserModel _userModel;</span><br><span class="line">    OfflineMsgModel _offlineMsgModel;</span><br><span class="line">    FriendModel _friendModel;</span><br><span class="line">    GroupModel _groupModel;</span><br><span class="line">    <span class="comment">//定义互斥锁，保证_userConnMap的线程安全</span></span><br><span class="line">    mutex _connMutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p><strong>完善&#x2F;src&#x2F;server&#x2F;chatservice.hpp</strong></p><p>增加对创建群组业务、加入群组业务、群组聊天业务的编写</p><p>增加登录成功后查询该用户的群组信息并返回</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatservice.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ChatService *<span class="title">ChatService::instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> ChatService service;</span><br><span class="line">    <span class="keyword">return</span> &amp;service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，注册消息以及对应的Handler回调操作</span></span><br><span class="line">ChatService::<span class="built_in">ChatService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用户基本业务管理相关事件处理回调注册</span></span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGIN_MSG,<span class="built_in">bind</span>(&amp;ChatService::login,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG,<span class="built_in">bind</span>(&amp;ChatService::reg,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;ONE_CHAT_MSG,<span class="built_in">bind</span>(&amp;ChatService::oneChat,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;ADD_FRIEND_MSG,<span class="built_in">bind</span>(&amp;ChatService::addFriend,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;CREATE_GROUP_MSG,<span class="built_in">bind</span>(&amp;ChatService::createGroup,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;ADD_GROUP_MSG,<span class="built_in">bind</span>(&amp;ChatService::addGroup,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;GROUP_CHAT_MSG,<span class="built_in">bind</span>(&amp;ChatService::groupChat,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器异常，业务重置方法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//把online状态的用户，设置成offline</span></span><br><span class="line">    _userModel.<span class="built_in">resetState</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取消息对应的处理器</span></span><br><span class="line"><span class="function">MsgHandler <span class="title">ChatService::getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录错误日志，msgid没有对应的事件处理回调</span></span><br><span class="line">    <span class="keyword">auto</span> it = _msgHandlerMap.<span class="built_in">find</span>(msgid);</span><br><span class="line">    <span class="keyword">if</span>(it == _msgHandlerMap.<span class="built_in">end</span>())<span class="comment">//找不到 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回一个默认的处理器，空操作，=按值获取 </span></span><br><span class="line">        <span class="keyword">return</span> [=](<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_ERROR &lt;&lt; <span class="string">&quot;msgid:&quot;</span> &lt;&lt; msgid &lt;&lt; <span class="string">&quot; can not find handler!&quot;</span>;<span class="comment">//muduo日志会自动输出endl </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//成功的话 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second; <span class="comment">//返回这个处理器 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理登录业务  id  pwd   pwd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取id号</span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码 </span></span><br><span class="line"></span><br><span class="line">    User user = _userModel.<span class="built_in">query</span>(id); <span class="comment">//查找 这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() == id &amp;&amp; user.<span class="built_in">getPassword</span>() == password) <span class="comment">//查出来了，登录成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>) <span class="comment">//该用户已经登录，不允许重复登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;this account is using,input another&quot;</span>;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串            </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//登录成功，记录用户连接信息，当多个用户登录时，都会操作这个_userConnMap</span></span><br><span class="line">            &#123;</span><br><span class="line">                lock_guard&lt;mutex&gt; <span class="built_in">lock</span>(_connMutex);</span><br><span class="line">                _userConnMap.<span class="built_in">insert</span>(&#123;id,conn&#125;);</span><br><span class="line">            &#125;<span class="comment">//加个作用域，出了这个右括号就自动解锁</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//登录成功，更新用户状态信息 state offline=&gt;online</span></span><br><span class="line">            user.<span class="built_in">setState</span>(<span class="string">&quot;online&quot;</span>);</span><br><span class="line">            _userModel.<span class="built_in">updateState</span>(user); <span class="comment">//这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">            response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">            response[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//查询该用户是否有离线消息</span></span><br><span class="line">            vector&lt;string&gt; vec = _offlineMsgModel.<span class="built_in">query</span>(id); <span class="comment">//查询用户ID</span></span><br><span class="line">            <span class="keyword">if</span>(!vec.<span class="built_in">empty</span>()) <span class="comment">//不为空</span></span><br><span class="line">            &#123;</span><br><span class="line">                response[<span class="string">&quot;offlinemsg&quot;</span>] = vec; <span class="comment">//json库可以和容器之间序列化和反序列化 </span></span><br><span class="line">                <span class="comment">//读取该用户的离线消息后，把该用户的所有离线消息删除掉</span></span><br><span class="line">                _offlineMsgModel.<span class="built_in">remove</span>(id);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//查询该用户的好友信息并返回</span></span><br><span class="line">            vector&lt;User&gt; userVec = _friendModel.<span class="built_in">query</span>(id);</span><br><span class="line">            <span class="keyword">if</span>(!userVec.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                vector&lt;string&gt; vec2;</span><br><span class="line">                <span class="keyword">for</span>(User &amp;user:userVec)</span><br><span class="line">                &#123;</span><br><span class="line">                    json js;</span><br><span class="line">                    js[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">                    js[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">                    js[<span class="string">&quot;state&quot;</span>] = user.<span class="built_in">getState</span>();</span><br><span class="line">                    vec2.<span class="built_in">push_back</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">                &#125;</span><br><span class="line">                response[<span class="string">&quot;friends&quot;</span>] = vec2;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//查询该用户的群组信息并返回</span></span><br><span class="line">            vector&lt;Group&gt; groupuserVec = _groupModel.<span class="built_in">queryGroups</span>(id);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!groupuserVec.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                vector&lt;string&gt; groupV;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(Group &amp;group:groupuserVec)</span><br><span class="line">                &#123;</span><br><span class="line">                    json grpjson;</span><br><span class="line">                    grpjson[<span class="string">&quot;id&quot;</span>] = group.<span class="built_in">getId</span>();</span><br><span class="line">                    grpjson[<span class="string">&quot;groupname&quot;</span>] = group.<span class="built_in">getName</span>();</span><br><span class="line">                    grpjson[<span class="string">&quot;groupdesc&quot;</span>] = group.<span class="built_in">getDesc</span>();</span><br><span class="line"></span><br><span class="line">                    vector&lt;string&gt; userV;</span><br><span class="line">                    <span class="keyword">for</span>(GroupUser &amp;user:group.<span class="built_in">getUsers</span>())</span><br><span class="line">                    &#123;</span><br><span class="line">                        json js;</span><br><span class="line">                        js[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">                        js[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">                        js[<span class="string">&quot;state&quot;</span>] = user.<span class="built_in">getState</span>();</span><br><span class="line">                        js[<span class="string">&quot;role&quot;</span>] = user.<span class="built_in">getRole</span>();</span><br><span class="line">                        userV.<span class="built_in">push_back</span>(js);</span><br><span class="line">                    &#125;</span><br><span class="line">                    grpjson[<span class="string">&quot;users&quot;</span>] = userV;</span><br><span class="line">                    groupV.<span class="built_in">push_back</span>(grpjson);</span><br><span class="line">                &#125;</span><br><span class="line">                response[<span class="string">&quot;groups&quot;</span>] = groupV;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//该用户不存在，用户存在但是密码错误，登录失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;id or password is invalid&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注册业务  name  password</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name = js[<span class="string">&quot;name&quot;</span>];  <span class="comment">//获取名字 </span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码</span></span><br><span class="line"></span><br><span class="line">    User user;  <span class="comment">//创建用户对象 </span></span><br><span class="line">    user.<span class="built_in">setName</span>(name);</span><br><span class="line">    user.<span class="built_in">setPassword</span>(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_userModel.<span class="built_in">insert</span>(user)) <span class="comment">//插入成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册成功</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">        response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理客户端异常退出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    User user;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = _userConnMap.<span class="built_in">begin</span>(); it != _userConnMap.<span class="built_in">end</span>();it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second == conn)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//从map表删除用户的链接信息</span></span><br><span class="line">                user.<span class="built_in">setId</span>(it-&gt;first);</span><br><span class="line">                _userConnMap.<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户的状态信息</span></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        user.<span class="built_in">setState</span>(<span class="string">&quot;offline&quot;</span>);</span><br><span class="line">        _userModel.<span class="built_in">updateState</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理一对一聊天业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取本人的id号</span></span><br><span class="line">    <span class="type">int</span> toid = js[<span class="string">&quot;toid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取对方的id号</span></span><br><span class="line">    </span><br><span class="line">    User user = _userModel.<span class="built_in">query</span>(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有自己的ID的号才可以去发送消息</span></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() == id &amp;&amp; user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>; <span class="comment">//访问连接信息表，要保证线程安全 </span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(toid);  <span class="comment">//查找对方id号 </span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(it != _userConnMap.<span class="built_in">end</span>()) <span class="comment">//找到了</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//toid在线，转发消息  服务器主动推送消息给toid用户</span></span><br><span class="line">                it-&gt;second-&gt;<span class="built_in">send</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//toid不在线，存储离线消息</span></span><br><span class="line">        _offlineMsgModel.<span class="built_in">insert</span>(toid,js.<span class="built_in">dump</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//注册失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;只有本ID号才可以发消息给别人或者自己&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加好友业务 格式： msgid id friendid</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::addFriend</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//当前用户的id </span></span><br><span class="line">    <span class="type">int</span> friendid = js[<span class="string">&quot;friendid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取对方的id号 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储好友信息</span></span><br><span class="line">    _friendModel.<span class="built_in">insert</span>(userid,friendid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建群组业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::createGroup</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//创建群的用户的id </span></span><br><span class="line">    string name = js[<span class="string">&quot;groupname&quot;</span>];</span><br><span class="line">    string desc = js[<span class="string">&quot;groupdesc&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储新创建的群组信息</span></span><br><span class="line">    Group group;</span><br><span class="line">    group.<span class="built_in">setName</span>(name);</span><br><span class="line">    group.<span class="built_in">setDesc</span>(desc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_groupModel.<span class="built_in">createGroup</span>(group))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//存储群组创建人信息</span></span><br><span class="line">        _groupModel.<span class="built_in">addGroup</span>(userid,group.<span class="built_in">getId</span>(),<span class="string">&quot;creator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加入群组业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::addGroup</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="type">int</span> groupid = js[<span class="string">&quot;groupid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    _groupModel.<span class="built_in">addGroup</span>(userid,groupid,<span class="string">&quot;normal&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//群组聊天业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::groupChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="type">int</span> groupid = js[<span class="string">&quot;groupid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; useridVec = _groupModel.<span class="built_in">queryGroupUsers</span>(userid, groupid);</span><br><span class="line">    <span class="comment">//查询这个用户所在群组的其他用户id </span></span><br><span class="line"></span><br><span class="line">    <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;<span class="comment">//不允许其他人在map里面增删改查 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> id:useridVec)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(id);</span><br><span class="line">        <span class="keyword">if</span>(it != _userConnMap.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            it-&gt;second-&gt;<span class="built_in">send</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _offlineMsgModel.<span class="built_in">insert</span>(id,js.<span class="built_in">dump</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/21-01(3).png" alt="本地png图片PictureTest.png"></p><h2 id="22-客户端开发一首页功能开发以及测试"><a href="#22-客户端开发一首页功能开发以及测试" class="headerlink" title="22 客户端开发一首页功能开发以及测试"></a>22 客户端开发一首页功能开发以及测试</h2><p><strong>我们增加一个文件夹&#x2F;src&#x2F;client</strong></p><p><strong>我们对&#x2F;src下的CMakeLists.txt进行修改</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">add_subdirectory</span>(server)</span><br><span class="line"><span class="built_in">add_subdirectory</span>(client)</span><br></pre></td></tr></table></figure><p><strong>我们在&#x2F;src&#x2F;client&#x2F;创建CMakeLists.txt</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 把当前路径下的所有源文件名字放入变量名SRC_LIST里面</span><br><span class="line">aux_source_directory(. SRC_LIST)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 表示生成可执行文件ChatServer，由SRC_LIST变量所定义的源文件</span><br><span class="line">add_executable(ChatClient $&#123;SRC_LIST&#125;)</span><br><span class="line"></span><br><span class="line"># 指定可执行文件链接时需要依赖的库文件</span><br><span class="line">target_link_libraries(ChatClient pthread)</span><br></pre></td></tr></table></figure><p><strong>我们在&#x2F;src&#x2F;client下创建main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gruop.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;groupuser.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录当前登录用户的信息</span></span><br><span class="line">User g_currentUser;</span><br><span class="line"><span class="comment">// 记录当前用户朋友的信息</span></span><br><span class="line">vector&lt;User&gt; g_currentFriendList; </span><br><span class="line"><span class="comment">// 记录当前用户群组的信息</span></span><br><span class="line">vector&lt;Group&gt; g_currentGroupList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showCurrentUserData</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聊天客户端程序实现，main线程用作发送线程，子线程用作接受线程</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;command invalid example : ./ChatClient 127.0.0.1 6000&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建client端的socket</span></span><br><span class="line">    <span class="type">int</span> clientfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM , <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == clientfd)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;socket create error&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint16_t</span> port = <span class="built_in">atoi</span>(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//填写client需要连接的server信息ip+port</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv,<span class="number">0</span>,<span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line">    serv.sin_family = AF_INET;</span><br><span class="line">    serv.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">    serv.sin_addr.s_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// client和server进行连接</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">connect</span>(clientfd,(<span class="type">const</span> sockaddr *)&amp;serv,<span class="built_in">sizeof</span>(sockaddr_in)))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;connect server error&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">close</span>(clientfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//main线程用于接受用户输入，负责发送数据</span></span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 显示首页面菜单 登录、注册、退出</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;========================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1.login&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2.register&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;3.quit&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;========================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;choice:&quot;</span>;</span><br><span class="line">        <span class="type">int</span> choice = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; choice;</span><br><span class="line">        cin.<span class="built_in">get</span>(); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">            <span class="type">char</span> password[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;userid:&quot;</span>;</span><br><span class="line">            cin &gt;&gt; id;</span><br><span class="line">            cin.<span class="built_in">get</span>();  <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;userpassword:&quot;</span>;</span><br><span class="line">            cin.<span class="built_in">getline</span>(password,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">            json js;</span><br><span class="line">            js[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG;</span><br><span class="line">            js[<span class="string">&quot;id&quot;</span>] = id;</span><br><span class="line">            js[<span class="string">&quot;password&quot;</span>] = password;</span><br><span class="line">            string request = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,request.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(request.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                cerr &lt;&lt; <span class="string">&quot;send login msg error:&quot;</span> &lt;&lt; request &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">recv</span>(clientfd,buffer,<span class="number">1024</span>,<span class="number">0</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    cerr &lt;&lt; <span class="string">&quot;recv login msg error&quot;</span> &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    json responsejs = json::<span class="built_in">parse</span>(buffer);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(<span class="number">0</span> != responsejs[<span class="string">&quot;errno&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;()) <span class="comment">//登录失败</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cerr &lt;&lt; responsejs[<span class="string">&quot;errmsg&quot;</span>] &lt;&lt; endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="comment">//登录成功</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cout &lt;&lt; responsejs[<span class="string">&quot;errmsg&quot;</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 记录当前用户的id和name</span></span><br><span class="line">                        g_currentUser.<span class="built_in">setId</span>(responsejs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                        g_currentUser.<span class="built_in">setName</span>(responsejs[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 记录当前用户的好友列表信息</span></span><br><span class="line">                        <span class="keyword">if</span>(responsejs.<span class="built_in">contains</span>(<span class="string">&quot;friends&quot;</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            vector&lt;string&gt; vec = responsejs[<span class="string">&quot;friends&quot;</span>];</span><br><span class="line">                            <span class="keyword">for</span>(string &amp;str:vec)</span><br><span class="line">                            &#123;</span><br><span class="line">                                json js = json::<span class="built_in">parse</span>(str);</span><br><span class="line">                                User user;</span><br><span class="line">                                user.<span class="built_in">setId</span>(js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                                user.<span class="built_in">setName</span>(js[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                                user.<span class="built_in">setState</span>(js[<span class="string">&quot;state&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                                g_currentFriendList.<span class="built_in">push_back</span>(user);</span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(responsejs.<span class="built_in">contains</span>(<span class="string">&quot;groups&quot;</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            vector&lt;string&gt; vec1 = responsejs[<span class="string">&quot;groups&quot;</span>];</span><br><span class="line">                            <span class="keyword">for</span>(string &amp;str1:vec1)</span><br><span class="line">                            &#123;</span><br><span class="line">                                json grpjs = json::<span class="built_in">parse</span>(str1);</span><br><span class="line">                                Group group;</span><br><span class="line">                                group.<span class="built_in">setId</span>(grpjs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                                group.<span class="built_in">setName</span>(grpjs[<span class="string">&quot;groupname&quot;</span>]);</span><br><span class="line">                                group.<span class="built_in">setDesc</span>(grpjs[<span class="string">&quot;groupdesc&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                                vector&lt;string&gt; vec2 = grpjs[<span class="string">&quot;users&quot;</span>];</span><br><span class="line">                                <span class="keyword">for</span>(string &amp;str2:vec2)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    json js = json::<span class="built_in">parse</span>(str2);</span><br><span class="line">                                    GroupUser user;</span><br><span class="line">                                    user.<span class="built_in">setId</span>(js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                                    user.<span class="built_in">setName</span>(js[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                                    user.<span class="built_in">setState</span>(js[<span class="string">&quot;state&quot;</span>]);</span><br><span class="line">                                    user.<span class="built_in">setRole</span>(js[<span class="string">&quot;role&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                                    group.<span class="built_in">getUsers</span>().<span class="built_in">push_back</span>(user);</span><br><span class="line">                                &#125;</span><br><span class="line">                                g_currentGroupList.<span class="built_in">push_back</span>(group);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line">                        <span class="built_in">showCurrentUserData</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cin.<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> name[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="type">char</span> password[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;name:&quot;</span> ;</span><br><span class="line">            cin.<span class="built_in">getline</span>(name,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;password:&quot;</span>;</span><br><span class="line">            cin.<span class="built_in">getline</span>(password,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">            json js;</span><br><span class="line">            js[<span class="string">&quot;msgid&quot;</span>] = REG_MSG;</span><br><span class="line">            js[<span class="string">&quot;name&quot;</span>] = name;</span><br><span class="line">            js[<span class="string">&quot;password&quot;</span>] = password;</span><br><span class="line">            string request = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,request.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(request.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                cerr &lt;&lt; <span class="string">&quot;send reg msg error:&quot;</span> &lt;&lt; request &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="type">int</span> len = <span class="built_in">recv</span>(clientfd,buffer,<span class="number">1024</span>,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">-1</span> == len)</span><br><span class="line">                &#123;</span><br><span class="line">                    cerr &lt;&lt; <span class="string">&quot;recv reg response error&quot;</span> &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                &#123;</span><br><span class="line">                    json responsejs = json::<span class="built_in">parse</span>(buffer);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="number">0</span> != responsejs[<span class="string">&quot;errno&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;())</span><br><span class="line">                    &#123;</span><br><span class="line">                        cerr &lt;&lt; name &lt;&lt; <span class="string">&quot; is already exist , register error !&quot;</span> &lt;&lt; endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="comment">//注册成功</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cerr &lt;&lt; <span class="string">&quot;register success , userid is &quot;</span> </span><br><span class="line">                        &lt;&lt; responsejs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;() &lt;&lt; </span><br><span class="line">                        <span class="string">&quot; , dot not forget it !&quot;</span> &lt;&lt; endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;</span><br><span class="line">        cin.<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">//quit业务</span></span><br><span class="line">            <span class="built_in">close</span>(clientfd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;invalid input!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showCurrentUserData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;======================login user======================&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;current login user =&gt; id:&quot;</span> &lt;&lt; g_currentUser.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; name:&quot;</span> </span><br><span class="line">    &lt;&lt; g_currentUser.<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------------friend list---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(!g_currentFriendList.<span class="built_in">empty</span>()) <span class="comment">//如果好友列表不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(User &amp;user:g_currentFriendList)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个好友信息:&quot;</span> &lt;&lt; user.<span class="built_in">getId</span>() </span><br><span class="line">            &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getState</span>() &lt;&lt; endl;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------------group list---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(!g_currentGroupList.<span class="built_in">empty</span>())<span class="comment">//群组信息不为空，才打印出来</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(Group &amp;group:g_currentGroupList)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; group.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; group.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> </span><br><span class="line">            &lt;&lt; group.<span class="built_in">getDesc</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(GroupUser &amp;user:group.<span class="built_in">getUsers</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个人信息:&quot;</span> &lt;&lt; user.<span class="built_in">getId</span>() </span><br><span class="line">                &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getState</span>() &lt;&lt; endl;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p><strong>首先向mysql中的allgroup和groupuserc插入数据</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/22-01(1).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/22-01(2).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/22-01(3).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/22-01(4).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/22-01(5).png" alt="本地png图片PictureTest.png"></p><h3 id="22-1-问题"><a href="#22-1-问题" class="headerlink" title="22.1 问题"></a>22.1 问题</h3><p><strong>1 strlen和sizeof的区别</strong></p><p>(1)strlen 是函数，sizeof 是运算符。</p><p>(2)strlen 测量的是字符的实际长度，以’\0’ 结束（不包含’\0’ ）。而sizeof 测量的是字符的分配大小，如果未分配大小，则遇到’\0’ 结束（包含’\0’ ，也就是strlen</p><p>测量的长度加1），如果已经分配内存大小，返回的就是分配的内存大小。</p><p><strong>2 linux不能使用system(“pause”)可以用cin.get()但还是没有system(“pause”)好</strong></p><p><strong>3 注意cin.get()和cin.getline()的区别</strong></p><p><strong>4 传输至网路层需要序列化，千万不要忘记</strong></p><h2 id="23-客户端开发二添加好友和聊天功能开发"><a href="#23-客户端开发二添加好友和聊天功能开发" class="headerlink" title="23 客户端开发二添加好友和聊天功能开发"></a><strong>23 客户端开发二添加好友和聊天功能开发</strong></h2><p><strong>在src&#x2F;client&#x2F;main.cpp下</strong></p><p>启动新线程负责接受数据，然后进入聊天主菜单页面。完善对新线程接受数据代码的编写，对聊天主菜单页面的编写。聊天主菜单页面，首先将系统所支持的命令</p><p>打印出来，再根据输入的命令，分别调用相应的函数进行处理。完成对添加好友、聊天功能、help函数的编写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gruop.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;groupuser.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录当前登录用户的信息</span></span><br><span class="line">User g_currentUser;</span><br><span class="line"><span class="comment">// 记录当前用户朋友的信息</span></span><br><span class="line">vector&lt;User&gt; g_currentFriendList; </span><br><span class="line"><span class="comment">// 记录当前用户群组的信息</span></span><br><span class="line">vector&lt;Group&gt; g_currentGroupList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取系统时间（聊天信息需要添加时间信息）</span></span><br><span class="line"><span class="function">string <span class="title">getCurrentTime</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showCurrentUserData</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收线程 控制台应用程序，接收用户的手动输入，用户不输入cin就阻塞住，所以要2个线程 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readTaskHandler</span><span class="params">(<span class="type">int</span> clientfd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mainMenu</span><span class="params">(<span class="type">int</span> clientfd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聊天客户端程序实现，main线程用作发送线程，子线程用作接受线程</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;command invalid example : ./ChatClient 127.0.0.1 6000&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建client端的socket</span></span><br><span class="line">    <span class="type">int</span> clientfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM , <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == clientfd)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;socket create error&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint16_t</span> port = <span class="built_in">atoi</span>(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//填写client需要连接的server信息ip+port</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv,<span class="number">0</span>,<span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line">    serv.sin_family = AF_INET;</span><br><span class="line">    serv.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">    serv.sin_addr.s_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// client和server进行连接</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">connect</span>(clientfd,(<span class="type">const</span> sockaddr *)&amp;serv,<span class="built_in">sizeof</span>(sockaddr_in)))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;connect server error&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">close</span>(clientfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//main线程用于接受用户输入，负责发送数据</span></span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 显示首页面菜单 登录、注册、退出</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;========================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1.login&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2.register&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;3.quit&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;========================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;choice:&quot;</span>;</span><br><span class="line">        <span class="type">int</span> choice = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; choice;</span><br><span class="line">        cin.<span class="built_in">get</span>(); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">            <span class="type">char</span> password[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;userid:&quot;</span>;</span><br><span class="line">            cin &gt;&gt; id;</span><br><span class="line">            cin.<span class="built_in">get</span>();  <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;userpassword:&quot;</span>;</span><br><span class="line">            cin.<span class="built_in">getline</span>(password,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">            json js;</span><br><span class="line">            js[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG;</span><br><span class="line">            js[<span class="string">&quot;id&quot;</span>] = id;</span><br><span class="line">            js[<span class="string">&quot;password&quot;</span>] = password;</span><br><span class="line">            string request = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,request.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(request.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                cerr &lt;&lt; <span class="string">&quot;send login msg error:&quot;</span> &lt;&lt; request &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">recv</span>(clientfd,buffer,<span class="number">1024</span>,<span class="number">0</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    cerr &lt;&lt; <span class="string">&quot;recv login msg error&quot;</span> &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    json responsejs = json::<span class="built_in">parse</span>(buffer);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(<span class="number">0</span> != responsejs[<span class="string">&quot;errno&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;()) <span class="comment">//登录失败</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cerr &lt;&lt; responsejs[<span class="string">&quot;errmsg&quot;</span>] &lt;&lt; endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="comment">//登录成功</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cout &lt;&lt; responsejs[<span class="string">&quot;errmsg&quot;</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 记录当前用户的id和name</span></span><br><span class="line">                        g_currentUser.<span class="built_in">setId</span>(responsejs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                        g_currentUser.<span class="built_in">setName</span>(responsejs[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 记录当前用户的好友列表信息</span></span><br><span class="line">                        <span class="keyword">if</span>(responsejs.<span class="built_in">contains</span>(<span class="string">&quot;friends&quot;</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            vector&lt;string&gt; vec = responsejs[<span class="string">&quot;friends&quot;</span>];</span><br><span class="line">                            <span class="keyword">for</span>(string &amp;str:vec)</span><br><span class="line">                            &#123;</span><br><span class="line">                                json js = json::<span class="built_in">parse</span>(str);</span><br><span class="line">                                User user;</span><br><span class="line">                                user.<span class="built_in">setId</span>(js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                                user.<span class="built_in">setName</span>(js[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                                user.<span class="built_in">setState</span>(js[<span class="string">&quot;state&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                                g_currentFriendList.<span class="built_in">push_back</span>(user);</span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(responsejs.<span class="built_in">contains</span>(<span class="string">&quot;groups&quot;</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            vector&lt;string&gt; vec1 = responsejs[<span class="string">&quot;groups&quot;</span>];</span><br><span class="line">                            <span class="keyword">for</span>(string &amp;str1:vec1)</span><br><span class="line">                            &#123;</span><br><span class="line">                                json grpjs = json::<span class="built_in">parse</span>(str1);</span><br><span class="line">                                Group group;</span><br><span class="line">                                group.<span class="built_in">setId</span>(grpjs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                                group.<span class="built_in">setName</span>(grpjs[<span class="string">&quot;groupname&quot;</span>]);</span><br><span class="line">                                group.<span class="built_in">setDesc</span>(grpjs[<span class="string">&quot;groupdesc&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                                vector&lt;string&gt; vec2 = grpjs[<span class="string">&quot;users&quot;</span>];</span><br><span class="line">                                <span class="keyword">for</span>(string &amp;str2:vec2)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    json js = json::<span class="built_in">parse</span>(str2);</span><br><span class="line">                                    GroupUser user;</span><br><span class="line">                                    user.<span class="built_in">setId</span>(js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                                    user.<span class="built_in">setName</span>(js[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                                    user.<span class="built_in">setState</span>(js[<span class="string">&quot;state&quot;</span>]);</span><br><span class="line">                                    user.<span class="built_in">setRole</span>(js[<span class="string">&quot;role&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                                    group.<span class="built_in">getUsers</span>().<span class="built_in">push_back</span>(user);</span><br><span class="line">                                &#125;</span><br><span class="line">                                g_currentGroupList.<span class="built_in">push_back</span>(group);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line">                        <span class="built_in">showCurrentUserData</span>();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(responsejs.<span class="built_in">contains</span>(<span class="string">&quot;offlinemsg&quot;</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            vector&lt;string&gt; vec = responsejs[<span class="string">&quot;offlinemsg&quot;</span>];</span><br><span class="line">                            <span class="keyword">for</span>(string &amp;str: vec)</span><br><span class="line">                            &#123;</span><br><span class="line">                                json js = json::<span class="built_in">parse</span>(str);</span><br><span class="line">                                <span class="comment">// time + [id] + name + &quot; said: &quot; + xxx</span></span><br><span class="line">                                cout &lt;&lt; js[<span class="string">&quot;time&quot;</span>] &lt;&lt; <span class="string">&quot; [ &quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot; ] &quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>] </span><br><span class="line">                                &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>] &lt;&lt; endl;</span><br><span class="line">                            &#125;                            </span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//登陆成功，启动接受线程负责接受数据</span></span><br><span class="line">                        <span class="function">std::thread <span class="title">readTask</span><span class="params">(readTaskHandler,clientfd)</span></span>;</span><br><span class="line">                        readTask.<span class="built_in">detach</span>();</span><br><span class="line">                        <span class="comment">// 进入聊天主菜单页面</span></span><br><span class="line">                        <span class="built_in">mainMenu</span>(clientfd);                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cin.<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> name[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="type">char</span> password[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;name:&quot;</span> ;</span><br><span class="line">            cin.<span class="built_in">getline</span>(name,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;password:&quot;</span>;</span><br><span class="line">            cin.<span class="built_in">getline</span>(password,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">            json js;</span><br><span class="line">            js[<span class="string">&quot;msgid&quot;</span>] = REG_MSG;</span><br><span class="line">            js[<span class="string">&quot;name&quot;</span>] = name;</span><br><span class="line">            js[<span class="string">&quot;password&quot;</span>] = password;</span><br><span class="line">            string request = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,request.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(request.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                cerr &lt;&lt; <span class="string">&quot;send reg msg error:&quot;</span> &lt;&lt; request &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="type">int</span> len = <span class="built_in">recv</span>(clientfd,buffer,<span class="number">1024</span>,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">-1</span> == len)</span><br><span class="line">                &#123;</span><br><span class="line">                    cerr &lt;&lt; <span class="string">&quot;recv reg response error&quot;</span> &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                &#123;</span><br><span class="line">                    json responsejs = json::<span class="built_in">parse</span>(buffer);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="number">0</span> != responsejs[<span class="string">&quot;errno&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;())</span><br><span class="line">                    &#123;</span><br><span class="line">                        cerr &lt;&lt; name &lt;&lt; <span class="string">&quot; is already exist , register error !&quot;</span> &lt;&lt; endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="comment">//注册成功</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cerr &lt;&lt; <span class="string">&quot;register success , userid is &quot;</span> </span><br><span class="line">                        &lt;&lt; responsejs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;() &lt;&lt; </span><br><span class="line">                        <span class="string">&quot; , dot not forget it !&quot;</span> &lt;&lt; endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;</span><br><span class="line">        cin.<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">//quit业务</span></span><br><span class="line">            <span class="built_in">close</span>(clientfd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;invalid input!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showCurrentUserData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;======================login user======================&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;current login user =&gt; id:&quot;</span> &lt;&lt; g_currentUser.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; name:&quot;</span> </span><br><span class="line">    &lt;&lt; g_currentUser.<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------------friend list---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(!g_currentFriendList.<span class="built_in">empty</span>()) <span class="comment">//如果好友列表不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(User &amp;user:g_currentFriendList)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个好友信息:&quot;</span> &lt;&lt; user.<span class="built_in">getId</span>() </span><br><span class="line">            &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getState</span>() &lt;&lt; endl;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------------group list---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(!g_currentGroupList.<span class="built_in">empty</span>())<span class="comment">//群组信息不为空，才打印出来</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(Group &amp;group:g_currentGroupList)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; group.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; group.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> </span><br><span class="line">            &lt;&lt; group.<span class="built_in">getDesc</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(GroupUser &amp;user:group.<span class="built_in">getUsers</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个人信息:&quot;</span> &lt;&lt; user.<span class="built_in">getId</span>() </span><br><span class="line">                &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getState</span>() &lt;&lt; endl;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readTaskHandler</span><span class="params">(<span class="type">int</span> clientfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">recv</span>(clientfd, buffer, <span class="number">1024</span> , <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == len || <span class="number">0</span> == len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">close</span>(clientfd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接受ChatServer转发的数据，反序列化生产json数据对象</span></span><br><span class="line">        json js = json::<span class="built_in">parse</span>(buffer);</span><br><span class="line">        <span class="keyword">if</span>(ONE_CHAT_MSG == js[<span class="string">&quot;msgid&quot;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// time + [id] + name + &quot; said: &quot; + xxx</span></span><br><span class="line">            cout &lt;&lt; js[<span class="string">&quot;time&quot;</span>] &lt;&lt; <span class="string">&quot; [ &quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot; ] &quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>] </span><br><span class="line">            &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>] &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;help&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">help</span><span class="params">(<span class="type">int</span> fd = <span class="number">0</span> , string str = <span class="string">&quot; &quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">// &quot;chat&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chat</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">// &quot;addfriend&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addfriend</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统支持的客户端命令列表</span></span><br><span class="line">unordered_map&lt;string,string&gt; commandMap = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;help&quot;</span>,<span class="string">&quot;显示所有支持的命令,格式help&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;chat&quot;</span>,<span class="string">&quot;一对一聊天,格式chat:friendid:message&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addfriend&quot;</span>,<span class="string">&quot;添加好友,格式addfriend:friendid&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册系统支持的客户端命令处理</span></span><br><span class="line">unordered_map&lt;string,function&lt;<span class="type">void</span>(<span class="type">int</span>,string)&gt;&gt; commandHandlerMap = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;help&quot;</span>,help&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;chat&quot;</span>,chat&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addfriend&quot;</span>,addfriend&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">help</span><span class="params">(<span class="type">int</span>, string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;show command list &gt;&gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it:commandMap)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; it.first &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; it.second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mainMenu</span><span class="params">(<span class="type">int</span> clientfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">help</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        cin.<span class="built_in">getline</span>(buffer, <span class="number">1024</span>);</span><br><span class="line">        <span class="function">string <span class="title">commandbuf</span><span class="params">(buffer)</span></span>;</span><br><span class="line">        string command;</span><br><span class="line">        <span class="type">int</span> idx = commandbuf.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == idx)</span><br><span class="line">        &#123;</span><br><span class="line">            command = commandbuf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            command = commandbuf.<span class="built_in">substr</span>(<span class="number">0</span>,idx);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = commandHandlerMap.<span class="built_in">find</span>(command);</span><br><span class="line">        <span class="keyword">if</span>(it == commandHandlerMap.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;invalid command&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用相应命令的事件处理回调,mainMenu对修改封闭,添加新功能</span></span><br><span class="line">        it-&gt;<span class="built_in">second</span>(clientfd,commandbuf.<span class="built_in">substr</span>(idx+<span class="number">1</span>,commandbuf.<span class="built_in">size</span>()-idx));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chat</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> idx = str.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="type">int</span> friendid = <span class="built_in">atoi</span>((str.<span class="built_in">substr</span>(<span class="number">0</span>,idx)).<span class="built_in">c_str</span>());</span><br><span class="line">    string message = str.<span class="built_in">substr</span>(idx+<span class="number">1</span>,str.<span class="built_in">size</span>()-idx);</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = ONE_CHAT_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;name&quot;</span>] = g_currentUser.<span class="built_in">getName</span>();</span><br><span class="line">    js[<span class="string">&quot;toid&quot;</span>] = friendid;</span><br><span class="line">    js[<span class="string">&quot;msg&quot;</span>] = message;</span><br><span class="line">    js[<span class="string">&quot;time&quot;</span>] = <span class="built_in">getCurrentTime</span>();</span><br><span class="line"></span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send chat msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addfriend</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> friendid = <span class="built_in">atoi</span>(str.<span class="built_in">c_str</span>());</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = ADD_FRIEND_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;friendid&quot;</span>] = friendid;</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == len)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send addfriend msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取系统时间（聊天信息需要添加时间信息）</span></span><br><span class="line"><span class="function">string <span class="title">getCurrentTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> tt = std::chrono::system_clock::<span class="built_in">to_time_t</span>(std::chrono::system_clock::<span class="built_in">now</span>());</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tm</span> *ptm = <span class="built_in">localtime</span>(&amp;tt);</span><br><span class="line">    <span class="type">char</span> date[<span class="number">60</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(date, <span class="string">&quot;%d-%02d-%02d %02d:%02d:%02d&quot;</span>,</span><br><span class="line">            (<span class="type">int</span>)ptm-&gt;tm_year + <span class="number">1900</span>, (<span class="type">int</span>)ptm-&gt;tm_mon + <span class="number">1</span>, (<span class="type">int</span>)ptm-&gt;tm_mday,</span><br><span class="line">            (<span class="type">int</span>)ptm-&gt;tm_hour, (<span class="type">int</span>)ptm-&gt;tm_min, (<span class="type">int</span>)ptm-&gt;tm_sec);</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">string</span>(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/23-01(1).png" alt="本地png图片PictureTest.png"></p><h3 id="23-1-问题"><a href="#23-1-问题" class="headerlink" title="23.1 问题"></a>23.1 问题</h3><p>将src&#x2F;server&#x2F;chatservice.cpp中的聊天业务修改一下，登录之后，也只有本id才能去发消息。将20.1中的问题解决</p><h2 id="24-客户端开发三群组功能开发"><a href="#24-客户端开发三群组功能开发" class="headerlink" title="24 客户端开发三群组功能开发"></a>24 客户端开发三群组功能开发</h2><p><strong>在src&#x2F;client&#x2F;main.cpp下</strong></p><p>完成对创建群组、加入群组、群组聊天功能函数的编写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gruop.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;groupuser.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录当前登录用户的信息</span></span><br><span class="line">User g_currentUser;</span><br><span class="line"><span class="comment">// 记录当前用户朋友的信息</span></span><br><span class="line">vector&lt;User&gt; g_currentFriendList; </span><br><span class="line"><span class="comment">// 记录当前用户群组的信息</span></span><br><span class="line">vector&lt;Group&gt; g_currentGroupList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取系统时间（聊天信息需要添加时间信息）</span></span><br><span class="line"><span class="function">string <span class="title">getCurrentTime</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showCurrentUserData</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收线程 控制台应用程序，接收用户的手动输入，用户不输入cin就阻塞住，所以要2个线程 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readTaskHandler</span><span class="params">(<span class="type">int</span> clientfd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mainMenu</span><span class="params">(<span class="type">int</span> clientfd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聊天客户端程序实现，main线程用作发送线程，子线程用作接受线程</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;command invalid example : ./ChatClient 127.0.0.1 6000&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建client端的socket</span></span><br><span class="line">    <span class="type">int</span> clientfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM , <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == clientfd)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;socket create error&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint16_t</span> port = <span class="built_in">atoi</span>(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//填写client需要连接的server信息ip+port</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv,<span class="number">0</span>,<span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line">    serv.sin_family = AF_INET;</span><br><span class="line">    serv.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">    serv.sin_addr.s_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// client和server进行连接</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">connect</span>(clientfd,(<span class="type">const</span> sockaddr *)&amp;serv,<span class="built_in">sizeof</span>(sockaddr_in)))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;connect server error&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">close</span>(clientfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//main线程用于接受用户输入，负责发送数据</span></span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 显示首页面菜单 登录、注册、退出</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;========================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1.login&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2.register&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;3.quit&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;========================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;choice:&quot;</span>;</span><br><span class="line">        <span class="type">int</span> choice = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; choice;</span><br><span class="line">        cin.<span class="built_in">get</span>(); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">            <span class="type">char</span> password[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;userid:&quot;</span>;</span><br><span class="line">            cin &gt;&gt; id;</span><br><span class="line">            cin.<span class="built_in">get</span>();  <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;userpassword:&quot;</span>;</span><br><span class="line">            cin.<span class="built_in">getline</span>(password,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">            json js;</span><br><span class="line">            js[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG;</span><br><span class="line">            js[<span class="string">&quot;id&quot;</span>] = id;</span><br><span class="line">            js[<span class="string">&quot;password&quot;</span>] = password;</span><br><span class="line">            string request = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,request.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(request.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                cerr &lt;&lt; <span class="string">&quot;send login msg error:&quot;</span> &lt;&lt; request &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">recv</span>(clientfd,buffer,<span class="number">1024</span>,<span class="number">0</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    cerr &lt;&lt; <span class="string">&quot;recv login msg error&quot;</span> &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    json responsejs = json::<span class="built_in">parse</span>(buffer);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(<span class="number">0</span> != responsejs[<span class="string">&quot;errno&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;()) <span class="comment">//登录失败</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cerr &lt;&lt; responsejs[<span class="string">&quot;errmsg&quot;</span>] &lt;&lt; endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="comment">//登录成功</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cout &lt;&lt; responsejs[<span class="string">&quot;errmsg&quot;</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 记录当前用户的id和name</span></span><br><span class="line">                        g_currentUser.<span class="built_in">setId</span>(responsejs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                        g_currentUser.<span class="built_in">setName</span>(responsejs[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 记录当前用户的好友列表信息</span></span><br><span class="line">                        <span class="keyword">if</span>(responsejs.<span class="built_in">contains</span>(<span class="string">&quot;friends&quot;</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            vector&lt;string&gt; vec = responsejs[<span class="string">&quot;friends&quot;</span>];</span><br><span class="line">                            <span class="keyword">for</span>(string &amp;str:vec)</span><br><span class="line">                            &#123;</span><br><span class="line">                                json js = json::<span class="built_in">parse</span>(str);</span><br><span class="line">                                User user;</span><br><span class="line">                                user.<span class="built_in">setId</span>(js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                                user.<span class="built_in">setName</span>(js[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                                user.<span class="built_in">setState</span>(js[<span class="string">&quot;state&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                                g_currentFriendList.<span class="built_in">push_back</span>(user);</span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(responsejs.<span class="built_in">contains</span>(<span class="string">&quot;groups&quot;</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            vector&lt;string&gt; vec1 = responsejs[<span class="string">&quot;groups&quot;</span>];</span><br><span class="line">                            <span class="keyword">for</span>(string &amp;str1:vec1)</span><br><span class="line">                            &#123;</span><br><span class="line">                                json grpjs = json::<span class="built_in">parse</span>(str1);</span><br><span class="line">                                Group group;</span><br><span class="line">                                group.<span class="built_in">setId</span>(grpjs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                                group.<span class="built_in">setName</span>(grpjs[<span class="string">&quot;groupname&quot;</span>]);</span><br><span class="line">                                group.<span class="built_in">setDesc</span>(grpjs[<span class="string">&quot;groupdesc&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                                vector&lt;string&gt; vec2 = grpjs[<span class="string">&quot;users&quot;</span>];</span><br><span class="line">                                <span class="keyword">for</span>(string &amp;str2:vec2)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    json js = json::<span class="built_in">parse</span>(str2);</span><br><span class="line">                                    GroupUser user;</span><br><span class="line">                                    user.<span class="built_in">setId</span>(js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                                    user.<span class="built_in">setName</span>(js[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                                    user.<span class="built_in">setState</span>(js[<span class="string">&quot;state&quot;</span>]);</span><br><span class="line">                                    user.<span class="built_in">setRole</span>(js[<span class="string">&quot;role&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                                    group.<span class="built_in">getUsers</span>().<span class="built_in">push_back</span>(user);</span><br><span class="line">                                &#125;</span><br><span class="line">                                g_currentGroupList.<span class="built_in">push_back</span>(group);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line">                        <span class="built_in">showCurrentUserData</span>();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(responsejs.<span class="built_in">contains</span>(<span class="string">&quot;offlinemsg&quot;</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            vector&lt;string&gt; vec = responsejs[<span class="string">&quot;offlinemsg&quot;</span>];</span><br><span class="line">                            <span class="keyword">for</span>(string &amp;str: vec)</span><br><span class="line">                            &#123;</span><br><span class="line">                                json js = json::<span class="built_in">parse</span>(str);</span><br><span class="line">                                <span class="keyword">if</span>(ONE_CHAT_MSG == js[<span class="string">&quot;msgid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;())</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="comment">// time + [id] + name + &quot; said: &quot; + xxx</span></span><br><span class="line">                                    cout &lt;&lt; js[<span class="string">&quot;time&quot;</span>] &lt;&lt; <span class="string">&quot; [ &quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot; ] &quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>] </span><br><span class="line">                                    &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>] &lt;&lt; endl;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> <span class="keyword">if</span>(GROUP_CHAT_MSG == js[<span class="string">&quot;msgid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;())</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="comment">// time + [id] + name + &quot; said: &quot; + xxx</span></span><br><span class="line">                                    cout &lt;&lt; <span class="string">&quot;群消息[&quot;</span> &lt;&lt; js[<span class="string">&quot;groupid&quot;</span>] &lt;&lt; <span class="string">&quot;]:&quot;</span> &lt;&lt; js[<span class="string">&quot;time&quot;</span>] </span><br><span class="line">                                    &lt;&lt; <span class="string">&quot; [&quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>] &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>] </span><br><span class="line">                                    &lt;&lt; endl;</span><br><span class="line">                                    <span class="keyword">continue</span>;             </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;                            </span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//登陆成功，启动接受线程负责接受数据</span></span><br><span class="line">                        <span class="function">std::thread <span class="title">readTask</span><span class="params">(readTaskHandler,clientfd)</span></span>;</span><br><span class="line">                        readTask.<span class="built_in">detach</span>();</span><br><span class="line">                        <span class="comment">// 进入聊天主菜单页面</span></span><br><span class="line">                        <span class="built_in">mainMenu</span>(clientfd);                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cin.<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> name[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="type">char</span> password[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;name:&quot;</span> ;</span><br><span class="line">            cin.<span class="built_in">getline</span>(name,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;password:&quot;</span>;</span><br><span class="line">            cin.<span class="built_in">getline</span>(password,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">            json js;</span><br><span class="line">            js[<span class="string">&quot;msgid&quot;</span>] = REG_MSG;</span><br><span class="line">            js[<span class="string">&quot;name&quot;</span>] = name;</span><br><span class="line">            js[<span class="string">&quot;password&quot;</span>] = password;</span><br><span class="line">            string request = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,request.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(request.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                cerr &lt;&lt; <span class="string">&quot;send reg msg error:&quot;</span> &lt;&lt; request &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="type">int</span> len = <span class="built_in">recv</span>(clientfd,buffer,<span class="number">1024</span>,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">-1</span> == len)</span><br><span class="line">                &#123;</span><br><span class="line">                    cerr &lt;&lt; <span class="string">&quot;recv reg response error&quot;</span> &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                &#123;</span><br><span class="line">                    json responsejs = json::<span class="built_in">parse</span>(buffer);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="number">0</span> != responsejs[<span class="string">&quot;errno&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;())</span><br><span class="line">                    &#123;</span><br><span class="line">                        cerr &lt;&lt; name &lt;&lt; <span class="string">&quot; is already exist , register error !&quot;</span> &lt;&lt; endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="comment">//注册成功</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cerr &lt;&lt; <span class="string">&quot;register success , userid is &quot;</span> </span><br><span class="line">                        &lt;&lt; responsejs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;() &lt;&lt; </span><br><span class="line">                        <span class="string">&quot; , dot not forget it !&quot;</span> &lt;&lt; endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;</span><br><span class="line">        cin.<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">//quit业务</span></span><br><span class="line">            <span class="built_in">close</span>(clientfd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;invalid input!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showCurrentUserData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;======================login user======================&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;current login user =&gt; id:&quot;</span> &lt;&lt; g_currentUser.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; name:&quot;</span> </span><br><span class="line">    &lt;&lt; g_currentUser.<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------------friend list---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(!g_currentFriendList.<span class="built_in">empty</span>()) <span class="comment">//如果好友列表不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(User &amp;user:g_currentFriendList)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个好友信息:&quot;</span> &lt;&lt; user.<span class="built_in">getId</span>() </span><br><span class="line">            &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getState</span>() &lt;&lt; endl;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------------group list---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(!g_currentGroupList.<span class="built_in">empty</span>())<span class="comment">//群组信息不为空，才打印出来</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(Group &amp;group:g_currentGroupList)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; group.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; group.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> </span><br><span class="line">            &lt;&lt; group.<span class="built_in">getDesc</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(GroupUser &amp;user:group.<span class="built_in">getUsers</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个人信息:&quot;</span> &lt;&lt; user.<span class="built_in">getId</span>() </span><br><span class="line">                &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getState</span>() &lt;&lt; endl;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readTaskHandler</span><span class="params">(<span class="type">int</span> clientfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">recv</span>(clientfd, buffer, <span class="number">1024</span> , <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == len || <span class="number">0</span> == len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">close</span>(clientfd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接受ChatServer转发的数据，反序列化生产json数据对象</span></span><br><span class="line">        json js = json::<span class="built_in">parse</span>(buffer);</span><br><span class="line">        <span class="type">int</span> msgtype = js[<span class="string">&quot;msgid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span>(ONE_CHAT_MSG == msgtype)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// time + [id] + name + &quot; said: &quot; + xxx</span></span><br><span class="line">            cout &lt;&lt; js[<span class="string">&quot;time&quot;</span>] &lt;&lt; <span class="string">&quot; [ &quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot; ] &quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>] </span><br><span class="line">            &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>] &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(GROUP_CHAT_MSG == msgtype)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// time + [id] + name + &quot; said: &quot; + xxx</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;群消息[&quot;</span> &lt;&lt; js[<span class="string">&quot;groupid&quot;</span>] &lt;&lt; <span class="string">&quot;]:&quot;</span> &lt;&lt; js[<span class="string">&quot;time&quot;</span>] </span><br><span class="line">            &lt;&lt; <span class="string">&quot; [&quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>] &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>] </span><br><span class="line">            &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;help&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">help</span><span class="params">(<span class="type">int</span> fd = <span class="number">0</span> , string str = <span class="string">&quot; &quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">// &quot;chat&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chat</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">// &quot;addfriend&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addfriend</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">// &quot;creategroup&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">creategroup</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">//&quot;addgroup&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addgroup</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">//&quot;groupchat&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">groupchat</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统支持的客户端命令列表</span></span><br><span class="line">unordered_map&lt;string,string&gt; commandMap = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;help&quot;</span>,<span class="string">&quot;显示所有支持的命令,格式help&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;chat&quot;</span>,<span class="string">&quot;一对一聊天,格式chat:friendid:message&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addfriend&quot;</span>,<span class="string">&quot;添加好友,格式addfriend:friendid&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;creategroup&quot;</span>,<span class="string">&quot;创建群组,格式creategroup:groupname:groupdesc&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addgroup&quot;</span>,<span class="string">&quot;加入群组,格式addgroup:groupid&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;groupchat&quot;</span>, <span class="string">&quot;群聊,格式groupchat:groupid:message&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册系统支持的客户端命令处理</span></span><br><span class="line">unordered_map&lt;string,function&lt;<span class="type">void</span>(<span class="type">int</span>,string)&gt;&gt; commandHandlerMap = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;help&quot;</span>,help&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;chat&quot;</span>,chat&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addfriend&quot;</span>,addfriend&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;creategroup&quot;</span>,creategroup&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addgroup&quot;</span>,addgroup&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;groupchat&quot;</span>,groupchat&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;help&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">help</span><span class="params">(<span class="type">int</span>, string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;show command list &gt;&gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it:commandMap)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; it.first &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; it.second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主聊天页面程序，先显示一下系统支持的命令 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mainMenu</span><span class="params">(<span class="type">int</span> clientfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">help</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        cin.<span class="built_in">getline</span>(buffer, <span class="number">1024</span>);</span><br><span class="line">        <span class="function">string <span class="title">commandbuf</span><span class="params">(buffer)</span></span>;</span><br><span class="line">        string command;</span><br><span class="line">        <span class="type">int</span> idx = commandbuf.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == idx)</span><br><span class="line">        &#123;</span><br><span class="line">            command = commandbuf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            command = commandbuf.<span class="built_in">substr</span>(<span class="number">0</span>,idx);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = commandHandlerMap.<span class="built_in">find</span>(command);</span><br><span class="line">        <span class="keyword">if</span>(it == commandHandlerMap.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;invalid command&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用相应命令的事件处理回调,mainMenu对修改封闭,添加新功能</span></span><br><span class="line">        it-&gt;<span class="built_in">second</span>(clientfd,commandbuf.<span class="built_in">substr</span>(idx+<span class="number">1</span>,commandbuf.<span class="built_in">size</span>()-idx));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;chat&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chat</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> idx = str.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == idx)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;chat command invalid!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> friendid = <span class="built_in">atoi</span>((str.<span class="built_in">substr</span>(<span class="number">0</span>,idx)).<span class="built_in">c_str</span>());</span><br><span class="line">    string message = str.<span class="built_in">substr</span>(idx+<span class="number">1</span>,str.<span class="built_in">size</span>()-idx);</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = ONE_CHAT_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;name&quot;</span>] = g_currentUser.<span class="built_in">getName</span>();</span><br><span class="line">    js[<span class="string">&quot;toid&quot;</span>] = friendid;</span><br><span class="line">    js[<span class="string">&quot;msg&quot;</span>] = message;</span><br><span class="line">    js[<span class="string">&quot;time&quot;</span>] = <span class="built_in">getCurrentTime</span>();</span><br><span class="line"></span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send chat msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;addfriend&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addfriend</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> friendid = <span class="built_in">atoi</span>(str.<span class="built_in">c_str</span>());</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = ADD_FRIEND_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;friendid&quot;</span>] = friendid;</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == len)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send addfriend msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;creategroup&quot; command handler  groupname:groupdesc</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">creategroup</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> idx = str.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == idx)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;creategroup command invalid!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    string groupname = str.<span class="built_in">substr</span>(<span class="number">0</span>,idx);</span><br><span class="line">    string groupdesc = str.<span class="built_in">substr</span>(idx+<span class="number">1</span>,str.<span class="built_in">size</span>()-idx);</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = CREATE_GROUP_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;groupname&quot;</span>] = groupname;</span><br><span class="line">    js[<span class="string">&quot;groupdesc&quot;</span>] = groupdesc;</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send creategroup msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;addgroup&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addgroup</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> groupid = <span class="built_in">atoi</span>(str.<span class="built_in">c_str</span>());</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = ADD_GROUP_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;groupid&quot;</span>] = groupid;</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send addgroup msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;groupchat&quot; command handler   groupid:message</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">groupchat</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> idx = str.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == idx)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;groupchat command invalid!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> groupid = <span class="built_in">atoi</span>((str.<span class="built_in">substr</span>(<span class="number">0</span>,idx)).<span class="built_in">c_str</span>());</span><br><span class="line">    string message = str.<span class="built_in">substr</span>(idx+<span class="number">1</span>,str.<span class="built_in">size</span>()-idx);</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = GROUP_CHAT_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;name&quot;</span>] = g_currentUser.<span class="built_in">getName</span>();</span><br><span class="line">    js[<span class="string">&quot;groupid&quot;</span>] = groupid;</span><br><span class="line">    js[<span class="string">&quot;msg&quot;</span>] = message;</span><br><span class="line">    js[<span class="string">&quot;time&quot;</span>] = <span class="built_in">getCurrentTime</span>();</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send groupchat msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取系统时间（聊天信息需要添加时间信息）</span></span><br><span class="line"><span class="function">string <span class="title">getCurrentTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> tt = std::chrono::system_clock::<span class="built_in">to_time_t</span>(std::chrono::system_clock::<span class="built_in">now</span>());</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tm</span> *ptm = <span class="built_in">localtime</span>(&amp;tt);</span><br><span class="line">    <span class="type">char</span> date[<span class="number">60</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(date, <span class="string">&quot;%d-%02d-%02d %02d:%02d:%02d&quot;</span>,</span><br><span class="line">            (<span class="type">int</span>)ptm-&gt;tm_year + <span class="number">1900</span>, (<span class="type">int</span>)ptm-&gt;tm_mon + <span class="number">1</span>, (<span class="type">int</span>)ptm-&gt;tm_mday,</span><br><span class="line">            (<span class="type">int</span>)ptm-&gt;tm_hour, (<span class="type">int</span>)ptm-&gt;tm_min, (<span class="type">int</span>)ptm-&gt;tm_sec);</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">string</span>(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建群组</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/24-01(1).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/24-01(2).png" alt="本地png图片PictureTest.png"></p><p><strong>加入群组</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/24-01(3).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/24-01(4).png" alt="本地png图片PictureTest.png"></p><p><strong>一对一聊天、群聊，离线消息加入offlinemessage,ID为2上线接受到离线消息</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/24-01(5).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/24-01(6).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/24-01(7).png" alt="本地png图片PictureTest.png"></p><p><strong>一对一聊天、群聊</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/24-01(8).png" alt="本地png图片PictureTest.png"></p><h2 id="25-客户端开发四用户注销功能开发"><a href="#25-客户端开发四用户注销功能开发" class="headerlink" title="25 客户端开发四用户注销功能开发"></a>25 客户端开发四用户注销功能开发</h2><p>在include&#x2F;public.hpp下增加注销消息</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PUBLIC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUBLIC_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">是属于server和client的公共文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">EnMsgType</span></span><br><span class="line">&#123;</span><br><span class="line">    LOGIN_MSG = <span class="number">1</span>,<span class="comment">//登录消息</span></span><br><span class="line">    LOGIN_MSG_ACK, <span class="comment">//登录回应消息</span></span><br><span class="line">    LOGINOUT_MSG,<span class="comment">//注销消息</span></span><br><span class="line">    REG_MSG, <span class="comment">//注册消息</span></span><br><span class="line">    REG_MSG_ACK, <span class="comment">//注册回应消息</span></span><br><span class="line">    ONE_CHAT_MSG, <span class="comment">//聊天消息</span></span><br><span class="line">    ADD_FRIEND_MSG,<span class="comment">//添加好友消息</span></span><br><span class="line"></span><br><span class="line">    CREATE_GROUP_MSG,<span class="comment">//创建群组</span></span><br><span class="line">    ADD_GROUP_MSG,<span class="comment">//加入群组</span></span><br><span class="line">    GROUP_CHAT_MSG,<span class="comment">//群聊天</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !PUBLIC_H</span></span></span><br></pre></td></tr></table></figure><p><strong>在include&#x2F;chatservice.hpp下增加对处理注销业务函数的声明</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CHATSERVICE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHATSERVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span> <span class="comment">//一个消息ID映射一个事件处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpConnection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/base/Logging.h&gt;</span> <span class="comment">//muduo的日志 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usermodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;offlinemsgmodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;friendmodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;groupmodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示处理消息的事件回调方法类型，事件处理器，派发3个东西 </span></span><br><span class="line"><span class="keyword">using</span> MsgHandler = function&lt;<span class="built_in">void</span>(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聊天服务器业务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//获取单例对象的接口函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ChatService *<span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理登录业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理注册业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理一对一聊天业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取消息对应的处理器</span></span><br><span class="line">    <span class="function">MsgHandler <span class="title">getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理客户端异常退出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理服务器异常退出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加好友业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addFriend</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建群组业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">createGroup</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入群组业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addGroup</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//群组聊天业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">groupChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//处理注销业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">loginout</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ChatService</span>(); <span class="comment">//单例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储在线用户的通信连接，用户的id， TcpConnectionPtr</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,TcpConnectionPtr&gt; _userConnMap;</span><br><span class="line">    <span class="comment">//存储消息id和其对应的业务处理方法，消息处理器的一个表，写消息id对应的处理操作 </span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,MsgHandler&gt; _msgHandlerMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据操作类对象</span></span><br><span class="line">    UserModel _userModel;</span><br><span class="line">    OfflineMsgModel _offlineMsgModel;</span><br><span class="line">    FriendModel _friendModel;</span><br><span class="line">    GroupModel _groupModel;</span><br><span class="line">    <span class="comment">//定义互斥锁，保证_userConnMap的线程安全</span></span><br><span class="line">    mutex _connMutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p><strong>在src&#x2F;server&#x2F;chatservice.cpp下</strong></p><p>增加注销业务处理回调注册</p><p>增加对注销业务函数的编写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatservice.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ChatService *<span class="title">ChatService::instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> ChatService service;</span><br><span class="line">    <span class="keyword">return</span> &amp;service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，注册消息以及对应的Handler回调操作</span></span><br><span class="line">ChatService::<span class="built_in">ChatService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用户基本业务管理相关事件处理回调注册</span></span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGIN_MSG,<span class="built_in">bind</span>(&amp;ChatService::login,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGINOUT_MSG, std::<span class="built_in">bind</span>(&amp;ChatService::loginout, <span class="keyword">this</span>, _1, _2, _3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG,<span class="built_in">bind</span>(&amp;ChatService::reg,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;ONE_CHAT_MSG,<span class="built_in">bind</span>(&amp;ChatService::oneChat,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;ADD_FRIEND_MSG,<span class="built_in">bind</span>(&amp;ChatService::addFriend,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;CREATE_GROUP_MSG,<span class="built_in">bind</span>(&amp;ChatService::createGroup,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;ADD_GROUP_MSG,<span class="built_in">bind</span>(&amp;ChatService::addGroup,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;GROUP_CHAT_MSG,<span class="built_in">bind</span>(&amp;ChatService::groupChat,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器异常，业务重置方法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//把online状态的用户，设置成offline</span></span><br><span class="line">    _userModel.<span class="built_in">resetState</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取消息对应的处理器</span></span><br><span class="line"><span class="function">MsgHandler <span class="title">ChatService::getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录错误日志，msgid没有对应的事件处理回调</span></span><br><span class="line">    <span class="keyword">auto</span> it = _msgHandlerMap.<span class="built_in">find</span>(msgid);</span><br><span class="line">    <span class="keyword">if</span>(it == _msgHandlerMap.<span class="built_in">end</span>())<span class="comment">//找不到 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回一个默认的处理器，空操作，=按值获取 </span></span><br><span class="line">        <span class="keyword">return</span> [=](<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_ERROR &lt;&lt; <span class="string">&quot;msgid:&quot;</span> &lt;&lt; msgid &lt;&lt; <span class="string">&quot; can not find handler!&quot;</span>;<span class="comment">//muduo日志会自动输出endl </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//成功的话 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second; <span class="comment">//返回这个处理器 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理登录业务  id  pwd   pwd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取id号</span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码 </span></span><br><span class="line"></span><br><span class="line">    User user = _userModel.<span class="built_in">query</span>(id); <span class="comment">//查找 这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() == id &amp;&amp; user.<span class="built_in">getPassword</span>() == password) <span class="comment">//查出来了，登录成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>) <span class="comment">//该用户已经登录，不允许重复登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;this account is using,input another&quot;</span>;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串            </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//登录成功，记录用户连接信息，当多个用户登录时，都会操作这个_userConnMap</span></span><br><span class="line">            &#123;</span><br><span class="line">                lock_guard&lt;mutex&gt; <span class="built_in">lock</span>(_connMutex);</span><br><span class="line">                _userConnMap.<span class="built_in">insert</span>(&#123;id,conn&#125;);</span><br><span class="line">            &#125;<span class="comment">//加个作用域，出了这个右括号就自动解锁</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//登录成功，更新用户状态信息 state offline=&gt;online</span></span><br><span class="line">            user.<span class="built_in">setState</span>(<span class="string">&quot;online&quot;</span>);</span><br><span class="line">            _userModel.<span class="built_in">updateState</span>(user); <span class="comment">//这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">            response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">            response[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//查询该用户是否有离线消息</span></span><br><span class="line">            vector&lt;string&gt; vec = _offlineMsgModel.<span class="built_in">query</span>(id); <span class="comment">//查询用户ID</span></span><br><span class="line">            <span class="keyword">if</span>(!vec.<span class="built_in">empty</span>()) <span class="comment">//不为空</span></span><br><span class="line">            &#123;</span><br><span class="line">                response[<span class="string">&quot;offlinemsg&quot;</span>] = vec; <span class="comment">//json库可以和容器之间序列化和反序列化 </span></span><br><span class="line">                <span class="comment">//读取该用户的离线消息后，把该用户的所有离线消息删除掉</span></span><br><span class="line">                _offlineMsgModel.<span class="built_in">remove</span>(id);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//查询该用户的好友信息并返回</span></span><br><span class="line">            vector&lt;User&gt; userVec = _friendModel.<span class="built_in">query</span>(id);</span><br><span class="line">            <span class="keyword">if</span>(!userVec.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                vector&lt;string&gt; vec2;</span><br><span class="line">                <span class="keyword">for</span>(User &amp;user:userVec)</span><br><span class="line">                &#123;</span><br><span class="line">                    json js;</span><br><span class="line">                    js[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">                    js[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">                    js[<span class="string">&quot;state&quot;</span>] = user.<span class="built_in">getState</span>();</span><br><span class="line">                    vec2.<span class="built_in">push_back</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">                &#125;</span><br><span class="line">                response[<span class="string">&quot;friends&quot;</span>] = vec2;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//查询该用户的群组信息并返回</span></span><br><span class="line">            vector&lt;Group&gt; groupuserVec = _groupModel.<span class="built_in">queryGroups</span>(id);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!groupuserVec.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                vector&lt;string&gt; groupV;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(Group &amp;group:groupuserVec)</span><br><span class="line">                &#123;</span><br><span class="line">                    json grpjson;</span><br><span class="line">                    grpjson[<span class="string">&quot;id&quot;</span>] = group.<span class="built_in">getId</span>();</span><br><span class="line">                    grpjson[<span class="string">&quot;groupname&quot;</span>] = group.<span class="built_in">getName</span>();</span><br><span class="line">                    grpjson[<span class="string">&quot;groupdesc&quot;</span>] = group.<span class="built_in">getDesc</span>();</span><br><span class="line"></span><br><span class="line">                    vector&lt;string&gt; userV;</span><br><span class="line">                    <span class="keyword">for</span>(GroupUser &amp;user:group.<span class="built_in">getUsers</span>())</span><br><span class="line">                    &#123;</span><br><span class="line">                        json js;</span><br><span class="line">                        js[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">                        js[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">                        js[<span class="string">&quot;state&quot;</span>] = user.<span class="built_in">getState</span>();</span><br><span class="line">                        js[<span class="string">&quot;role&quot;</span>] = user.<span class="built_in">getRole</span>();</span><br><span class="line">                        userV.<span class="built_in">push_back</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                    grpjson[<span class="string">&quot;users&quot;</span>] = userV;</span><br><span class="line">                    groupV.<span class="built_in">push_back</span>(grpjson.<span class="built_in">dump</span>());</span><br><span class="line">                &#125;</span><br><span class="line">                response[<span class="string">&quot;groups&quot;</span>] = groupV;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//该用户不存在，用户存在但是密码错误，登录失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;id or password is invalid&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注册业务  name  password</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name = js[<span class="string">&quot;name&quot;</span>];  <span class="comment">//获取名字 </span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码</span></span><br><span class="line"></span><br><span class="line">    User user;  <span class="comment">//创建用户对象 </span></span><br><span class="line">    user.<span class="built_in">setName</span>(name);</span><br><span class="line">    user.<span class="built_in">setPassword</span>(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_userModel.<span class="built_in">insert</span>(user)) <span class="comment">//插入成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册成功</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">        response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理客户端异常退出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    User user;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = _userConnMap.<span class="built_in">begin</span>(); it != _userConnMap.<span class="built_in">end</span>();it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second == conn)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//从map表删除用户的链接信息</span></span><br><span class="line">                user.<span class="built_in">setId</span>(it-&gt;first);</span><br><span class="line">                _userConnMap.<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户的状态信息</span></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        user.<span class="built_in">setState</span>(<span class="string">&quot;offline&quot;</span>);</span><br><span class="line">        _userModel.<span class="built_in">updateState</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理一对一聊天业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取本人的id号</span></span><br><span class="line">    <span class="type">int</span> toid = js[<span class="string">&quot;toid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取对方的id号</span></span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>; <span class="comment">//访问连接信息表，要保证线程安全 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(toid);  <span class="comment">//查找对方id号 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it != _userConnMap.<span class="built_in">end</span>()) <span class="comment">//找到了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//toid在线，转发消息  服务器主动推送消息给toid用户</span></span><br><span class="line">            it-&gt;second-&gt;<span class="built_in">send</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toid不在线，存储离线消息</span></span><br><span class="line">    _offlineMsgModel.<span class="built_in">insert</span>(toid,js.<span class="built_in">dump</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加好友业务 格式： msgid id friendid</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::addFriend</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//当前用户的id </span></span><br><span class="line">    <span class="type">int</span> friendid = js[<span class="string">&quot;friendid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取对方的id号 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(friendid);  <span class="comment">//查找对方id号 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it != _userConnMap.<span class="built_in">end</span>()) <span class="comment">//找到了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//toid在线，转发消息  服务器主动推送消息给friendid用户</span></span><br><span class="line">            it-&gt;second-&gt;<span class="built_in">send</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储好友信息</span></span><br><span class="line">    _friendModel.<span class="built_in">insert</span>(userid,friendid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建群组业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::createGroup</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//创建群的用户的id </span></span><br><span class="line">    string name = js[<span class="string">&quot;groupname&quot;</span>];</span><br><span class="line">    string desc = js[<span class="string">&quot;groupdesc&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储新创建的群组信息</span></span><br><span class="line">    Group group;</span><br><span class="line">    group.<span class="built_in">setName</span>(name);</span><br><span class="line">    group.<span class="built_in">setDesc</span>(desc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_groupModel.<span class="built_in">createGroup</span>(group))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//存储群组创建人信息</span></span><br><span class="line">        _groupModel.<span class="built_in">addGroup</span>(userid,group.<span class="built_in">getId</span>(),<span class="string">&quot;creator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加入群组业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::addGroup</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="type">int</span> groupid = js[<span class="string">&quot;groupid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    _groupModel.<span class="built_in">addGroup</span>(userid,groupid,<span class="string">&quot;normal&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//群组聊天业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::groupChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="type">int</span> groupid = js[<span class="string">&quot;groupid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; useridVec = _groupModel.<span class="built_in">queryGroupUsers</span>(userid, groupid);</span><br><span class="line">    <span class="comment">//查询这个用户所在群组的其他用户id </span></span><br><span class="line"></span><br><span class="line">    <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;<span class="comment">//不允许其他人在map里面增删改查 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> id:useridVec)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(id);</span><br><span class="line">        <span class="keyword">if</span>(it != _userConnMap.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            it-&gt;second-&gt;<span class="built_in">send</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _offlineMsgModel.<span class="built_in">insert</span>(id,js.<span class="built_in">dump</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注销业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::loginout</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); </span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it != _userConnMap.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            _userConnMap.<span class="built_in">erase</span>(it);        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">user</span><span class="params">(id,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;offline&quot;</span>)</span></span>;</span><br><span class="line">    _userModel.<span class="built_in">updateState</span>(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src&#x2F;client&#x2F;main.cpp</p><p>完成对注销函数的编写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gruop.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;groupuser.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录当前登录用户的信息</span></span><br><span class="line">User g_currentUser;</span><br><span class="line"><span class="comment">// 记录当前用户朋友的信息</span></span><br><span class="line">vector&lt;User&gt; g_currentFriendList; </span><br><span class="line"><span class="comment">// 记录当前用户群组的信息</span></span><br><span class="line">vector&lt;Group&gt; g_currentGroupList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取系统时间（聊天信息需要添加时间信息）</span></span><br><span class="line"><span class="function">string <span class="title">getCurrentTime</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showCurrentUserData</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收线程 控制台应用程序，接收用户的手动输入，用户不输入cin就阻塞住，所以要2个线程 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readTaskHandler</span><span class="params">(<span class="type">int</span> clientfd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mainMenu</span><span class="params">(<span class="type">int</span> clientfd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聊天客户端程序实现，main线程用作发送线程，子线程用作接受线程</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;command invalid example : ./ChatClient 127.0.0.1 6000&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建client端的socket</span></span><br><span class="line">    <span class="type">int</span> clientfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM , <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == clientfd)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;socket create error&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint16_t</span> port = <span class="built_in">atoi</span>(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//填写client需要连接的server信息ip+port</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv,<span class="number">0</span>,<span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line">    serv.sin_family = AF_INET;</span><br><span class="line">    serv.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">    serv.sin_addr.s_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// client和server进行连接</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">connect</span>(clientfd,(<span class="type">const</span> sockaddr *)&amp;serv,<span class="built_in">sizeof</span>(sockaddr_in)))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;connect server error&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">close</span>(clientfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//main线程用于接受用户输入，负责发送数据</span></span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 显示首页面菜单 登录、注册、退出</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;========================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1.login&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2.register&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;3.quit&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;========================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;choice:&quot;</span>;</span><br><span class="line">        <span class="type">int</span> choice = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; choice;</span><br><span class="line">        cin.<span class="built_in">get</span>(); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">            <span class="type">char</span> password[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;userid:&quot;</span>;</span><br><span class="line">            cin &gt;&gt; id;</span><br><span class="line">            cin.<span class="built_in">get</span>();  <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;userpassword:&quot;</span>;</span><br><span class="line">            cin.<span class="built_in">getline</span>(password,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">            json js;</span><br><span class="line">            js[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG;</span><br><span class="line">            js[<span class="string">&quot;id&quot;</span>] = id;</span><br><span class="line">            js[<span class="string">&quot;password&quot;</span>] = password;</span><br><span class="line">            string request = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,request.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(request.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                cerr &lt;&lt; <span class="string">&quot;send login msg error:&quot;</span> &lt;&lt; request &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">recv</span>(clientfd,buffer,<span class="number">1024</span>,<span class="number">0</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    cerr &lt;&lt; <span class="string">&quot;recv login msg error&quot;</span> &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    json responsejs = json::<span class="built_in">parse</span>(buffer);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(<span class="number">0</span> != responsejs[<span class="string">&quot;errno&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;()) <span class="comment">//登录失败</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cerr &lt;&lt; responsejs[<span class="string">&quot;errmsg&quot;</span>] &lt;&lt; endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="comment">//登录成功</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cout &lt;&lt; responsejs[<span class="string">&quot;errmsg&quot;</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 记录当前用户的id和name</span></span><br><span class="line">                        g_currentUser.<span class="built_in">setId</span>(responsejs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                        g_currentUser.<span class="built_in">setName</span>(responsejs[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 记录当前用户的好友列表信息</span></span><br><span class="line">                        <span class="keyword">if</span>(responsejs.<span class="built_in">contains</span>(<span class="string">&quot;friends&quot;</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            vector&lt;string&gt; vec = responsejs[<span class="string">&quot;friends&quot;</span>];</span><br><span class="line">                            <span class="keyword">for</span>(string &amp;str:vec)</span><br><span class="line">                            &#123;</span><br><span class="line">                                json js = json::<span class="built_in">parse</span>(str);</span><br><span class="line">                                User user;</span><br><span class="line">                                user.<span class="built_in">setId</span>(js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                                user.<span class="built_in">setName</span>(js[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                                user.<span class="built_in">setState</span>(js[<span class="string">&quot;state&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                                g_currentFriendList.<span class="built_in">push_back</span>(user);</span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(responsejs.<span class="built_in">contains</span>(<span class="string">&quot;groups&quot;</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            vector&lt;string&gt; vec1 = responsejs[<span class="string">&quot;groups&quot;</span>];</span><br><span class="line">                            <span class="keyword">for</span>(string &amp;str1:vec1)</span><br><span class="line">                            &#123;</span><br><span class="line">                                json grpjs = json::<span class="built_in">parse</span>(str1);</span><br><span class="line">                                Group group;</span><br><span class="line">                                group.<span class="built_in">setId</span>(grpjs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                                group.<span class="built_in">setName</span>(grpjs[<span class="string">&quot;groupname&quot;</span>]);</span><br><span class="line">                                group.<span class="built_in">setDesc</span>(grpjs[<span class="string">&quot;groupdesc&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                                vector&lt;string&gt; vec2 = grpjs[<span class="string">&quot;users&quot;</span>];</span><br><span class="line">                                <span class="keyword">for</span>(string &amp;str2:vec2)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    json js = json::<span class="built_in">parse</span>(str2);</span><br><span class="line">                                    GroupUser user;</span><br><span class="line">                                    user.<span class="built_in">setId</span>(js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                                    user.<span class="built_in">setName</span>(js[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                                    user.<span class="built_in">setState</span>(js[<span class="string">&quot;state&quot;</span>]);</span><br><span class="line">                                    user.<span class="built_in">setRole</span>(js[<span class="string">&quot;role&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                                    group.<span class="built_in">getUsers</span>().<span class="built_in">push_back</span>(user);</span><br><span class="line">                                &#125;</span><br><span class="line">                                g_currentGroupList.<span class="built_in">push_back</span>(group);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line">                        <span class="built_in">showCurrentUserData</span>();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(responsejs.<span class="built_in">contains</span>(<span class="string">&quot;offlinemsg&quot;</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            vector&lt;string&gt; vec = responsejs[<span class="string">&quot;offlinemsg&quot;</span>];</span><br><span class="line">                            <span class="keyword">for</span>(string &amp;str: vec)</span><br><span class="line">                            &#123;</span><br><span class="line">                                json js = json::<span class="built_in">parse</span>(str);</span><br><span class="line">                                <span class="keyword">if</span>(ONE_CHAT_MSG == js[<span class="string">&quot;msgid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;())</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="comment">// time + [id] + name + &quot; said: &quot; + xxx</span></span><br><span class="line">                                    cout &lt;&lt; js[<span class="string">&quot;time&quot;</span>] &lt;&lt; <span class="string">&quot; [ &quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot; ] &quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>] </span><br><span class="line">                                    &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>] &lt;&lt; endl;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> <span class="keyword">if</span>(GROUP_CHAT_MSG == js[<span class="string">&quot;msgid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;())</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="comment">// time + [id] + name + &quot; said: &quot; + xxx</span></span><br><span class="line">                                    cout &lt;&lt; <span class="string">&quot;群消息[&quot;</span> &lt;&lt; js[<span class="string">&quot;groupid&quot;</span>] &lt;&lt; <span class="string">&quot;]:&quot;</span> &lt;&lt; js[<span class="string">&quot;time&quot;</span>] </span><br><span class="line">                                    &lt;&lt; <span class="string">&quot; [ &quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot; ]&quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>] &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>] </span><br><span class="line">                                    &lt;&lt; endl;</span><br><span class="line">                                    <span class="keyword">continue</span>;             </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;                            </span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//登陆成功，启动接受线程负责接受数据</span></span><br><span class="line">                        <span class="function">std::thread <span class="title">readTask</span><span class="params">(readTaskHandler,clientfd)</span></span>;</span><br><span class="line">                        readTask.<span class="built_in">detach</span>();</span><br><span class="line">                        <span class="comment">// 进入聊天主菜单页面</span></span><br><span class="line">                        <span class="built_in">mainMenu</span>(clientfd);                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cin.<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> name[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="type">char</span> password[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;name:&quot;</span> ;</span><br><span class="line">            cin.<span class="built_in">getline</span>(name,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;password:&quot;</span>;</span><br><span class="line">            cin.<span class="built_in">getline</span>(password,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">            json js;</span><br><span class="line">            js[<span class="string">&quot;msgid&quot;</span>] = REG_MSG;</span><br><span class="line">            js[<span class="string">&quot;name&quot;</span>] = name;</span><br><span class="line">            js[<span class="string">&quot;password&quot;</span>] = password;</span><br><span class="line">            string request = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,request.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(request.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                cerr &lt;&lt; <span class="string">&quot;send reg msg error:&quot;</span> &lt;&lt; request &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="type">int</span> len = <span class="built_in">recv</span>(clientfd,buffer,<span class="number">1024</span>,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">-1</span> == len)</span><br><span class="line">                &#123;</span><br><span class="line">                    cerr &lt;&lt; <span class="string">&quot;recv reg response error&quot;</span> &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                &#123;</span><br><span class="line">                    json responsejs = json::<span class="built_in">parse</span>(buffer);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="number">0</span> != responsejs[<span class="string">&quot;errno&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;())</span><br><span class="line">                    &#123;</span><br><span class="line">                        cerr &lt;&lt; name &lt;&lt; <span class="string">&quot; is already exist , register error !&quot;</span> &lt;&lt; endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="comment">//注册成功</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cerr &lt;&lt; <span class="string">&quot;register success , userid is &quot;</span> </span><br><span class="line">                        &lt;&lt; responsejs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;() &lt;&lt; </span><br><span class="line">                        <span class="string">&quot; , dot not forget it !&quot;</span> &lt;&lt; endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;</span><br><span class="line">        cin.<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">//quit业务</span></span><br><span class="line">            <span class="built_in">close</span>(clientfd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;invalid input!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showCurrentUserData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;======================login user======================&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;current login user =&gt; id:&quot;</span> &lt;&lt; g_currentUser.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; name:&quot;</span> </span><br><span class="line">    &lt;&lt; g_currentUser.<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------------friend list---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(!g_currentFriendList.<span class="built_in">empty</span>()) <span class="comment">//如果好友列表不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(User &amp;user:g_currentFriendList)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个好友信息:&quot;</span> &lt;&lt; user.<span class="built_in">getId</span>() </span><br><span class="line">            &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getState</span>() &lt;&lt; endl;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------------group list---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(!g_currentGroupList.<span class="built_in">empty</span>())<span class="comment">//群组信息不为空，才打印出来</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(Group &amp;group:g_currentGroupList)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; group.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; group.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> </span><br><span class="line">            &lt;&lt; group.<span class="built_in">getDesc</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(GroupUser &amp;user:group.<span class="built_in">getUsers</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个人信息:&quot;</span> &lt;&lt; user.<span class="built_in">getId</span>() </span><br><span class="line">                &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getState</span>() &lt;&lt; </span><br><span class="line">                <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getRole</span>() &lt;&lt; endl;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readTaskHandler</span><span class="params">(<span class="type">int</span> clientfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">recv</span>(clientfd, buffer, <span class="number">1024</span> , <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == len || <span class="number">0</span> == len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">close</span>(clientfd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接受ChatServer转发的数据，反序列化生产json数据对象</span></span><br><span class="line">        json js = json::<span class="built_in">parse</span>(buffer);</span><br><span class="line">        <span class="type">int</span> msgtype = js[<span class="string">&quot;msgid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span>(ONE_CHAT_MSG == msgtype)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// time + [id] + name + &quot; said: &quot; + xxx</span></span><br><span class="line">            cout &lt;&lt; js[<span class="string">&quot;time&quot;</span>] &lt;&lt; <span class="string">&quot; [ &quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot; ] &quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>] </span><br><span class="line">            &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>] &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(GROUP_CHAT_MSG == msgtype)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// time + [id] + name + &quot; said: &quot; + xxx</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;群消息[&quot;</span> &lt;&lt; js[<span class="string">&quot;groupid&quot;</span>] &lt;&lt; <span class="string">&quot;]:&quot;</span> &lt;&lt; js[<span class="string">&quot;time&quot;</span>] </span><br><span class="line">            &lt;&lt; <span class="string">&quot; [&quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>] &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>] </span><br><span class="line">            &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;help&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">help</span><span class="params">(<span class="type">int</span> fd = <span class="number">0</span> , string str = <span class="string">&quot; &quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">// &quot;chat&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chat</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">// &quot;addfriend&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addfriend</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">// &quot;creategroup&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">creategroup</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">//&quot;addgroup&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addgroup</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">//&quot;groupchat&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">groupchat</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">//&quot;groupchat&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loginout</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统支持的客户端命令列表</span></span><br><span class="line">unordered_map&lt;string,string&gt; commandMap = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;help&quot;</span>,<span class="string">&quot;显示所有支持的命令,格式help&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;chat&quot;</span>,<span class="string">&quot;一对一聊天,格式chat:friendid:message&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addfriend&quot;</span>,<span class="string">&quot;添加好友,格式addfriend:friendid&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;creategroup&quot;</span>,<span class="string">&quot;创建群组,格式creategroup:groupname:groupdesc&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addgroup&quot;</span>,<span class="string">&quot;加入群组,格式addgroup:groupid&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;groupchat&quot;</span>, <span class="string">&quot;群聊,格式groupchat:groupid:message&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;loginout&quot;</span>, <span class="string">&quot;注销，格式loginout&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册系统支持的客户端命令处理</span></span><br><span class="line">unordered_map&lt;string,function&lt;<span class="type">void</span>(<span class="type">int</span>,string)&gt;&gt; commandHandlerMap = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;help&quot;</span>,help&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;chat&quot;</span>,chat&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addfriend&quot;</span>,addfriend&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;creategroup&quot;</span>,creategroup&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addgroup&quot;</span>,addgroup&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;groupchat&quot;</span>,groupchat&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;loginout&quot;</span>,loginout&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;help&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">help</span><span class="params">(<span class="type">int</span>, string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;show command list &gt;&gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it:commandMap)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; it.first &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; it.second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主聊天页面程序，先显示一下系统支持的命令 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mainMenu</span><span class="params">(<span class="type">int</span> clientfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">help</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        cin.<span class="built_in">getline</span>(buffer, <span class="number">1024</span>);</span><br><span class="line">        <span class="function">string <span class="title">commandbuf</span><span class="params">(buffer)</span></span>;</span><br><span class="line">        string command;</span><br><span class="line">        <span class="type">int</span> idx = commandbuf.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == idx)</span><br><span class="line">        &#123;</span><br><span class="line">            command = commandbuf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            command = commandbuf.<span class="built_in">substr</span>(<span class="number">0</span>,idx);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = commandHandlerMap.<span class="built_in">find</span>(command);</span><br><span class="line">        <span class="keyword">if</span>(it == commandHandlerMap.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;invalid command&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用相应命令的事件处理回调,mainMenu对修改封闭,添加新功能</span></span><br><span class="line">        it-&gt;<span class="built_in">second</span>(clientfd,commandbuf.<span class="built_in">substr</span>(idx+<span class="number">1</span>,commandbuf.<span class="built_in">size</span>()-idx));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;chat&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chat</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> idx = str.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == idx)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;chat command invalid!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> friendid = <span class="built_in">atoi</span>((str.<span class="built_in">substr</span>(<span class="number">0</span>,idx)).<span class="built_in">c_str</span>());</span><br><span class="line">    string message = str.<span class="built_in">substr</span>(idx+<span class="number">1</span>,str.<span class="built_in">size</span>()-idx);</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = ONE_CHAT_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;name&quot;</span>] = g_currentUser.<span class="built_in">getName</span>();</span><br><span class="line">    js[<span class="string">&quot;toid&quot;</span>] = friendid;</span><br><span class="line">    js[<span class="string">&quot;msg&quot;</span>] = message;</span><br><span class="line">    js[<span class="string">&quot;time&quot;</span>] = <span class="built_in">getCurrentTime</span>();</span><br><span class="line"></span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send chat msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;addfriend&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addfriend</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> friendid = <span class="built_in">atoi</span>(str.<span class="built_in">c_str</span>());</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = ADD_FRIEND_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;friendid&quot;</span>] = friendid;</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == len)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send addfriend msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;creategroup&quot; command handler  groupname:groupdesc</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">creategroup</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> idx = str.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == idx)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;creategroup command invalid!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    string groupname = str.<span class="built_in">substr</span>(<span class="number">0</span>,idx);</span><br><span class="line">    string groupdesc = str.<span class="built_in">substr</span>(idx+<span class="number">1</span>,str.<span class="built_in">size</span>()-idx);</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = CREATE_GROUP_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;groupname&quot;</span>] = groupname;</span><br><span class="line">    js[<span class="string">&quot;groupdesc&quot;</span>] = groupdesc;</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send creategroup msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;addgroup&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addgroup</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> groupid = <span class="built_in">atoi</span>(str.<span class="built_in">c_str</span>());</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = ADD_GROUP_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;groupid&quot;</span>] = groupid;</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send addgroup msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;groupchat&quot; command handler   groupid:message</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">groupchat</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> idx = str.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == idx)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;groupchat command invalid!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> groupid = <span class="built_in">atoi</span>((str.<span class="built_in">substr</span>(<span class="number">0</span>,idx)).<span class="built_in">c_str</span>());</span><br><span class="line">    string message = str.<span class="built_in">substr</span>(idx+<span class="number">1</span>,str.<span class="built_in">size</span>()-idx);</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = GROUP_CHAT_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;name&quot;</span>] = g_currentUser.<span class="built_in">getName</span>();</span><br><span class="line">    js[<span class="string">&quot;groupid&quot;</span>] = groupid;</span><br><span class="line">    js[<span class="string">&quot;msg&quot;</span>] = message;</span><br><span class="line">    js[<span class="string">&quot;time&quot;</span>] = <span class="built_in">getCurrentTime</span>();</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send groupchat msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;loginout&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loginout</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = LOGINOUT_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send groupchat msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取系统时间（聊天信息需要添加时间信息）</span></span><br><span class="line"><span class="function">string <span class="title">getCurrentTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> tt = std::chrono::system_clock::<span class="built_in">to_time_t</span>(std::chrono::system_clock::<span class="built_in">now</span>());</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tm</span> *ptm = <span class="built_in">localtime</span>(&amp;tt);</span><br><span class="line">    <span class="type">char</span> date[<span class="number">60</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(date, <span class="string">&quot;%d-%02d-%02d %02d:%02d:%02d&quot;</span>,</span><br><span class="line">            (<span class="type">int</span>)ptm-&gt;tm_year + <span class="number">1900</span>, (<span class="type">int</span>)ptm-&gt;tm_mon + <span class="number">1</span>, (<span class="type">int</span>)ptm-&gt;tm_mday,</span><br><span class="line">            (<span class="type">int</span>)ptm-&gt;tm_hour, (<span class="type">int</span>)ptm-&gt;tm_min, (<span class="type">int</span>)ptm-&gt;tm_sec);</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">string</span>(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="25-1-问题"><a href="#25-1-问题" class="headerlink" title="25.1 问题"></a>25.1 问题</h3><p><strong>1.登录之后发现不能进入主界面</strong></p><p>解决方法:增加一个全局变量来控制</p><p>控制主菜单页面程序  bool isMainMenuRunning &#x3D; false;</p><p><strong>2.注销之后，再登录会打印两次好友信息、群组消息</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/25-01(1).png" alt="本地png图片PictureTest.png"></p><p><strong>解决方法：每次进入将好友和群组清空一下</strong></p><p><strong>3.第一次登录成功后会开启线程接受数据，注销之后，在登陆，又会开启新的线程</strong></p><p><strong>解决方法:使用静态局部变量进行控制</strong></p><p>编译，效果如下:</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/25-01(2).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/25-01(3).png" alt="本地png图片PictureTest.png"></p><h2 id="26-集群服务器为什么要引入负载均衡器"><a href="#26-集群服务器为什么要引入负载均衡器" class="headerlink" title="26 集群服务器为什么要引入负载均衡器"></a>26 集群服务器为什么要引入负载均衡器</h2><p>我们使用的socketfd本质上是文件描述符，默认大小是1024个，我们通过一个进程，使用limit调大，一台服务器在我们的32位的linux下并发量：2万左右的并发量，单台的chatserver支持2万左右的用户在线聊天，如果要支持3万，4万用户同时在线聊天就不可以了。如果我们想提供我们聊天服务器的并发能力，让更多的用户可以同时在线聊天，我们要进行集群部署。在水平方向上扩展多台主机，每一台主机运行着独立的chatserver，我们在下图中，引入了3台主机，每一台主机运行着独立的chatserver服务器，可以给用户提供聊天服务，但是，我们在用QQ客户端登录的时候，人家有没有问你想连哪个服务器？不能把选择服务器的决定扔给客户，客户又不知道哪个服务器空闲哪个服务器繁忙。所以，我们在集群聊天服务器，要引入负载均衡器，也叫做方向代理设备，帮我们统一接收客户端的请求，然后根据配置的既定的负载均衡算法，来把客户端的这些请分发到业务服务器chatserver上。</p><p>我们将使用nginx负载均衡器，nginx的TCP负载均衡模块可以轻松提供5-6万的并发量。我们一台nginx负载均衡器带上3台chatserver，能够马上把用户的并发量提升到5-6万。解决并发量最直接最简单的方法。如果要提供更大更大的并发量，也是有办法的：我们的负载均衡器本身也可以集群，前端再挂一个LVS（比较底层的负载均衡器）。负载均衡有业务层的负载均衡（业务分发），传输层的负载均衡（TCP,UDP），网络层的负载均衡（通过ip），数据链路层的负载均衡（数据帧）。LVS的并发量轻松到10多万。一台LVS带多台nginx就可以更大进行用户聊天的并发量。</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/26-01(1).png" alt="本地png图片PictureTest.png"></p><p>首先，用户在使用客户端的时候，不用去选择连接哪个服务器，客户端软件默认的连接负载均衡器，负载均衡器的角色相当于一个中间的桥梁，连接了客户端和服务器之间的通信，client1先发送请求到负载均衡器，负载均衡器根据配置的既定的负载算法，比如说轮询，按权重，按ip哈希等等，负载均衡器给client1的请求分发到了chatserver1上，相当于client1就登录到了chatserver1上。client2现在登录，通过负载算法，轮询，登录到了chatserver2上。再来client3登录的话，就登录到了chatserver3上。<br>就这样，分别注册到了3台服务器上。<br>这样的话，就有效地把不同的客户端用户分发到了不同的服务器上，一台32位的linux带2万，3台就是带6万并发量了。</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/26-01(2).png" alt="本地png图片PictureTest.png"></p><p>负载均衡器处理的3件事情如在上图中显示。<br>聊天服务器是长连接的业务，聊天的链路一直保持着。客户端的请求和服务器的响应都是要经过负载均衡器</p><p>也有的方法场景是：负载均衡只是做客户端请求的分发，分发了以后，服务器最终给客户端回复消息的时候是通过建立一条ip隧道，直接把请求响应给相应的客户端，因为负载均衡器可以把客户端的网络信息ip和port保存。关于心跳见我在基于RPC的分布式TCP通信框架项目的文章。</p><p>如果要再扩展一台设备。我们把这个设备的信息添加到负载均衡器上，然后再把负载均衡器重启一下，肯定是不行的，因为此时用户就不能使用了。但是nginx支持平滑启动，可以在不中断服务的前提下去加载配置文件，动态的识别新添加的服务信息。</p><h2 id="27-nginx的tcp负载均衡配置"><a href="#27-nginx的tcp负载均衡配置" class="headerlink" title="27 nginx的tcp负载均衡配置"></a>27 nginx的tcp负载均衡配置</h2><p>在服务器快速集群环境搭建中，都迫切需要一个能拿来即用的负载均衡器，nginx在1.9版本之前，只支持http协议web服务器的负载均衡，从1.9版本开始以后，</p><p>nginx开始支持tcp的长连接负载均衡，但是nginx默认并没有编译tcp负载均衡模块，编写它时，需要加入–with-stream参数来激活这个模块。</p><p>打开WinSCP，将<strong>nginx-1.12.2.tar.gz</strong>传送至服务器创建的目录，我的目录是&#x2F;home&#x2F;iot&#x2F;caiwei，进行解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.12.2.tar.gz</span><br><span class="line">su - root</span><br><span class="line">cd /home/iot/caiwei</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/27-01(1).png" alt="本地png图片PictureTest.png"></p><p><strong>问题：</strong>出现.&#x2F;configure: error: the HTTP rewrite module requires the PCRE library</p><p><strong>解决方法：</strong>sudo apt-get install libpcre3 libpcre3-dev</p><p>make &amp;&amp; make Install</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/27-01(2).png" alt="本地png图片PictureTest.png"></p><p>编译完成后，默认安装在了&#x2F;usr&#x2F;local&#x2F;nginx目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx</span><br></pre></td></tr></table></figure><p><strong>我们进入配置文件，修改配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#nginx tcp loadbalance config</span><br><span class="line">stream &#123;</span><br><span class="line">    upstream MyServer&#123;</span><br><span class="line">       server 127.0.0.1:6000 weight=1 max_fails=3 fail_timeout=30s;</span><br><span class="line">       server 127.0.0.1:6002 weight=1 max_fails=3 fail_timeout=30s;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     server &#123;</span><br><span class="line">     proxy_connect_timeout 1s;</span><br><span class="line">     #proxy_timeout 3s;</span><br><span class="line">     listen 8000;</span><br><span class="line">     proxy_pass MyServer;</span><br><span class="line">     tcp_nodelay on;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>nginx -s reload 重新加载配置文件启动</strong></p><p>我们写在http的上面<br>listen 8000；这个是nginx会监听的一个端口号，也就是说，所有的客户端连接指定的8000端口就可以，所有客户端发过来的请求在配置文件中，人家就写好了，你都连8000，客户端发的请求如果都在8000端口上，nginx感应到，你要我完成反向代理的操作，也就是负载均衡的操作，nginx就按照既定的负载均衡算法把这些请求分发到不同的服务器上。<br>proxy pass MyServer 相当于一个标记。<br>所有连接到8000端口的请求都连接到这个MyServer的信息里面负载均衡。<br>MyServer的这个upstream就是负载均衡模块，包含了几台机器呢？<br>包含了2台：127.0.0.1:6000，127.0.0.1.6002，相当于起了2台服务器，一个运行在6000端口，一个运行在6002端口。<br>weight&#x3D;1，就是权重，这2个服务器的权重都是1，就是说按照轮询算法，轮着往配置的服务器发，转着圈发送，<br>配置强的服务器，我们可以给它配置的权重大一些。<br>max_fails是在完成心跳机制，连续超过3次心跳失败，就认为服务器挂掉，fail_timeout，等心跳30秒。<br>如果要添加新的服务器，我们只需要在下面新增这台服务器的信息就可以了。<br>proxy_timeout 3s;是指nginx只和后端的chatserver连接3秒就断开，我们不加这个了。<br>proxy_connect_timeout的意思是nginx得连接后台的server服务器，第一次连接的时候发现超过1秒的时间还没有握手成功就判定连接失败了<br>tcp_nodelay on就是配置TCP的参数<br>listen 8000是让客户端都往8000端口发送数据，8000端口可以给你负载均衡，往MyServer负载均衡配置里面进行负载均衡<br>hash remote addr是另外一种基于哈希的负载算法，要单独安装插件</p><p><strong>启动nginx</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx</span><br><span class="line">netstat -tanp</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/27-01(3).png" alt="本地png图片PictureTest.png"></p><p>如果要停止nginx，不能发kill 进程ID号，因为nginx有进程容错机制，当提供服务的进程挂掉了，会自动重启，是kill不完的。执行s-s stop关闭他。</p><p><strong>修改一下&#x2F;src&#x2F;server&#x2F;main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatserver.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理服务器ctrl+c结束后，进行重置user的状态信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resetHandler</span><span class="params">(<span class="type">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ChatService::<span class="built_in">instance</span>()-&gt;<span class="built_in">reset</span>(); <span class="comment">//调用重置 </span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;command invalid! example: ./ChatServer 127.0.0.1 6000&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析通过命令行参数传递的ip和port</span></span><br><span class="line">    <span class="type">char</span> *ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> port = <span class="built_in">atoi</span>(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">signal</span>(SIGINT,resetHandler);</span><br><span class="line"></span><br><span class="line">    EventLoop loop;  <span class="comment">//相当于像是创建了epoll</span></span><br><span class="line">    <span class="function">InetAddress <span class="title">addr</span><span class="params">(ip,port)</span></span>; <span class="comment">//IP地址，端口号</span></span><br><span class="line">    <span class="function">ChatServer <span class="title">server</span><span class="params">(&amp;loop,addr,<span class="string">&quot;ChatServer&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    server.<span class="built_in">start</span>();  <span class="comment">//listenfd通过 epoll_ctl 添加到 epoll </span></span><br><span class="line">    loop.<span class="built_in">loop</span>();    <span class="comment">//相当于epoll_wait，以阻塞方式等待新用户连接，已连接用户的读写事件等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重新编译一下，启动两台服务器</strong></p><p><strong>启动两个客户端</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/27-01(4).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/27-01(5).png" alt="本地png图片PictureTest.png"></p><p><strong>我们客户端的请求先发的nginx，nginx根据配置既定的负载均衡算法，把第一个请求转到第一台服务器，根据权重相等，轮询，下一个客户端连接到第二台服务器。</strong></p><h2 id="28-redis发布订阅消息队列代码编写和测试"><a href="#28-redis发布订阅消息队列代码编写和测试" class="headerlink" title="28 redis发布订阅消息队列代码编写和测试"></a>28 redis发布订阅消息队列代码编写和测试</h2><h3 id="28-1-编译安装hiredis"><a href="#28-1-编译安装hiredis" class="headerlink" title="28.1 编译安装hiredis"></a>28.1 编译安装hiredis</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/redis/hiredis</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/28-01(1).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/28-01(2).png" alt="本地png图片PictureTest.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su - root</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/28-01(3).png" alt="本地png图片PictureTest.png"></p><h3 id="28-2-Redis发布订阅消息队列在项目上的代码实现"><a href="#28-2-Redis发布订阅消息队列在项目上的代码实现" class="headerlink" title="28.2 Redis发布订阅消息队列在项目上的代码实现"></a>28.2 Redis发布订阅消息队列在项目上的代码实现</h3><p><strong>我们在include下的server下创建文件夹：redis<br>我们在include的server的redis下创建文件：redis.hpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> REDIS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REDIS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;hiredis/hiredis.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Redis</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Redis</span>();</span><br><span class="line">    ~<span class="built_in">Redis</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接redis服务器 </span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connect</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向redis指定的通道channel发布消息</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">publish</span><span class="params">(<span class="type">int</span> channel, string message)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向redis指定的通道subscribe订阅消息</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">subscribe</span><span class="params">(<span class="type">int</span> channel)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向redis指定的通道unsubscribe取消订阅消息</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">unsubscribe</span><span class="params">(<span class="type">int</span> channel)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在独立线程中接收订阅通道中的消息</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">observer_channel_message</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化向业务层上报通道消息的回调对象</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init_notify_handler</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>, string)&gt; fn)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//hiredis同步上下文对象，负责publish消息，相当于客户端一个redis-client </span></span><br><span class="line">    redisContext *_publish_context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//hiredis同步上下文对象，负责subscribe消息，相当于客户端一个redis-client ，</span></span><br><span class="line"><span class="comment">// _publish和_subcribe不能在一个上下文处理 ,会阻塞 </span></span><br><span class="line">    redisContext *_subcribe_context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回调操作，收到订阅的消息，给service层上报</span></span><br><span class="line">    function&lt;<span class="type">void</span>(<span class="type">int</span>, string)&gt; _notify_message_handler;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>我们完善一下项目工程chatserver下的CMakeLists.txt</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.10)</span><br><span class="line">project(chat)</span><br><span class="line"></span><br><span class="line"># 配置编译选项</span><br><span class="line">set(CMAKE_CXX_FLAGS $&#123;CMAKE_CXX_FLAGS&#125; -g)</span><br><span class="line"></span><br><span class="line"># 设置可执行文件最终存储的路径</span><br><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/bin)</span><br><span class="line"></span><br><span class="line"># 配置头文件的搜索路径</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/include)</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/include/server)</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/thirdparty)</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/include/server/db)</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/include/server/model)</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/include/server/redis)</span><br><span class="line"></span><br><span class="line">add_subdirectory(src)</span><br></pre></td></tr></table></figure><p><strong>我们在src下的server下创建文件夹：redis<br>在src下的server下的redis下创建文件：redis.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;redis.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">Redis::<span class="built_in">Redis</span>() </span><br><span class="line">    : _publish_context(<span class="literal">nullptr</span>), _subcribe_context(<span class="literal">nullptr</span>)<span class="comment">//两个上下文指针 </span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Redis::~<span class="built_in">Redis</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_publish_context != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">redisFree</span>(_publish_context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_subcribe_context != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">redisFree</span>(_subcribe_context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Redis::connect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//负责publish发布消息的上下文连接</span></span><br><span class="line">    _publish_context = <span class="built_in">redisConnect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == _publish_context)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;connect redis failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//负责subscribe订阅消息的上下文连接</span></span><br><span class="line">    _subcribe_context = <span class="built_in">redisConnect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == _subcribe_context)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;connect redis failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在单独的线程中，监听通道上的事件，有消息给业务层进行上报</span></span><br><span class="line">    <span class="function">thread <span class="title">t</span><span class="params">([&amp;]() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        observer_channel_message();</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span>;</span><br><span class="line">    t.<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;connect redis-server success!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向redis指定的通道channel发布消息</span></span><br><span class="line"><span class="comment">//redisCommand先把命令缓存在本地，然后把命令发送到redis-server，然后阻塞等待命令的执行结果 </span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Redis::publish</span><span class="params">(<span class="type">int</span> channel, string message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisReply *reply = (redisReply *)<span class="built_in">redisCommand</span>(_publish_context, <span class="string">&quot;PUBLISH %d %s&quot;</span>, channel, message.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == reply)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;publish command failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">freeReplyObject</span>(reply);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向redis指定的通道subscribe订阅消息</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Redis::subscribe</span><span class="params">(<span class="type">int</span> channel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//SUBSCRIBE命令本身会造成线程阻塞等待通道里面发生消息，这里只做订阅通道，不接收通道消息</span></span><br><span class="line">    <span class="comment">//通道消息的接收专门在observer_channel_message函数中的独立线程中进行</span></span><br><span class="line">    <span class="comment">//只负责发送命令，不阻塞接收redis server响应消息，否则和notifyMsg线程抢占响应资源</span></span><br><span class="line">    <span class="keyword">if</span> (REDIS_ERR == <span class="built_in">redisAppendCommand</span>(<span class="keyword">this</span>-&gt;_subcribe_context, <span class="string">&quot;SUBSCRIBE %d&quot;</span>, channel))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;subscribe command failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//redisBufferWrite可以循环发送缓冲区，直到缓冲区数据发送完毕（done被置为1）</span></span><br><span class="line">    <span class="type">int</span> done = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!done)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (REDIS_ERR == <span class="built_in">redisBufferWrite</span>(<span class="keyword">this</span>-&gt;_subcribe_context, &amp;done))</span><br><span class="line">        &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;subscribe command failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//redisGetReply</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向redis指定的通道unsubscribe取消订阅消息</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Redis::unsubscribe</span><span class="params">(<span class="type">int</span> channel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (REDIS_ERR == <span class="built_in">redisAppendCommand</span>(<span class="keyword">this</span>-&gt;_subcribe_context, <span class="string">&quot;UNSUBSCRIBE %d&quot;</span>, channel))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;unsubscribe command failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//redisBufferWrite可以循环发送缓冲区，直到缓冲区数据发送完毕（done被置为1）</span></span><br><span class="line">    <span class="type">int</span> done = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!done)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (REDIS_ERR == <span class="built_in">redisBufferWrite</span>(<span class="keyword">this</span>-&gt;_subcribe_context, &amp;done))</span><br><span class="line">        &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;unsubscribe command failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在独立线程中接收订阅通道中的消息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Redis::observer_channel_message</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisReply *reply = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (REDIS_OK == <span class="built_in">redisGetReply</span>(<span class="keyword">this</span>-&gt;_subcribe_context, (<span class="type">void</span> **)&amp;reply))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//订阅收到的消息是一个带三元素的数组</span></span><br><span class="line">        <span class="keyword">if</span> (reply != <span class="literal">nullptr</span> &amp;&amp; reply-&gt;element[<span class="number">2</span>] != <span class="literal">nullptr</span> &amp;&amp; reply-&gt;element[<span class="number">2</span>]-&gt;str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//给业务层上报通道上发生的消息</span></span><br><span class="line">            _notify_message_handler(<span class="built_in">atoi</span>(reply-&gt;element[<span class="number">1</span>]-&gt;str) , reply-&gt;element[<span class="number">2</span>]-&gt;str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">freeReplyObject</span>(reply);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; observer_channel_message quit &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Redis::init_notify_handler</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>,string)&gt; fn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;_notify_message_handler = fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们完善src下的server下的CMakeLists.txt</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 把当前路径下的所有源文件名字放入变量名SRC_LIST里面</span><br><span class="line">aux_source_directory(. SRC_LIST)</span><br><span class="line">aux_source_directory(./db DB_LIST)</span><br><span class="line">aux_source_directory(./model MODEL_LIST)</span><br><span class="line">aux_source_directory(./model REDIS_LIST)</span><br><span class="line"></span><br><span class="line"># 表示生成可执行文件ChatServer，由SRC_LIST变量所定义的源文件</span><br><span class="line">add_executable(ChatServer $&#123;SRC_LIST&#125; $&#123;DB_LIST&#125; $&#123;MODEL_LIST&#125; $&#123;REDIS_LIST&#125;)</span><br><span class="line"></span><br><span class="line"># 指定可执行文件链接时需要依赖的库文件</span><br><span class="line">target_link_libraries(ChatServer muduo_net muduo_base pthread mysqlclient hiredis)</span><br></pre></td></tr></table></figure><p><strong>我们完善include&#x2F;server&#x2F;chatservice.hpp</strong></p><p>增加redis类对象</p><p>增加对从redis消息队列中获取订阅消息函数的声明</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CHATSERVICE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHATSERVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span> <span class="comment">//一个消息ID映射一个事件处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/net/TcpConnection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;muduo/base/Logging.h&gt;</span> <span class="comment">//muduo的日志 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usermodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;offlinemsgmodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;friendmodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;groupmodel.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;redis.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::net;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示处理消息的事件回调方法类型，事件处理器，派发3个东西 </span></span><br><span class="line"><span class="keyword">using</span> MsgHandler = function&lt;<span class="built_in">void</span>(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聊天服务器业务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//获取单例对象的接口函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ChatService *<span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理登录业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理注册业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理一对一聊天业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取消息对应的处理器</span></span><br><span class="line">    <span class="function">MsgHandler <span class="title">getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理客户端异常退出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理服务器异常退出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加好友业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addFriend</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建群组业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">createGroup</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入群组业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addGroup</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//群组聊天业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">groupChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//处理注销业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">loginout</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从redis消息队列中获取订阅的消息</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">handleRedisSubscribeMessage</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ChatService</span>(); <span class="comment">//单例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储在线用户的通信连接，用户的id， TcpConnectionPtr</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,TcpConnectionPtr&gt; _userConnMap;</span><br><span class="line">    <span class="comment">//存储消息id和其对应的业务处理方法，消息处理器的一个表，写消息id对应的处理操作 </span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,MsgHandler&gt; _msgHandlerMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据操作类对象</span></span><br><span class="line">    UserModel _userModel;</span><br><span class="line">    OfflineMsgModel _offlineMsgModel;</span><br><span class="line">    FriendModel _friendModel;</span><br><span class="line">    GroupModel _groupModel;</span><br><span class="line">    <span class="comment">//定义互斥锁，保证_userConnMap的线程安全</span></span><br><span class="line">    mutex _connMutex;</span><br><span class="line">    <span class="comment">//redis操作对象</span></span><br><span class="line">    Redis _redis;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p><strong>我们完善src&#x2F;server&#x2F;chatservice.cpp</strong></p><p>增加对从redis消息队列中获取订阅消息函数的编写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chatservice.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ChatService *<span class="title">ChatService::instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> ChatService service;</span><br><span class="line">    <span class="keyword">return</span> &amp;service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法，注册消息以及对应的Handler回调操作</span></span><br><span class="line">ChatService::<span class="built_in">ChatService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用户基本业务管理相关事件处理回调注册</span></span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGIN_MSG,<span class="built_in">bind</span>(&amp;ChatService::login,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGINOUT_MSG, std::<span class="built_in">bind</span>(&amp;ChatService::loginout, <span class="keyword">this</span>, _1, _2, _3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG,<span class="built_in">bind</span>(&amp;ChatService::reg,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;ONE_CHAT_MSG,<span class="built_in">bind</span>(&amp;ChatService::oneChat,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;ADD_FRIEND_MSG,<span class="built_in">bind</span>(&amp;ChatService::addFriend,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;CREATE_GROUP_MSG,<span class="built_in">bind</span>(&amp;ChatService::createGroup,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;ADD_GROUP_MSG,<span class="built_in">bind</span>(&amp;ChatService::addGroup,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;GROUP_CHAT_MSG,<span class="built_in">bind</span>(&amp;ChatService::groupChat,<span class="keyword">this</span>,_1,_2,_3)&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接redis服务器</span></span><br><span class="line">    <span class="keyword">if</span> (_redis.<span class="built_in">connect</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//设置上报消息的回调</span></span><br><span class="line">        _redis.<span class="built_in">init_notify_handler</span>(std::<span class="built_in">bind</span>(&amp;ChatService::handleRedisSubscribeMessage, <span class="keyword">this</span>, _1, _2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器异常，业务重置方法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//把online状态的用户，设置成offline</span></span><br><span class="line">    _userModel.<span class="built_in">resetState</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取消息对应的处理器</span></span><br><span class="line"><span class="function">MsgHandler <span class="title">ChatService::getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录错误日志，msgid没有对应的事件处理回调</span></span><br><span class="line">    <span class="keyword">auto</span> it = _msgHandlerMap.<span class="built_in">find</span>(msgid);</span><br><span class="line">    <span class="keyword">if</span>(it == _msgHandlerMap.<span class="built_in">end</span>())<span class="comment">//找不到 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回一个默认的处理器，空操作，=按值获取 </span></span><br><span class="line">        <span class="keyword">return</span> [=](<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_ERROR &lt;&lt; <span class="string">&quot;msgid:&quot;</span> &lt;&lt; msgid &lt;&lt; <span class="string">&quot; can not find handler!&quot;</span>;<span class="comment">//muduo日志会自动输出endl </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//成功的话 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second; <span class="comment">//返回这个处理器 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理登录业务  id  pwd   pwd</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取id号</span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码 </span></span><br><span class="line"></span><br><span class="line">    User user = _userModel.<span class="built_in">query</span>(id); <span class="comment">//查找 这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() == id &amp;&amp; user.<span class="built_in">getPassword</span>() == password) <span class="comment">//查出来了，登录成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>) <span class="comment">//该用户已经登录，不允许重复登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;this account is using,input another&quot;</span>;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串            </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//登录成功，记录用户连接信息，当多个用户登录时，都会操作这个_userConnMap</span></span><br><span class="line">            &#123;</span><br><span class="line">                lock_guard&lt;mutex&gt; <span class="built_in">lock</span>(_connMutex);</span><br><span class="line">                _userConnMap.<span class="built_in">insert</span>(&#123;id,conn&#125;);</span><br><span class="line">            &#125;<span class="comment">//加个作用域，出了这个右括号就自动解锁</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//id用户登录成功后，向redis订阅channel(id)</span></span><br><span class="line">            _redis.<span class="built_in">subscribe</span>(id); </span><br><span class="line"></span><br><span class="line">             <span class="comment">//登录成功，更新用户状态信息 state offline=&gt;online</span></span><br><span class="line">            user.<span class="built_in">setState</span>(<span class="string">&quot;online&quot;</span>);</span><br><span class="line">            _userModel.<span class="built_in">updateState</span>(user); <span class="comment">//这里要完善usermodel.cpp usermodel.hpp</span></span><br><span class="line"></span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">            response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">            response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">            response[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//查询该用户是否有离线消息</span></span><br><span class="line">            vector&lt;string&gt; vec = _offlineMsgModel.<span class="built_in">query</span>(id); <span class="comment">//查询用户ID</span></span><br><span class="line">            <span class="keyword">if</span>(!vec.<span class="built_in">empty</span>()) <span class="comment">//不为空</span></span><br><span class="line">            &#123;</span><br><span class="line">                response[<span class="string">&quot;offlinemsg&quot;</span>] = vec; <span class="comment">//json库可以和容器之间序列化和反序列化 </span></span><br><span class="line">                <span class="comment">//读取该用户的离线消息后，把该用户的所有离线消息删除掉</span></span><br><span class="line">                _offlineMsgModel.<span class="built_in">remove</span>(id);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//查询该用户的好友信息并返回</span></span><br><span class="line">            vector&lt;User&gt; userVec = _friendModel.<span class="built_in">query</span>(id);</span><br><span class="line">            <span class="keyword">if</span>(!userVec.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                vector&lt;string&gt; vec2;</span><br><span class="line">                <span class="keyword">for</span>(User &amp;user:userVec)</span><br><span class="line">                &#123;</span><br><span class="line">                    json js;</span><br><span class="line">                    js[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">                    js[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">                    js[<span class="string">&quot;state&quot;</span>] = user.<span class="built_in">getState</span>();</span><br><span class="line">                    vec2.<span class="built_in">push_back</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">                &#125;</span><br><span class="line">                response[<span class="string">&quot;friends&quot;</span>] = vec2;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//查询该用户的群组信息并返回</span></span><br><span class="line">            vector&lt;Group&gt; groupuserVec = _groupModel.<span class="built_in">queryGroups</span>(id);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!groupuserVec.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                vector&lt;string&gt; groupV;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(Group &amp;group:groupuserVec)</span><br><span class="line">                &#123;</span><br><span class="line">                    json grpjson;</span><br><span class="line">                    grpjson[<span class="string">&quot;id&quot;</span>] = group.<span class="built_in">getId</span>();</span><br><span class="line">                    grpjson[<span class="string">&quot;groupname&quot;</span>] = group.<span class="built_in">getName</span>();</span><br><span class="line">                    grpjson[<span class="string">&quot;groupdesc&quot;</span>] = group.<span class="built_in">getDesc</span>();</span><br><span class="line"></span><br><span class="line">                    vector&lt;string&gt; userV;</span><br><span class="line">                    <span class="keyword">for</span>(GroupUser &amp;user:group.<span class="built_in">getUsers</span>())</span><br><span class="line">                    &#123;</span><br><span class="line">                        json js;</span><br><span class="line">                        js[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">                        js[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">                        js[<span class="string">&quot;state&quot;</span>] = user.<span class="built_in">getState</span>();</span><br><span class="line">                        js[<span class="string">&quot;role&quot;</span>] = user.<span class="built_in">getRole</span>();</span><br><span class="line">                        userV.<span class="built_in">push_back</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                    grpjson[<span class="string">&quot;users&quot;</span>] = userV;</span><br><span class="line">                    groupV.<span class="built_in">push_back</span>(grpjson.<span class="built_in">dump</span>());</span><br><span class="line">                &#125;</span><br><span class="line">                response[<span class="string">&quot;groups&quot;</span>] = groupV;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//该用户不存在，用户存在但是密码错误，登录失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        response[<span class="string">&quot;errmsg&quot;</span>] = <span class="string">&quot;id or password is invalid&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注册业务  name  password</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name = js[<span class="string">&quot;name&quot;</span>];  <span class="comment">//获取名字 </span></span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];  <span class="comment">//获取密码</span></span><br><span class="line"></span><br><span class="line">    User user;  <span class="comment">//创建用户对象 </span></span><br><span class="line">    user.<span class="built_in">setName</span>(name);</span><br><span class="line">    user.<span class="built_in">setPassword</span>(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_userModel.<span class="built_in">insert</span>(user)) <span class="comment">//插入成功 </span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册成功</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">        response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//注册失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid:&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;errno&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>()); <span class="comment">//回调 ，返回json字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理客户端异常退出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::clientCloseException</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    User user;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = _userConnMap.<span class="built_in">begin</span>(); it != _userConnMap.<span class="built_in">end</span>();it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second == conn)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//从map表删除用户的链接信息</span></span><br><span class="line">                user.<span class="built_in">setId</span>(it-&gt;first);</span><br><span class="line">                _userConnMap.<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户注销，相当于就是下线，在redis中取消订阅通道</span></span><br><span class="line">    _redis.<span class="built_in">unsubscribe</span>(user.<span class="built_in">getId</span>()); </span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户的状态信息</span></span><br><span class="line">    <span class="keyword">if</span>(user.<span class="built_in">getId</span>() != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        user.<span class="built_in">setState</span>(<span class="string">&quot;offline&quot;</span>);</span><br><span class="line">        _userModel.<span class="built_in">updateState</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理一对一聊天业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> toid = js[<span class="string">&quot;toid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取对方的id号</span></span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>; <span class="comment">//访问连接信息表，要保证线程安全 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(toid);  <span class="comment">//查找对方id号 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it != _userConnMap.<span class="built_in">end</span>()) <span class="comment">//找到了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//toid在线，转发消息  服务器主动推送消息给toid用户</span></span><br><span class="line">            it-&gt;second-&gt;<span class="built_in">send</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询toid是否在线 </span></span><br><span class="line">    User user = _userModel.<span class="built_in">query</span>(toid);</span><br><span class="line">    <span class="keyword">if</span> (user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _redis.<span class="built_in">publish</span>(toid, js.<span class="built_in">dump</span>());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toid不在线，存储离线消息</span></span><br><span class="line">    _offlineMsgModel.<span class="built_in">insert</span>(toid,js.<span class="built_in">dump</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加好友业务 格式： msgid id friendid</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::addFriend</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,json &amp;js,Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//当前用户的id </span></span><br><span class="line">    <span class="type">int</span> friendid = js[<span class="string">&quot;friendid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//获取对方的id号 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(friendid);  <span class="comment">//查找对方id号 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it != _userConnMap.<span class="built_in">end</span>()) <span class="comment">//找到了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//toid在线，转发消息  服务器主动推送消息给friendid用户</span></span><br><span class="line">            it-&gt;second-&gt;<span class="built_in">send</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储好友信息</span></span><br><span class="line">    _friendModel.<span class="built_in">insert</span>(userid,friendid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建群组业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::createGroup</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//创建群的用户的id </span></span><br><span class="line">    string name = js[<span class="string">&quot;groupname&quot;</span>];</span><br><span class="line">    string desc = js[<span class="string">&quot;groupdesc&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储新创建的群组信息</span></span><br><span class="line">    Group group;</span><br><span class="line">    group.<span class="built_in">setName</span>(name);</span><br><span class="line">    group.<span class="built_in">setDesc</span>(desc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_groupModel.<span class="built_in">createGroup</span>(group))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//存储群组创建人信息</span></span><br><span class="line">        _groupModel.<span class="built_in">addGroup</span>(userid,group.<span class="built_in">getId</span>(),<span class="string">&quot;creator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加入群组业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::addGroup</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="type">int</span> groupid = js[<span class="string">&quot;groupid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    _groupModel.<span class="built_in">addGroup</span>(userid,groupid,<span class="string">&quot;normal&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//群组聊天业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::groupChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="type">int</span> groupid = js[<span class="string">&quot;groupid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; useridVec = _groupModel.<span class="built_in">queryGroupUsers</span>(userid, groupid);</span><br><span class="line">    <span class="comment">//查询这个用户所在群组的其他用户id </span></span><br><span class="line"></span><br><span class="line">    <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;<span class="comment">//不允许其他人在map里面增删改查 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> id:useridVec)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(id);</span><br><span class="line">        <span class="keyword">if</span>(it != _userConnMap.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            it-&gt;second-&gt;<span class="built_in">send</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//查询toid是否在线 </span></span><br><span class="line">            User user = _userModel.<span class="built_in">query</span>(id);</span><br><span class="line">            <span class="keyword">if</span> (user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _redis.<span class="built_in">publish</span>(id, js.<span class="built_in">dump</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//存储离线群消息</span></span><br><span class="line">                _offlineMsgModel.<span class="built_in">insert</span>(id, js.<span class="built_in">dump</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理注销业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::loginout</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(); </span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(userid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it != _userConnMap.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            _userConnMap.<span class="built_in">erase</span>(it);        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户注销，相当于就是下线，在redis中取消订阅通道</span></span><br><span class="line">    _redis.<span class="built_in">unsubscribe</span>(userid);</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">user</span><span class="params">(userid,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;offline&quot;</span>)</span></span>;</span><br><span class="line">    _userModel.<span class="built_in">updateState</span>(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从redis消息队列中获取订阅的消息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::handleRedisSubscribeMessage</span><span class="params">(<span class="type">int</span> userid, string msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(userid);</span><br><span class="line">    <span class="comment">//防止在找的过程，它下线了，就储存在离线表内</span></span><br><span class="line">    <span class="keyword">if</span> (it != _userConnMap.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        it-&gt;second-&gt;<span class="built_in">send</span>(msg);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储该用户的离线消息</span></span><br><span class="line">    _offlineMsgModel.<span class="built_in">insert</span>(userid, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="28-3-编译测试"><a href="#28-3-编译测试" class="headerlink" title="28.3 编译测试"></a>28.3 编译测试</h3><p><strong>写一个脚本文件build.sh</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">rm CMakeCache.txt</span><br><span class="line">rm Makefile</span><br><span class="line">rm cmake_install.cmake</span><br><span class="line">rm -r CMakeFiles</span><br><span class="line">rm ./src/Makefile</span><br><span class="line">rm ./src/cmake_install.cmake</span><br><span class="line">rm -r ./src/CMakeFiles</span><br><span class="line">rm ./src/server/Makefile</span><br><span class="line">rm ./src/server/cmake_install.cmake</span><br><span class="line">rm -r ./src/server/CMakeFiles</span><br><span class="line"></span><br><span class="line">cmake .</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>编译</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/28-01(4).png" alt="本地png图片PictureTest.png"></p><p><strong>启动两个服务器</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/28-01(5).png" alt="本地png图片PictureTest.png"></p><h2 id="29-github管理项目"><a href="#29-github管理项目" class="headerlink" title="29 github管理项目"></a>29 github管理项目</h2><p><strong>首先在本地产生chatserver</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:keaixiaocai/chatserver.git</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/29-01(1).png" alt="本地png图片PictureTest.png"></p><p>会出现以上的错误</p><p><strong>解决方法:</strong></p><p><strong>第一步：创建SSH Key pair</strong></p><p>输入ssh-keygen</p><p>提示输入秘钥名字和密码，为了方便起见，我这里选择不填</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/29-01(2).png" alt="本地png图片PictureTest.png"></p><p>可以看到秘钥生成在<code>/home/iot/.ssh这个地方，文件名为</code>id_rsa.pub&#96;</p><p>我们把这个文件的内容复制一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-rsa </span><br><span class="line">AAAAB3NzaC1yc2EAAAADAQABAAABAQDCCXsYW3fq6DUYZJtxPg6VjX51V9Pc5nFWWQMIHhnrFwDm96++CU5X4nX8zrT06Kbj0nSjTjf/9+5V9kk</span><br><span class="line">z4oibGl3Pb0IUlt/VkkE8qgfGEzJdBVlXA/ZZ55VEgyZ+c217lCyQg6afrojj0pElN0yYNOl4J2LDSjpHFgo3RBF4zvPOkE+Q5sRyyXqMwlBeLXqlGJVC7G</span><br><span class="line">AFUP/xUcycI7ZPd1PNF8FS2yfyg8P5nY34Uycltwc2Mn0PMYgqfRUtOxlHWbNJbxduqpht01IzGkZGD0m55Pq+/p4KudzDT/so3iGg2NMyDu+KYqgHCKWyC</span><br><span class="line">2SsQvT/UXTO6XNTpoijcgkj iot@ANT</span><br></pre></td></tr></table></figure><p><strong>第二步：将SSH key添加到Github账户</strong></p><p>在github点击头像-&gt;setting</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/29-01(3).png" alt="本地png图片PictureTest.png"></p><p><strong>点击SSH and GPG keys</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/29-01(4).png" alt="本地png图片PictureTest.png"></p><p><strong>点击New SSH key</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/29-01(5).png" alt="本地png图片PictureTest.png"></p><p><strong>把刚刚复制的秘钥粘贴到Key里面</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/29-01(6).png" alt="本地png图片PictureTest.png"></p><p>然后再输入命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:keaixiaocai/chatserver.git</span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;提交所有项目代码&quot;</span><br></pre></td></tr></table></figure><p><strong>出现以下问题:</strong></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/29-01(7).png" alt="本地png图片PictureTest.png"></p><p><strong>解决方法:</strong></p><p>我们进入.git目录下，将配置文件添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">email = 1819117719@qq.com</span><br><span class="line">name = caiwei</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/29-01(8).png" alt="本地png图片PictureTest.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">然后输入git commit -m &quot;提交所有项目代码&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/29-01(9).png" alt="本地png图片PictureTest.png"></p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/29-01(10).png" alt="本地png图片PictureTest.png"></p><h2 id="30-客户端注销问题"><a href="#30-客户端注销问题" class="headerlink" title="30 客户端注销问题"></a>30 客户端注销问题</h2><h3 id="30-1-找出问题"><a href="#30-1-找出问题" class="headerlink" title="30.1 找出问题"></a>30.1 找出问题</h3><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/30-01(1).png" alt="本地png图片PictureTest.png"></p><p>客户端注销后再次登录，失败了。</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/30-01(2).png" alt="本地png图片PictureTest.png"></p><p>gdb attach 4207</p><p>info threads</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/30-01(3).png" alt="本地png图片PictureTest.png"></p><p>我们的客户端有2个线程：一个专门读（主线程，接收客户端用户的输入，然后发送），一个专门写（子线程，<a href="https://so.csdn.net/so/search?q=recv&spm=1001.2101.3001.7020">recv</a>接收，打印信息）<br>但是，我们现在看到，这2个线程都在recv</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/30-01(4).png" alt="本地png图片PictureTest.png"></p><p>主线程阻塞在这里：</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/30-01(5).png" alt="本地png图片PictureTest.png"></p><p>很明显，我们的子线程也在recv上，</p><p>thread 2</p><p>bt</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/30-01(6).png" alt="本地png图片PictureTest.png"></p><p>我们看到，子线程也阻塞在recv</p><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/30-01(7).png" alt="本地png图片PictureTest.png"></p><p>也就是说，现在的现象是：客户端刚才登录成功，然后注销退出，然后重新登录，客户端没反应了。我们是通过gdb attach到正在运行的进程上，大致的看所有的线程和线程调用堆栈的详细信息，就可以知道现在的任务是阻塞在哪里了。现在的情况是：接收线程（读线程）现在在recv处阻塞了，主线程（写线程）也是在它对应的recv处阻塞了。我们刚开始进行登录的时候，打包了登录的json包数据发送到服务器，然后就在recv处阻塞，等待服务器对登录的消息进行响应，客户端得到响应后，对发送过来的json数据进行反序列化。拿到相应的字段进行业务的处理，然后启动子线程，登录成功后，把读线程启动,进入mainMenu，进行登录时的信息的打印然后现在注销了，并没有把子线程关闭掉，注销以后，我们再进行登录的时候，主线程去send，send后主线程马上recv，子线程此时也在recv，因为子线程的代码是无限的for循环，不断的recv。实际上，我们是想要主线程发的登录消息，由主线程去接收它的响应，接收了以后就不会阻塞了，就继续向下执行，但是，第二次send的时候，由于子线程抢到了recv，因为主线程和子线程都是处理的是同一个clientfd，子线程把这个数据recv了，但是子线程的代码没有相应的消息类型的处理啊，子线程只有单聊和群聊的消息类型的操作，然后子线程转了一圈，又阻塞在recv了，而主线程在recv登录的响应，却被子线程接收了，所以导致主线程的recv并没有接收到任何响应，一直阻塞住。</p><h3 id="30-2-改进代码"><a href="#30-2-改进代码" class="headerlink" title="30.2 改进代码"></a>30.2 改进代码</h3><p>彻底的把线程的接收分离开。<br>主线程：发送线程<br>子线程：接收线程<br>我们把客户端创建socket，connect服务器成功以后，我们就把子线程启动，而不是等登录之后才启动子线程。<br>TCP连接都创建成功了，就把子线程启动就好了，子线程专门做for无限循环做recv接收服务器的响应消息，专门做读操作。<br>然后主线程进来首界面（1登录，2注册，3退出）<br>主线程做的事情是：登录：提醒用户输入id和密码。打包数据进行json的序列化，然后send，通过网络发送到服务器，服务器响应，统一是由子线程进行接收，子线程接收响应消息的时候可以根据消息的类型识别这是登录的响应消息，主线程在send以后，应该等一等：等待登录是成功还是登录失败，这是在子线程进行判断的，所以，我们要添加通知机制，主线程（发送线程）send之后要进行等待，然后子线程来recv接收这个登录的响应消息，然后根据登录的响应消息：成功或者失败，去写一些标志，然后通过信号量，告诉主线程，（线程间的通信），然后主线程继续往下走，通过一个变量判断登录成功还是失败，登录失败的话，继续转到首界面，登录成功的话，转到主界面。<br><img src="E:/蔡伟/14-笔记/图片/6-基于muduo网络库的集群服务器项目/30-01(8).png" alt="本地png图片PictureTest.png"></p><p>C++11提供了互斥锁和条件变量，但是没有提供信号量，所以我们使用Linux原生的pthread库的信号量<br>除了增加信号量（负责通知主线程，子线程已经把响应处理完了），我们还要增加一个标志（登录成功还是失败），这个标志变量定义成原子类型（C++11 CAS，自带volitale属性），因为在2个线程中要使用。</p><p>修改&#x2F;src&#x2F;client&#x2F;main.cpp</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gruop.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录当前登录用户的信息</span></span><br><span class="line">User g_currentUser;</span><br><span class="line"><span class="comment">// 记录当前用户朋友的信息</span></span><br><span class="line">vector&lt;User&gt; g_currentFriendList; </span><br><span class="line"><span class="comment">// 记录当前用户群组的信息</span></span><br><span class="line">vector&lt;Group&gt; g_currentGroupList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取系统时间（聊天信息需要添加时间信息）</span></span><br><span class="line"><span class="function">string <span class="title">getCurrentTime</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showCurrentUserData</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//接收线程 控制台应用程序，接收用户的手动输入，用户不输入cin就阻塞住，所以要2个线程 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readTaskHandler</span><span class="params">(<span class="type">int</span> clientfd)</span></span>;</span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mainMenu</span><span class="params">(<span class="type">int</span> clientfd)</span></span>;</span><br><span class="line"><span class="comment">//控制主菜单页面程序</span></span><br><span class="line"><span class="type">bool</span> isMainMenuRunning = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于读写线程之间的通信</span></span><br><span class="line"><span class="type">sem_t</span> rwsem;</span><br><span class="line"><span class="comment">//记录登录状态</span></span><br><span class="line">atomic_bool g_isLoginSuccess&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聊天客户端程序实现，main线程用作发送线程，子线程用作接受线程</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;command invalid example : ./ChatClient 127.0.0.1 6000&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建client端的socket</span></span><br><span class="line">    <span class="type">int</span> clientfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM , <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == clientfd)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;socket create error&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint16_t</span> port = <span class="built_in">atoi</span>(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//填写client需要连接的server信息ip+port</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv,<span class="number">0</span>,<span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line">    serv.sin_family = AF_INET;</span><br><span class="line">    serv.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">    serv.sin_addr.s_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// client和server进行连接</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">connect</span>(clientfd,(<span class="type">const</span> sockaddr *)&amp;serv,<span class="built_in">sizeof</span>(sockaddr_in)))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;connect server error&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">close</span>(clientfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化读写线程通信用的信号量</span></span><br><span class="line">    <span class="built_in">sem_init</span>(&amp;rwsem, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接服务器成功，启动接收子线程</span></span><br><span class="line">    <span class="function">std::thread <span class="title">readTask</span><span class="params">(readTaskHandler, clientfd)</span></span>; <span class="comment">// pthread_create</span></span><br><span class="line">    readTask.<span class="built_in">detach</span>();                               <span class="comment">// pthread_detach</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//main线程用于接受用户输入，负责发送数据</span></span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 显示首页面菜单 登录、注册、退出</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;========================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1.login&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2.register&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;3.quit&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;========================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;choice:&quot;</span>;</span><br><span class="line">        <span class="type">int</span> choice = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; choice;</span><br><span class="line">        cin.<span class="built_in">get</span>(); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">            <span class="type">char</span> password[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;userid:&quot;</span>;</span><br><span class="line">            cin &gt;&gt; id;</span><br><span class="line">            cin.<span class="built_in">get</span>();  <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;userpassword:&quot;</span>;</span><br><span class="line">            cin.<span class="built_in">getline</span>(password,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">            json js;</span><br><span class="line">            js[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG;</span><br><span class="line">            js[<span class="string">&quot;id&quot;</span>] = id;</span><br><span class="line">            js[<span class="string">&quot;password&quot;</span>] = password;</span><br><span class="line">            string request = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">            g_isLoginSuccess = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,request.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(request.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                cerr &lt;&lt; <span class="string">&quot;send login msg error:&quot;</span> &lt;&lt; request &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">sem_wait</span>(&amp;rwsem); <span class="comment">// 等待信号量，由子线程处理完登录的响应消息后，通知这里</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(g_isLoginSuccess)</span><br><span class="line">            &#123;</span><br><span class="line">                isMainMenuRunning = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// 进入聊天主菜单页面</span></span><br><span class="line">                <span class="built_in">mainMenu</span>(clientfd);</span><br><span class="line">            &#125;       </span><br><span class="line">        &#125;</span><br><span class="line">        cin.<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> name[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="type">char</span> password[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;name:&quot;</span> ;</span><br><span class="line">            cin.<span class="built_in">getline</span>(name,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;password:&quot;</span>;</span><br><span class="line">            cin.<span class="built_in">getline</span>(password,<span class="number">50</span>); <span class="comment">//读掉缓冲区残留的回车</span></span><br><span class="line"></span><br><span class="line">            json js;</span><br><span class="line">            js[<span class="string">&quot;msgid&quot;</span>] = REG_MSG;</span><br><span class="line">            js[<span class="string">&quot;name&quot;</span>] = name;</span><br><span class="line">            js[<span class="string">&quot;password&quot;</span>] = password;</span><br><span class="line">            string request = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,request.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(request.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                cerr &lt;&lt; <span class="string">&quot;send reg msg error:&quot;</span> &lt;&lt; request &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">sem_wait</span>(&amp;rwsem); <span class="comment">// 等待信号量，子线程处理完注册消息会通知     </span></span><br><span class="line">        &#125;</span><br><span class="line">        cin.<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">//quit业务</span></span><br><span class="line">            <span class="built_in">close</span>(clientfd);</span><br><span class="line">            <span class="built_in">sem_destroy</span>(&amp;rwsem);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;invalid input!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showCurrentUserData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;======================login user======================&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;current login user =&gt; id:&quot;</span> &lt;&lt; g_currentUser.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; name:&quot;</span> </span><br><span class="line">    &lt;&lt; g_currentUser.<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------------friend list---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(!g_currentFriendList.<span class="built_in">empty</span>()) <span class="comment">//如果好友列表不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(User &amp;user:g_currentFriendList)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个好友信息:&quot;</span> &lt;&lt; user.<span class="built_in">getId</span>() </span><br><span class="line">            &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getState</span>() &lt;&lt; endl;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------------group list---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(!g_currentGroupList.<span class="built_in">empty</span>())<span class="comment">//群组信息不为空，才打印出来</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(Group &amp;group:g_currentGroupList)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; group.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; group.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> </span><br><span class="line">            &lt;&lt; group.<span class="built_in">getDesc</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(GroupUser &amp;user:group.<span class="built_in">getUsers</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个人信息:&quot;</span> &lt;&lt; user.<span class="built_in">getId</span>() </span><br><span class="line">                &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getState</span>() &lt;&lt; </span><br><span class="line">                <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getRole</span>() &lt;&lt; endl;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理注册的响应逻辑</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doRegResponse</span><span class="params">(json &amp;responsejs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> != responsejs[<span class="string">&quot;errno&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;())</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;name is already exist , register error !&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//注册成功</span></span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;name register success , userid is &quot;</span> </span><br><span class="line">        &lt;&lt; responsejs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;() &lt;&lt; </span><br><span class="line">        <span class="string">&quot; , dot not forget it !&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理登录的响应逻辑</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doLoginResponse</span><span class="params">(json &amp;responsejs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> != responsejs[<span class="string">&quot;errno&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;()) <span class="comment">//登录失败</span></span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; responsejs[<span class="string">&quot;errmsg&quot;</span>] &lt;&lt; endl;</span><br><span class="line">        g_isLoginSuccess = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//登录成功</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; responsejs[<span class="string">&quot;errmsg&quot;</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录当前用户的id和name</span></span><br><span class="line">        g_currentUser.<span class="built_in">setId</span>(responsejs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        g_currentUser.<span class="built_in">setName</span>(responsejs[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录当前用户的好友列表信息</span></span><br><span class="line">        <span class="keyword">if</span>(responsejs.<span class="built_in">contains</span>(<span class="string">&quot;friends&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            g_currentFriendList.<span class="built_in">clear</span>();</span><br><span class="line">            vector&lt;string&gt; vec = responsejs[<span class="string">&quot;friends&quot;</span>];</span><br><span class="line">            <span class="keyword">for</span>(string &amp;str:vec)</span><br><span class="line">            &#123;</span><br><span class="line">                json js = json::<span class="built_in">parse</span>(str);</span><br><span class="line">                User user;</span><br><span class="line">                user.<span class="built_in">setId</span>(js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                user.<span class="built_in">setName</span>(js[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                user.<span class="built_in">setState</span>(js[<span class="string">&quot;state&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                g_currentFriendList.<span class="built_in">push_back</span>(user);</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(responsejs.<span class="built_in">contains</span>(<span class="string">&quot;groups&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            g_currentGroupList.<span class="built_in">clear</span>();</span><br><span class="line">            vector&lt;string&gt; vec1 = responsejs[<span class="string">&quot;groups&quot;</span>];</span><br><span class="line">            <span class="keyword">for</span>(string &amp;str1:vec1)</span><br><span class="line">            &#123;</span><br><span class="line">                json grpjs = json::<span class="built_in">parse</span>(str1);</span><br><span class="line">                Group group;</span><br><span class="line">                group.<span class="built_in">setId</span>(grpjs[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                group.<span class="built_in">setName</span>(grpjs[<span class="string">&quot;groupname&quot;</span>]);</span><br><span class="line">                group.<span class="built_in">setDesc</span>(grpjs[<span class="string">&quot;groupdesc&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                vector&lt;string&gt; vec2 = grpjs[<span class="string">&quot;users&quot;</span>];</span><br><span class="line">                <span class="keyword">for</span>(string &amp;str2:vec2)</span><br><span class="line">                &#123;</span><br><span class="line">                    json js = json::<span class="built_in">parse</span>(str2);</span><br><span class="line">                    GroupUser user;</span><br><span class="line">                    user.<span class="built_in">setId</span>(js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">                    user.<span class="built_in">setName</span>(js[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                    user.<span class="built_in">setState</span>(js[<span class="string">&quot;state&quot;</span>]);</span><br><span class="line">                    user.<span class="built_in">setRole</span>(js[<span class="string">&quot;role&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                    group.<span class="built_in">getUsers</span>().<span class="built_in">push_back</span>(user);</span><br><span class="line">                &#125;</span><br><span class="line">                g_currentGroupList.<span class="built_in">push_back</span>(group);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示登录用户的基本信息</span></span><br><span class="line">        <span class="built_in">showCurrentUserData</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(responsejs.<span class="built_in">contains</span>(<span class="string">&quot;offlinemsg&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            vector&lt;string&gt; vec = responsejs[<span class="string">&quot;offlinemsg&quot;</span>];</span><br><span class="line">            <span class="keyword">for</span>(string &amp;str: vec)</span><br><span class="line">            &#123;</span><br><span class="line">                json js = json::<span class="built_in">parse</span>(str);</span><br><span class="line">                <span class="keyword">if</span>(ONE_CHAT_MSG == js[<span class="string">&quot;msgid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// time + [id] + name + &quot; said: &quot; + xxx</span></span><br><span class="line">                    cout &lt;&lt; js[<span class="string">&quot;time&quot;</span>] &lt;&lt; <span class="string">&quot; [ &quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot; ] &quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>] </span><br><span class="line">                    &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>] &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(GROUP_CHAT_MSG == js[<span class="string">&quot;msgid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// time + [id] + name + &quot; said: &quot; + xxx</span></span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;群消息[&quot;</span> &lt;&lt; js[<span class="string">&quot;groupid&quot;</span>] &lt;&lt; <span class="string">&quot;]:&quot;</span> &lt;&lt; js[<span class="string">&quot;time&quot;</span>] </span><br><span class="line">                    &lt;&lt; <span class="string">&quot; [ &quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot; ]&quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>] &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>] </span><br><span class="line">                    &lt;&lt; endl;</span><br><span class="line">                    <span class="keyword">continue</span>;             </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;                            </span><br><span class="line">        &#125;</span><br><span class="line">        g_isLoginSuccess = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readTaskHandler</span><span class="params">(<span class="type">int</span> clientfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">recv</span>(clientfd, buffer, <span class="number">1024</span> , <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == len || <span class="number">0</span> == len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">close</span>(clientfd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接受ChatServer转发的数据，反序列化生产json数据对象</span></span><br><span class="line">        json js = json::<span class="built_in">parse</span>(buffer);</span><br><span class="line">        <span class="type">int</span> msgtype = js[<span class="string">&quot;msgid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span>(ONE_CHAT_MSG == msgtype)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// time + [id] + name + &quot; said: &quot; + xxx</span></span><br><span class="line">            cout &lt;&lt; js[<span class="string">&quot;time&quot;</span>] &lt;&lt; <span class="string">&quot; [ &quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot; ] &quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>] </span><br><span class="line">            &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>] &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(GROUP_CHAT_MSG == msgtype)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// time + [id] + name + &quot; said: &quot; + xxx</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;群消息[&quot;</span> &lt;&lt; js[<span class="string">&quot;groupid&quot;</span>] &lt;&lt; <span class="string">&quot;]:&quot;</span> &lt;&lt; js[<span class="string">&quot;time&quot;</span>] </span><br><span class="line">            &lt;&lt; <span class="string">&quot; [&quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>] &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>] </span><br><span class="line">            &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;             </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(LOGIN_MSG_ACK == msgtype)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">doLoginResponse</span>(js); <span class="comment">// 处理登录响应的业务逻辑</span></span><br><span class="line">            <span class="built_in">sem_post</span>(&amp;rwsem);   <span class="comment">// 通知主线程，登录结果处理完成</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(REG_MSG_ACK == msgtype)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">doRegResponse</span>(js);  <span class="comment">// 处理注册的响应逻辑</span></span><br><span class="line">            <span class="built_in">sem_post</span>(&amp;rwsem);   <span class="comment">// 通知主线程，登录结果处理完成</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;help&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">help</span><span class="params">(<span class="type">int</span> fd = <span class="number">0</span> , string str = <span class="string">&quot; &quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">// &quot;chat&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chat</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">// &quot;addfriend&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addfriend</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">// &quot;creategroup&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">creategroup</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">//&quot;addgroup&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addgroup</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">//&quot;groupchat&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">groupchat</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"><span class="comment">//&quot;groupchat&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loginout</span><span class="params">(<span class="type">int</span>, string)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统支持的客户端命令列表</span></span><br><span class="line">unordered_map&lt;string,string&gt; commandMap = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;help&quot;</span>,<span class="string">&quot;显示所有支持的命令,格式help&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;chat&quot;</span>,<span class="string">&quot;一对一聊天,格式chat:friendid:message&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addfriend&quot;</span>,<span class="string">&quot;添加好友,格式addfriend:friendid&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;creategroup&quot;</span>,<span class="string">&quot;创建群组,格式creategroup:groupname:groupdesc&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addgroup&quot;</span>,<span class="string">&quot;加入群组,格式addgroup:groupid&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;groupchat&quot;</span>, <span class="string">&quot;群聊,格式groupchat:groupid:message&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;loginout&quot;</span>, <span class="string">&quot;注销，格式loginout&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册系统支持的客户端命令处理</span></span><br><span class="line">unordered_map&lt;string,function&lt;<span class="type">void</span>(<span class="type">int</span>,string)&gt;&gt; commandHandlerMap = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;help&quot;</span>,help&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;chat&quot;</span>,chat&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addfriend&quot;</span>,addfriend&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;creategroup&quot;</span>,creategroup&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addgroup&quot;</span>,addgroup&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;groupchat&quot;</span>,groupchat&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;loginout&quot;</span>,loginout&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;help&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">help</span><span class="params">(<span class="type">int</span>, string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;show command list &gt;&gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it:commandMap)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; it.first &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; it.second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主聊天页面程序，先显示一下系统支持的命令 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mainMenu</span><span class="params">(<span class="type">int</span> clientfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">help</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(isMainMenuRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        cin.<span class="built_in">getline</span>(buffer, <span class="number">1024</span>);</span><br><span class="line">        <span class="function">string <span class="title">commandbuf</span><span class="params">(buffer)</span></span>;</span><br><span class="line">        string command;</span><br><span class="line">        <span class="type">int</span> idx = commandbuf.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == idx)</span><br><span class="line">        &#123;</span><br><span class="line">            command = commandbuf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            command = commandbuf.<span class="built_in">substr</span>(<span class="number">0</span>,idx);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = commandHandlerMap.<span class="built_in">find</span>(command);</span><br><span class="line">        <span class="keyword">if</span>(it == commandHandlerMap.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;invalid command&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用相应命令的事件处理回调,mainMenu对修改封闭,添加新功能</span></span><br><span class="line">        it-&gt;<span class="built_in">second</span>(clientfd,commandbuf.<span class="built_in">substr</span>(idx+<span class="number">1</span>,commandbuf.<span class="built_in">size</span>()-idx));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;chat&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chat</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> idx = str.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == idx)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;chat command invalid!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> friendid = <span class="built_in">atoi</span>((str.<span class="built_in">substr</span>(<span class="number">0</span>,idx)).<span class="built_in">c_str</span>());</span><br><span class="line">    string message = str.<span class="built_in">substr</span>(idx+<span class="number">1</span>,str.<span class="built_in">size</span>()-idx);</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = ONE_CHAT_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;name&quot;</span>] = g_currentUser.<span class="built_in">getName</span>();</span><br><span class="line">    js[<span class="string">&quot;toid&quot;</span>] = friendid;</span><br><span class="line">    js[<span class="string">&quot;msg&quot;</span>] = message;</span><br><span class="line">    js[<span class="string">&quot;time&quot;</span>] = <span class="built_in">getCurrentTime</span>();</span><br><span class="line"></span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send chat msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;addfriend&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addfriend</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> friendid = <span class="built_in">atoi</span>(str.<span class="built_in">c_str</span>());</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = ADD_FRIEND_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;friendid&quot;</span>] = friendid;</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == len)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send addfriend msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;creategroup&quot; command handler  groupname:groupdesc</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">creategroup</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> idx = str.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == idx)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;creategroup command invalid!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    string groupname = str.<span class="built_in">substr</span>(<span class="number">0</span>,idx);</span><br><span class="line">    string groupdesc = str.<span class="built_in">substr</span>(idx+<span class="number">1</span>,str.<span class="built_in">size</span>()-idx);</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = CREATE_GROUP_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;groupname&quot;</span>] = groupname;</span><br><span class="line">    js[<span class="string">&quot;groupdesc&quot;</span>] = groupdesc;</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send creategroup msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;addgroup&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addgroup</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> groupid = <span class="built_in">atoi</span>(str.<span class="built_in">c_str</span>());</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = ADD_GROUP_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;groupid&quot;</span>] = groupid;</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send addgroup msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;groupchat&quot; command handler   groupid:message</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">groupchat</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> idx = str.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == idx)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;groupchat command invalid!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> groupid = <span class="built_in">atoi</span>((str.<span class="built_in">substr</span>(<span class="number">0</span>,idx)).<span class="built_in">c_str</span>());</span><br><span class="line">    string message = str.<span class="built_in">substr</span>(idx+<span class="number">1</span>,str.<span class="built_in">size</span>()-idx);</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = GROUP_CHAT_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    js[<span class="string">&quot;name&quot;</span>] = g_currentUser.<span class="built_in">getName</span>();</span><br><span class="line">    js[<span class="string">&quot;groupid&quot;</span>] = groupid;</span><br><span class="line">    js[<span class="string">&quot;msg&quot;</span>] = message;</span><br><span class="line">    js[<span class="string">&quot;time&quot;</span>] = <span class="built_in">getCurrentTime</span>();</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send groupchat msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;loginout&quot; command handler</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loginout</span><span class="params">(<span class="type">int</span> clientfd,string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    json js;</span><br><span class="line">    js[<span class="string">&quot;msgid&quot;</span>] = LOGINOUT_MSG;</span><br><span class="line">    js[<span class="string">&quot;id&quot;</span>] = g_currentUser.<span class="built_in">getId</span>();</span><br><span class="line">    string buffer = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == <span class="built_in">send</span>(clientfd,buffer.<span class="built_in">c_str</span>(),<span class="built_in">strlen</span>(buffer.<span class="built_in">c_str</span>())+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;send loginout msg error -&gt; &quot;</span> &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        isMainMenuRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取系统时间（聊天信息需要添加时间信息）</span></span><br><span class="line"><span class="function">string <span class="title">getCurrentTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> tt = std::chrono::system_clock::<span class="built_in">to_time_t</span>(std::chrono::system_clock::<span class="built_in">now</span>());</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tm</span> *ptm = <span class="built_in">localtime</span>(&amp;tt);</span><br><span class="line">    <span class="type">char</span> date[<span class="number">60</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(date, <span class="string">&quot;%d-%02d-%02d %02d:%02d:%02d&quot;</span>,</span><br><span class="line">            (<span class="type">int</span>)ptm-&gt;tm_year + <span class="number">1900</span>, (<span class="type">int</span>)ptm-&gt;tm_mon + <span class="number">1</span>, (<span class="type">int</span>)ptm-&gt;tm_mday,</span><br><span class="line">            (<span class="type">int</span>)ptm-&gt;tm_hour, (<span class="type">int</span>)ptm-&gt;tm_min, (<span class="type">int</span>)ptm-&gt;tm_sec);</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">string</span>(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="30-3-编译"><a href="#30-3-编译" class="headerlink" title="30.3 编译"></a>30.3 编译</h3><p><img src="/img/%E5%9B%BE%E7%89%87/6-%E5%9F%BA%E4%BA%8Emuduo%E7%BD%91%E7%BB%9C%E5%BA%93%E7%9A%84%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE/30-01(9).png" alt="本地png图片PictureTest.png"></p>]]></content>
      
      
      <categories>
          
          <category> C++项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL和泛型编程笔记</title>
      <link href="/2022/07/29/STL%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/29/STL%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-分配器"><a href="#1-分配器" class="headerlink" title="1 分配器"></a>1 分配器</h2><p>​    (1)不要单独使用分配器，因为你使用分配器分配了几个元素的内存,当你要回收这几个元素的内存时，你还要记住你当时分配了几个元素 </p><p>​    (2)分配器的分类</p><p>​(3)底层都是new和delete完成allocate()和deallocate()，没有任何特殊设计</p><p>​(4)allocator<int>()这是匿名对象</p><h2 id="2-OOP-vs-GP"><a href="#2-OOP-vs-GP" class="headerlink" title="2 OOP vs GP"></a>2 OOP vs GP</h2><h3 id="2-1-OOP-面对对象编程"><a href="#2-1-OOP-面对对象编程" class="headerlink" title="2.1 OOP(面对对象编程)"></a>2.1 OOP(面对对象编程)</h3><p>(1)OOP将数据和操作放在一起</p><h3 id="2-2-GP-泛型编程"><a href="#2-2-GP-泛型编程" class="headerlink" title="2.2 GP(泛型编程)"></a>2.2 GP(泛型编程)</h3><p>​    (1)GP将数据和操作分开，各自封装自己的函数，之间通过迭代器沟通</p><p>​    (2)算法通过迭代器确定操作范围，通过迭代器取出容器中的元素</p><h2 id="3-类与模板"><a href="#3-类与模板" class="headerlink" title="3 类与模板"></a>3 类与模板</h2><h2 id="3-1-特化为绝对类型"><a href="#3-1-特化为绝对类型" class="headerlink" title="3.1 特化为绝对类型"></a><strong>3.1</strong> <strong>特化为绝对类型</strong></h2><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span>&gt; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(NameType name, AgeType age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="string">&quot; age: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mAge &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">NameType mName;</span><br><span class="line">AgeType mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&lt;string,<span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="string">&quot; age: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mAge &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string mName;</span><br><span class="line"><span class="type">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person&lt;string,<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;蔡伟&quot;</span>,<span class="number">18</span>)</span></span>;</span><br><span class="line">p.<span class="built_in">showPerson</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="3-2-偏特化成引用和指针"><a href="#3-2-偏特化成引用和指针" class="headerlink" title="3.2 偏特化成引用和指针"></a>3.2 偏特化成引用和指针</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span>&gt; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(NameType name, AgeType age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="string">&quot; age: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mAge &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">NameType mName;</span><br><span class="line">AgeType mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span>&gt; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&lt;NameType *,AgeType *&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(NameType *name,AgeType *age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="string">&quot; age: &quot;</span> &lt;&lt; *(<span class="keyword">this</span>-&gt;mAge) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">NameType *mName;</span><br><span class="line">AgeType *mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;蔡伟&quot;</span>; </span><br><span class="line"><span class="type">char</span> *str1 = str;</span><br><span class="line"><span class="type">int</span> age = <span class="number">19</span>; </span><br><span class="line"><span class="function">Person&lt;<span class="type">char</span>*,<span class="type">int</span>*&gt; <span class="title">p1</span><span class="params">(str,&amp;age)</span></span>;</span><br><span class="line">p1.<span class="built_in">showPerson</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span>&gt; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(NameType name, AgeType age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="string">&quot; age: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mAge &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">NameType mName;</span><br><span class="line">AgeType mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span>&gt; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&lt;<span class="type">const</span> NameType *,<span class="type">const</span> AgeType *&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> NameType *name,<span class="type">const</span> AgeType *age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="string">&quot; age: &quot;</span> &lt;&lt; *(<span class="keyword">this</span>-&gt;mAge) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">const</span> NameType *mName;</span><br><span class="line"><span class="type">const</span> AgeType *mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *str1 = <span class="string">&quot;蔡伟&quot;</span>;</span><br><span class="line"><span class="type">int</span> age = <span class="number">19</span>; </span><br><span class="line"><span class="function">Person&lt;<span class="type">const</span> <span class="type">char</span>*,<span class="type">const</span> <span class="type">int</span>*&gt; <span class="title">p1</span><span class="params">(str1,&amp;age)</span></span>;</span><br><span class="line">p1.<span class="built_in">showPerson</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span>&gt; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(NameType name, AgeType age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="string">&quot; age: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mAge &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">NameType mName;</span><br><span class="line">AgeType mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span>&gt; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&lt;NameType &amp;,AgeType &amp;&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(NameType name,AgeType age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="string">&quot; age: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mAge &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">NameType mName;</span><br><span class="line">AgeType mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string name = <span class="string">&quot;蔡伟&quot;</span>;</span><br><span class="line"><span class="type">int</span> age = <span class="number">19</span>; </span><br><span class="line"><span class="function">Person&lt;string &amp;,<span class="type">int</span>&amp;&gt; <span class="title">p1</span><span class="params">(name,age)</span></span>;</span><br><span class="line">p1.<span class="built_in">showPerson</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="4-深入探讨list"><a href="#4-深入探讨list" class="headerlink" title="4 深入探讨list"></a>4 深入探讨list</h2><p><img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C1-STL%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0%5C%E5%90%84%E4%B8%AA%E5%AE%B9%E5%99%A8%E5%A4%A7%E5%B0%8F.png" alt="本地png图片PictureTest.png"></p><h3 id="4-1-大小"><a href="#4-1-大小" class="headerlink" title="4.1 大小"></a>4.1 大小</h3><p>​sizeof(list<int>) &#x3D; 16;</p><h3 id="4-2-迭代器"><a href="#4-2-迭代器" class="headerlink" title="4.2 迭代器"></a>4.2 迭代器</h3><p>​(1)为了制造左闭右开区间，最后一个元素指向一个不属于该容器的元素</p><p>​(2)迭代器需要回答算法五个问题:一是迭代器种类，二是容器的类型，三是end()和begin()之间的距离，四五就不单独列出，不常用</p><p>​(3)指针是退化的迭代器，迭代器traits会区分指针和class iterator T，然后进入不同的函数中去回答算法中的五个问题</p><h2 id="5-深入探讨vector"><a href="#5-深入探讨vector" class="headerlink" title="5 深入探讨vector"></a>5 深入探讨vector</h2><p>​sizeof(vecto<int>) &#x3D; 24;</p><h3 id="5-1-底层实现"><a href="#5-1-底层实现" class="headerlink" title="5.1 底层实现"></a>5.1 底层实现</h3><p><img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C1-STL%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0%5Cvector%E5%BA%95%E5%B1%82.png" alt="本地png图片PictureTest.png"></p><p>​如果原大小为0，则分配1。如果原大小不为0，则分配原大小的两倍。前半段用来放置原数据，后半段准备用来放置新数据。不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</p><h2 id="6-深入探讨array"><a href="#6-深入探讨array" class="headerlink" title="6 深入探讨array"></a>6 深入探讨array</h2><p><img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C1-STL%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0%5Carray.png" alt="本地png图片PictureTest.png"></p><p>​array&lt;int,0&gt; 如果第二个参数为0的话，直接给数组分配为1的大小，数组没有构造函数和析构函数，sizeof(array&lt;int,0&gt;) &#x3D; 1;</p><h2 id="7-深入探讨deque"><a href="#7-深入探讨deque" class="headerlink" title="7 深入探讨deque"></a>7 深入探讨deque</h2><p>​sizeof(deque<int>) &#x3D; 80;</p><p>​size_t在64位电脑上为unsigned long int为8字节</p><p>​<img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C1-STL%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0%5Cdeque.png" alt="本地png图片PictureTest.png"></p><p>​<img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C1-STL%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0%5Cdeque1.png" alt="本地png图片PictureTest.png"></p><p>(1)deque是一个分段连续空间。空底层有一个vector&lt;T *&gt;指针类型，vector里面的指针指向不同的缓冲区，次序就按照vector里面的指针次序来排列，如果在尾端插入数据，可是deque没有空间插入了，就要通过在vector插入指针扩充到新的缓冲区，插入前端也是相同的原理。</p><p>(2)迭代器里面包含cur、first、last、node元素，cur就指向迭代器指向的元素，first和last就指向边界，而node就指向下一个迭代器。</p><h2 id="8-深入探讨queue和stack"><a href="#8-深入探讨queue和stack" class="headerlink" title="8 深入探讨queue和stack"></a>8 深入探讨queue和stack</h2><p>​ sizeof(queue<int>) &#x3D; 80</p><p>​ sizeof(stack<int>) &#x3D; 80</p><p>​(1)底层都是通过deque作为底层结构，也可以选择list作为底层结构</p><p>​(2)stack和queue不允许遍历，也不提供迭代器</p><p>​(3)queue不可选择vector作为底层结构</p><p>​stack可以选择vector作为底层结构</p><p>​(4)queue、stack不可选择set和map作为底层结构</p><h2 id="9-深入探讨容器rb-tree"><a href="#9-深入探讨容器rb-tree" class="headerlink" title="9 深入探讨容器rb_tree"></a>9 深入探讨容器rb_tree</h2><p>​sizeof(rb_tree) &#x3D; 40</p><p>​<img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C1-STL%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0%5CRb_Tree.png" alt="本地png图片PictureTest.png"></p><p>​<img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C1-STL%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0%5CRb_Tree1.png" alt="本地png图片PictureTest.png"></p><p>​<img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C1-STL%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0%5CRb_Tree2.png" alt="本地png图片PictureTest.png"></p><p>​红黑树容器有三个元素:(1)节点数量(2)头节点(方便设计)(3)仿函数和函数</p><pre><code> 注意:(1)内存对齐(2)根据不同的标准，底层实现也不同</code></pre><h2 id="10-深入探讨容器set-x2F-multiset"><a href="#10-深入探讨容器set-x2F-multiset" class="headerlink" title="10 深入探讨容器set&#x2F;multiset"></a>10 深入探讨容器set&#x2F;multiset</h2><p>sizeof(set) &#x3D; 40;</p><p>(1) key就是value，value就是key，插入数据自动排序</p><p>(2) 无法使用迭代器改变其元素值，可以使用迭代器遍历</p><h2 id="11-深入探讨容器map-x2F-multimap"><a href="#11-深入探讨容器map-x2F-multimap" class="headerlink" title="11 深入探讨容器map&#x2F;multimap"></a>11 深入探讨容器map&#x2F;multimap</h2><p>sizeof(map) &#x3D; 40;</p><p>(1) 插入数据自动排序，排序的根据是key</p><p>(2) 无法使用迭代器改变其key，可以改变data值，可以使用迭代器遍历</p><p>(3) multimap不可用[]做插入。</p><h2 id="12-深入探讨容器hashtable"><a href="#12-深入探讨容器hashtable" class="headerlink" title="12 深入探讨容器hashtable"></a>12 深入探讨容器hashtable</h2><p>sizeof(hashtable) &#x3D; 56;</p><p>​<img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C1-STL%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0%5Chashtable%E5%BA%95%E5%B1%82.png" alt="本地png图片PictureTest.png"></p><p>​<img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C1-STL%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0%5Chashtable.png" alt="本地png图片PictureTest.png"></p><p>(1)刚开始就是53，散列表大小最好选择质数，刚开始插入6个元素，如果再插入48个元素，就将散列表扩充到97</p><p>(2)可以根据迭代器改变value值，不能改变key值，因为是按照key值严谨排序的</p><h2 id="13-迭代器分类"><a href="#13-迭代器分类" class="headerlink" title="13 迭代器分类"></a>13 迭代器分类</h2><p>​<img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C1-STL%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0%5Cstl.png" alt="本地png图片PictureTest.png"></p><h2 id="14-适配器"><a href="#14-适配器" class="headerlink" title="14 适配器"></a>14 适配器</h2><pre><code> 适配器分为容器适配器、迭代器适配器、仿函数适配器。</code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2022/07/29/redis/"/>
      <url>/2022/07/29/redis/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Ubunru安装redis及redis基本配置"><a href="#1-Ubunru安装redis及redis基本配置" class="headerlink" title="1 Ubunru安装redis及redis基本配置"></a><strong>1 Ubunru安装redis及redis基本配置</strong></h2><h3 id="1-1-检查是否安装redis"><a href="#1-1-检查是否安装redis" class="headerlink" title="1.1 检查是否安装redis"></a>1.1 检查是否安装redis</h3><p>​分别执行命令 whereis redis-cli  whereis redis-server</p><p><img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C5-redis%5C1-01(1).png" alt="本地png图片PictureTest.png"></p><p>​出现以上结果说明没有安装</p><p><img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C5-redis%5C1-01(2).png" alt="本地png图片PictureTest.png"></p><p>​出现以上结果说明已经安装好redis</p><h3 id="1-2-安装redis"><a href="#1-2-安装redis" class="headerlink" title="1.2 安装redis"></a><strong>1.2 安装redis</strong></h3><p>(1)apt-get安装redis</p><p>​执行sudo apt-get update更新软件包</p><p>​执行sudo apt-get install redis-server,输入y确认安装并使用空间</p><p>​执行完成后，查看redis服务的状态，执行ps -ef|grep redis查看 或者 service redis status 命令查看</p><p><img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C5-redis%5C1-01(3).png" alt="本地png图片PictureTest.png"></p><p><img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C5-redis%5C1-01(4).png" alt="本地png图片PictureTest.png"></p><p>(2)下载安装包到Linux目录下</p><p>​首先进入临时目录</p><p>​cd &#x2F;opt</p><p>​下载tar文件</p><p>​wget <a href="http://download.redis.io/releases/redis-4.0.2.tar.gz">http://download.redis.io/releases/redis-4.0.2.tar.gz</a></p><p>​解压文件</p><p>​tar -xvf redis-4.0.2.tar.gz</p><p>​进入redis文件夹下</p><p>​cd .&#x2F;redis-4.0.42</p><p>​然后执行make命令，成功之后执行make install</p><p>​make make install</p><p>​为了能在任何路径使用redis-server redis-cli，我将这两个命令复制到usr&#x2F;bin下</p><p>1.3 配置redis</p><p>​其他电脑连接redis的时候发现连接失败，通过命令netstat -talnp查看，发现6379只允许本地访问了</p><p><img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C5-redis%5C1-01(5).png" alt="本地png图片PictureTest.png"></p><p>​所以要远程连接redis，需要注释掉redis配置中的 #bind 127.0.0.1(配置文件在&#x2F;et&#x2F;redis&#x2F;redis.conf)，</p><p><img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C5-redis%5C1-01(6).png" alt="本地png图片PictureTest.png"></p><p>​重启redis，命令service redis restart。在查看端口情况如下</p><p><img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C5-redis%5C1-01(7).png" alt="本地png图片PictureTest.png"></p><p>​为了redis的安全，需要添加一下密码，在redis.conf(501行)添加requirepass 密码。</p><p>​sudo vim &#x2F;etc&#x2F;redis&#x2F;redis.conf</p><h3 id="1-4-后台启动"><a href="#1-4-后台启动" class="headerlink" title="1.4 后台启动"></a><strong>1.4 后台启动</strong></h3><p>​修改redis.conf(128行)文件将里面的daemonize no 改成 yes，让服务在后台启动</p><p>​sudo vim &#x2F;etc&#x2F;redis&#x2F;redis.conf</p><h3 id="1-4-卸载redis"><a href="#1-4-卸载redis" class="headerlink" title="1.4 卸载redis"></a>1.4 卸载redis</h3><p>​sudo apt-get purge –auto-remove redis-server</p><h2 id="2-数据库类型"><a href="#2-数据库类型" class="headerlink" title="2. 数据库类型"></a>2. 数据库类型</h2><h3 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h3><ol><li>关系型数据库 - sql<ul><li>操作数据必须要使用sql语句</li><li>数据存储在磁盘</li><li>存储的数据量大</li><li>举例:<ul><li>mysql</li><li>oracle</li><li>sqlite - 文件数据库</li><li>sql server</li></ul></li></ul></li><li>非关系数据库 - nosql<ul><li>操作不使用sql语句<ul><li>命令</li></ul></li><li>数据默认存储在内存<ul><li>速度快, 效率高</li><li>存储的数据量小</li></ul></li><li>不需要数据库表<ul><li>以键值对的方式存储的</li></ul></li></ul></li></ol><h3 id="2-2-关系-x2F-非关系型数据库搭配使用"><a href="#2-2-关系-x2F-非关系型数据库搭配使用" class="headerlink" title="2.2 关系&#x2F;非关系型数据库搭配使用"></a>2.2 关系&#x2F;非关系型数据库搭配使用</h3><p><img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%5C1.png"></p><blockquote><p>&#x3D;&#x3D;RDBMS: Relational Database Management System&#x3D;&#x3D;</p><ol><li>所有的数据默认存储在关系型数据库中</li><li>客户端访问服务器, 有一些数据, 服务器需要频繁的查询数据<ul><li>服务器首先将数据从关系型数据库中读出 -&gt; 第一次<ul><li>将数据写入到redis中</li></ul></li><li>客户端第二次包含以后访问服务器<ul><li>服务器从redis中直接读数据</li></ul></li></ul></li></ol></blockquote><h2 id="3-Redis"><a href="#3-Redis" class="headerlink" title="3. Redis"></a>3. Redis</h2><blockquote><ol><li>知道redis是什么?<ul><li>非关系型数据库 也可以叫 内存数据库</li></ul></li><li>能干什么?<ul><li>存储访问频率高的数据</li><li>共享内存<ul><li>服务器端 -&gt; redis</li></ul></li></ul></li><li>怎么使用?<ul><li>常用的操作命令<ul><li>各种数据类型 -&gt; 会查</li></ul></li><li>redis的配置文件</li><li>redis的数据持久化</li><li>写程序的时候如何对redis进行操作<ul><li>客户端 -&gt; 服务器</li></ul></li></ul></li></ol></blockquote><h3 id="3-1-基本知识点"><a href="#3-1-基本知识点" class="headerlink" title="3.1 基本知识点"></a>3.1 基本知识点</h3><ol><li><p>安装包下载</p><ul><li>英文官方： <a href="https://redis.io/">https://redis.io/</a></li><li>中文官方： <a href="http://redis.cn/">http://redis.cn/</a></li></ul></li><li><p>Redis安装</p><ul><li>make</li><li>make install</li></ul></li><li><p>redis中的两个角色</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务器 - 启动</span></span><br><span class="line">redis-server# 默认启动</span><br><span class="line">redis-server confFileName # 根据配置文件的设置启动</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">客户端</span></span><br><span class="line">redis-cli# 默认连接本地, 绑定了6379默认端口的服务器</span><br><span class="line">redis-cli -p 端口号</span><br><span class="line">redis-cli -h IP地址 -p 端口 # 连接远程主机的指定端口的redis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过客户端关闭服务器</span></span><br><span class="line">shutdown</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">客户端的测试命令</span></span><br><span class="line">ping [MSG]</span><br></pre></td></tr></table></figure></li><li><p>redis中数据的组织格式</p><ul><li>键值对<ul><li>key: 必须是字符串 - “hello”</li><li>value: 可选的<ul><li>String类型</li><li>List类型</li><li>Set类型</li><li>SortedSet类型</li><li>Hash类型</li></ul></li></ul></li></ul></li><li><p>redis中常用数据类型</p><ul><li>String类型<ul><li>字符串</li></ul></li><li>List类型（数组）<ul><li>存储多个string字符串的</li></ul></li><li>Set类型<ul><li>集合<ul><li>stl集合<ul><li>默认是排序的, 元素不重复</li></ul></li><li>redis集合<ul><li>元素不重复, 数据是无序的</li></ul></li></ul></li></ul></li><li>SortedSet类型<ul><li>排序集合, 集合中的每个元素分为两部分<ul><li>[分数, 成员] -&gt; [66, ‘’tom’’]</li></ul></li></ul></li><li>Hash类型<ul><li>跟map数据组织方式一样: key:value<ul><li>Qt -&gt; QHash, QMap</li><li>Map -&gt; 红黑树</li><li>hash -&gt; 数组<ul><li>a[index] &#x3D; xx</li></ul></li></ul></li></ul></li></ul></li></ol><h3 id="3-2-redis常用命令"><a href="#3-2-redis常用命令" class="headerlink" title="3.2 redis常用命令"></a>3.2 redis常用命令</h3><h4 id="3-2-1-key"><a href="#3-2-1-key" class="headerlink" title="3.2.1 key"></a>3.2.1 key</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看当前库所有key</span><br><span class="line">keys *</span><br><span class="line"></span><br><span class="line"># 判断某个key是否存在</span><br><span class="line">exists key</span><br><span class="line">exists k1</span><br><span class="line"></span><br><span class="line"># 查看你的key是什么类型</span><br><span class="line">type key</span><br><span class="line">type k1</span><br><span class="line"></span><br><span class="line"># 删除指定的key数据</span><br><span class="line">del key</span><br><span class="line">del k1</span><br><span class="line"></span><br><span class="line"># 根据value选择非阻塞删除,仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</span><br><span class="line">unlink key</span><br><span class="line"></span><br><span class="line"># 10秒钟：为给定的key设置过期时间</span><br><span class="line">expire key 10</span><br><span class="line"></span><br><span class="line"># 查看还有多少秒过期，-1表示永不过期，-2表示已过期</span><br><span class="line">ttl key</span><br><span class="line"></span><br><span class="line"># 命令切换数据库</span><br><span class="line">select &lt;dbid&gt;</span><br><span class="line"></span><br><span class="line"># 查看当前数据库的key的数量</span><br><span class="line">dbsize</span><br><span class="line"></span><br><span class="line"># 清空当前库</span><br><span class="line">flushdb</span><br><span class="line"></span><br><span class="line"># 通杀全部库</span><br><span class="line">flushall</span><br></pre></td></tr></table></figure><h4 id="3-2-2-String类型"><a href="#3-2-2-String类型" class="headerlink" title="3.2.2 String类型"></a>3.2.2 String类型</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">key -&gt; string</span><br><span class="line">value -&gt; string</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置一个键值对-&gt;string:string</span></span><br><span class="line">SET key value</span><br><span class="line">如：SET hello world</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过key得到value</span></span><br><span class="line">GET key</span><br><span class="line">如：GET hello</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同时设置一个或多个 key-value 对</span></span><br><span class="line">MSET key value [key value ...]</span><br><span class="line">如: MSET h1 helloworld1 h2 helloworld2 h3 helloworld3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同时查看过个key</span></span><br><span class="line">MGET key [key ...]</span><br><span class="line">如:MGET h1 h2 h3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">key: hello, value: world, append: 12345</span></span><br><span class="line">APPEND key value</span><br><span class="line">APPEND h1 123456</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回 key 所储存的字符串值的长度</span></span><br><span class="line">STRLEN key</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 key 中储存的数字值减一。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前提, value必须是数字字符串 -<span class="string">&quot;12345&quot;</span></span></span><br><span class="line">DECR key</span><br><span class="line">set h4 123</span><br><span class="line">get h4</span><br><span class="line">decr h4</span><br><span class="line">get h4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 key 中储存的数字值加一。</span></span><br><span class="line">INCR key</span><br><span class="line">set h4 123</span><br><span class="line">get h4</span><br><span class="line">incr h4</span><br><span class="line">get h4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 key 中储存的数字值减去你想要的数字。</span></span><br><span class="line">DECRBY key decrement</span><br><span class="line">decrby h4 111</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 key 中储存的数字值加上你想要的数字。</span></span><br><span class="line">INCRBY key decrement</span><br><span class="line">incrby h4 111</span><br></pre></td></tr></table></figure><h4 id="3-2-3-List类型-存储多个字符串"><a href="#3-2-3-List类型-存储多个字符串" class="headerlink" title="3.2.3 List类型 - 存储多个字符串"></a>3.2.3 List类型 - 存储多个字符串</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">key -&gt; string</span><br><span class="line">value -&gt; list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将一个或多个值 value 插入到列表 key 的表头</span></span><br><span class="line">LPUSH key value [value ...]</span><br><span class="line">LPUSH list1 1 2 3 4 5 6 7 8 9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当key不存在的时候，LPUSHX命令什么也不做</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当key存在的时候，LPUSHX和LPUSH一样</span></span><br><span class="line">LPUSHX key value</span><br><span class="line">LLEN great</span><br><span class="line">LPUSHX great helloworld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将一个或多个值 value 插入到列表 key 的表尾 (最右边)。</span></span><br><span class="line">RPUSH key value [value ...]</span><br><span class="line">RPUSH list2 1 2 2 3 2 2 2 2 3 4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当key不存在的时候，RPUSHX命令什么也不做</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当key存在的时候，RPUSHX和RPUSH一样</span></span><br><span class="line">RPUSHX key value</span><br><span class="line">LLEN great</span><br><span class="line">RPUSHX great helloworld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">list中删除元素</span></span><br><span class="line">LPOP key # 删除最左侧元素</span><br><span class="line">RPOP key # 删除最右侧元素</span><br><span class="line">LPOP list1</span><br><span class="line">RPOP list1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">遍历</span></span><br><span class="line">LRANGE key start stop</span><br><span class="line">start: 起始位置, 0</span><br><span class="line">stop: 结束位置, -1</span><br><span class="line">LRANGE key 0 -1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过下标得到对应位置的字符串</span></span><br><span class="line">LINDEX key index</span><br><span class="line">LINDEX list1 1</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">list中字符串的个数</span></span><br><span class="line">LLEN key</span><br><span class="line">LLEN list2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据参数 count 的值，移除列表中与参数 value 相等的元素。</span></span><br><span class="line">LREM key count value</span><br><span class="line">RPUSH great 1 2 2 2 2 3 2 2 2 2 4</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">count &gt; 0 : 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count 。</span></span><br><span class="line">LREM great 3 2</span><br><span class="line">LRANGE great 0 -1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">count &lt; 0 : 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对值。</span></span><br><span class="line">LREM great -3 2</span><br><span class="line">LRANGE great 0 -1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">count = 0 : 移除表中所有与 value 相等的值。</span></span><br><span class="line">LREM great 0 2</span><br><span class="line">LRANGE great 0 -1</span><br></pre></td></tr></table></figure><h4 id="3-2-4-Set类型"><a href="#3-2-4-Set类型" class="headerlink" title="3.2.4 Set类型"></a><strong>3.2.4 Set类型</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">key -&gt; string</span><br><span class="line">value -&gt; set类型 (&quot;string&quot;, &quot;string1&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加元素</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略</span></span><br><span class="line">SADD key member [member ...]</span><br><span class="line">SADD l1 1 2 3 3 2 1 aa bb cc</span><br><span class="line">SADD l2 7 8 9 aa bb cc 9 8 7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">遍历</span></span><br><span class="line">SMEMBERS key</span><br><span class="line">SMEMBERS l1SMEMBERS l2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">差集</span></span><br><span class="line">SDIFF key [key ...]</span><br><span class="line">SDIFF l1 l2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">差集，将得到的结果保存到destination集合</span></span><br><span class="line">SDIFFSTORE destination key [key ...]</span><br><span class="line">SDIFFSTORE store1 l1 l2</span><br><span class="line">SMEMBERS store1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">交集</span></span><br><span class="line">SINTER key [key ...]</span><br><span class="line">SINTER l1 l2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">交集，将得到的结果保存到destination集合</span></span><br><span class="line">SINTERSTORE destination key [key ...]</span><br><span class="line">SINTERSTORE store2 l1 l2</span><br><span class="line">SMEMBERS store2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">并集</span></span><br><span class="line">SUNION key [key ...]</span><br><span class="line">SUNION l1 l2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">并集，将得到的结果保存到destination集合</span></span><br><span class="line">SUNIONSTORE destination key [key ...]</span><br><span class="line">SUNIONSTORE store3 l1 l2</span><br><span class="line">SMEMBERS store3</span><br></pre></td></tr></table></figure><h4 id="3-2-5-SortedSet-类型"><a href="#3-2-5-SortedSet-类型" class="headerlink" title="3.2.5 SortedSet 类型"></a>3.2.5 SortedSet 类型</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">key -&gt; string</span><br><span class="line">value -&gt; sorted ([socre, member], [socre, member], ...)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加元素</span></span><br><span class="line">ZADD key score member [[score member] [score member] ...]</span><br><span class="line">zadd user01 100 mysql 500 java 200 python 600 c++ 400 c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">遍历</span></span><br><span class="line">ZRANGE key start stop [WITHSCORES] # -&gt; 升序集合</span><br><span class="line">zrange user01 0 -1</span><br><span class="line">zrange user01 0 -1 withscores</span><br><span class="line"></span><br><span class="line">ZREVRANGE key start stop [WITHSCORES] # -&gt; 降序集合</span><br><span class="line">zrevrange user01 0 -1</span><br><span class="line">zrevrange user01 0 -1 withscores</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。</span> </span><br><span class="line">zrangebyscore key minmax [withscores] [limit offset count]</span><br><span class="line">zrangebyscore user01</span><br><span class="line">zrangebyscore user01 withscores</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。</span> </span><br><span class="line">zrevrangebyscore key maxmin [withscores] [limit offset count]  </span><br><span class="line">zrevrangebyscore user01</span><br><span class="line">zrevrangebyscore user01 withscores</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为元素的score加上增量</span></span><br><span class="line">zincrby &lt;key&gt;&lt;increment&gt;&lt;value&gt;     </span><br><span class="line">zincrby user01 10 c</span><br><span class="line">zrange user01 0 -1 withscores</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除该集合下，指定值的元素</span> </span><br><span class="line">zrem  &lt;key&gt;&lt;value&gt;</span><br><span class="line">zrem user01 c</span><br><span class="line">zrange user01 0 91 withscores</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计该集合，分数区间内的元素个数</span> </span><br><span class="line">zcount &lt;key&gt;&lt;min&gt;&lt;max&gt;</span><br><span class="line">zcount user01 100 400</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回该值在集合中的排名，从0开始</span></span><br><span class="line">zrank &lt;key&gt;&lt;value&gt;</span><br><span class="line">zrank user01 c</span><br></pre></td></tr></table></figure><h4 id="3-2-6-Hash类型"><a href="#3-2-6-Hash类型" class="headerlink" title="3.2.6 Hash类型"></a>3.2.6 Hash类型</h4><p><img src="/%5Cimg%5C%E5%9B%BE%E7%89%87%5C4-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%5C2.png"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">key -&gt;string</span><br><span class="line">value -&gt; hash ([key:value], [key:value], [key:value], ...)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加数据</span></span><br><span class="line">HSET key field value</span><br><span class="line">hset user01 name caiwei age 23 birthday 1997-08-24</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取数据</span></span><br><span class="line">HGET key field</span><br><span class="line">hget user01 name</span><br><span class="line">hget user01 age</span><br><span class="line">hget user01 birthday</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">批量插入键值对</span></span><br><span class="line">HMSET key field value [field value ...]</span><br><span class="line">hmset user02 name zouzeyu age 23 birthday 1997-07-11</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">批量取数据</span></span><br><span class="line">HMGET key field [field ...]</span><br><span class="line">hmget user02 name age birthday</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看哈希表 key 中，给定域 field 是否存在。</span> </span><br><span class="line">Hexists key field</span><br><span class="line">hexists user02 name</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除键值对</span></span><br><span class="line">HDEL key field [field ...]</span><br><span class="line">HDEL user02 name</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出该<span class="built_in">hash</span>集合的所有field</span></span><br><span class="line">hkeys key</span><br><span class="line">hkeys user02</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出该<span class="built_in">hash</span>集合的所有value</span></span><br><span class="line">hvals key</span><br><span class="line">hvals user02</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为哈希表 key 中的域 field 的值加上增量 1   -1</span></span><br><span class="line">hincrby key field increment </span><br><span class="line">hincrby user01 age 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .</span></span><br><span class="line">hsetnx key field value</span><br><span class="line">hsetnx user02 name caiwei</span><br></pre></td></tr></table></figure><h4 id="3-2-7-Key-相关的命令"><a href="#3-2-7-Key-相关的命令" class="headerlink" title="3.2.7 Key 相关的命令"></a>3.2.7 Key 相关的命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除键值对</span></span><br><span class="line">DEL key [key ...]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看key值</span></span><br><span class="line">KEYS pattern</span><br><span class="line">查找所有符合给定模式 pattern 的 key 。</span><br><span class="line">KEYS * 匹配数据库中所有 key 。</span><br><span class="line">KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。</span><br><span class="line">KEYS h*llo 匹配 hllo 和 heeeeello 等。</span><br><span class="line">KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给key设置生存时长</span></span><br><span class="line">EXPIRE key seconds</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消生存时长</span></span><br><span class="line">PERSIST key</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">key对应的valued类型</span></span><br><span class="line">TYPE key</span><br></pre></td></tr></table></figure><h3 id="3-3-redis配置文件"><a href="#3-3-redis配置文件" class="headerlink" title="3.3 redis配置文件"></a>3.3 redis配置文件</h3><blockquote><p>配置文件是给<strong>redis服务器</strong>使用 的</p></blockquote><ol><li><p>配置文件位置</p><ul><li>从源码安装目录中找 -&gt; redis.conf</li></ul></li><li><p>配置文件配置项</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">redis服务器绑定谁之后, 谁就能访问redis服务器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">任何客户端都能访问服务器, 需要注释该选项</span></span><br><span class="line">bind 127.0.0.1 192.168.1.100 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保护模式, 如果要远程客户端访问服务器, 该模式要关闭</span></span><br><span class="line">protected-mode yes</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">reids服务器启动时候绑定的端口, 默认为6379</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">超时时长, 0位关闭该选项, &gt;0则开启</span></span><br><span class="line">timeout 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务器启动之后不是守护进程</span></span><br><span class="line">daemonize no</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果服务器是守护进程, 就会生成一个pid文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./ -&gt; reids服务器启动时候对应的目录</span></span><br><span class="line">pidfile ./redis.pid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志级别</span></span><br><span class="line"> loglevel notice</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果服务器是守护进程, 才会写日志文件</span></span><br><span class="line"> logfile &quot;&quot; -&gt; 这是没写</span><br><span class="line"> logfile ./redis.log</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">redis中数据库的个数</span></span><br><span class="line"> databases 16 </span><br><span class="line"> - 切换 select dbID [dbID == 0 ~ 16-1]</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-4-redis的发布和订阅"><a href="#3-4-redis的发布和订阅" class="headerlink" title="3.4 redis的发布和订阅"></a><strong>3.4 redis的发布和订阅</strong></h3><p>1.打开一个客户端，输入一下命令订阅channel1</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-04(1).png" alt="本地png图片PictureTest.png"></p><p>2.打开另外一个客户端，给channel1发布消息hello</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-04(2).png" alt="本地png图片PictureTest.png"></p><p>​返回1是订阅者数量</p><p>3.打开第一个客户端可以看到发送的消息</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-04(3).png" alt="本地png图片PictureTest.png"></p><p>​注：发布的消息没有持久化，如果在订阅的客户端收不到hello，只能收到订阅后发布的消息</p><h3 id="3-5-redis新数据类型"><a href="#3-5-redis新数据类型" class="headerlink" title="3.5 redis新数据类型"></a>3.5 redis新数据类型</h3><h4 id="3-5-1-Bitmaps"><a href="#3-5-1-Bitmaps" class="headerlink" title="3.5.1 Bitmaps"></a>3.5.1 Bitmaps</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置Bitmaps中某个偏移量的值（0或1）</span><br><span class="line"></span><br><span class="line">setbit&lt;key&gt;&lt;offset&gt;&lt;value&gt;</span><br><span class="line">setbit unique:users:20201106 1 1</span><br><span class="line">setbit unique:users:20201106 6 1</span><br><span class="line">setbit unique:users:20201106 11 1</span><br><span class="line">setbit unique:users:20201106 15 1</span><br><span class="line">setbit unique:users:20201106 19 1</span><br></pre></td></tr></table></figure><p>每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。</p><p>设置键的第offset个位的值（从0算起） ， 假设现在有20个用户，userid&#x3D;1， 6， 11， 15， 19的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-05(1).png" alt="本地png图片PictureTest.png"></p><p>unique:users:20201106代表2020-11-06这天的独立访问用户的Bitmaps</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-05(2).png" alt="本地png图片PictureTest.png"></p><p><strong>注：</strong></p><p>1、很多应用的用户id以一个指定数字（例如10000） 开头， 直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费， 通常的做法是每次做setbit操作</p><p>时将用户id减去这个指定数字。</p><p>2、在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 获取Bitmaps中某个偏移量的值</span><br><span class="line">getbit&lt;key&gt;&lt;offset&gt;</span><br><span class="line"></span><br><span class="line">getbit unique:users:20201106 1</span><br><span class="line">getbit unique:users:20201106 6</span><br><span class="line">getbit unique:users:20201106 11</span><br><span class="line">getbit unique:users:20201106 15</span><br><span class="line">getbit unique:users:20201106 19</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-05(3).png" alt="本地png图片PictureTest.png"></p><p>​<strong>注</strong>：因为100根本不存在，所以也是返回0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 统计字符串被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含。</span><br><span class="line">bitcount&lt;key&gt;[start end]</span><br><span class="line"></span><br><span class="line">bitcount unique:users:20201106</span><br><span class="line"></span><br><span class="line"># start和end代表起始和结束字节数， 下面操作计算用户id在第1个字节到第3个字节之间的独立访问用户数， 对应的用户id是11， 15， 19。起始下标为0</span><br><span class="line">bitcount unique:users:20201106 1 3</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-05(4).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-05(5).png" alt="本地png图片PictureTest.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</span><br><span class="line">bitop  and(or/not/xor) &lt;destkey&gt; [key…]</span><br><span class="line"></span><br><span class="line"># 2020-11-04 日访问网站的userid=1,2,5,9。</span><br><span class="line">setbit unique:users:20201104 1 1</span><br><span class="line">setbit unique:users:20201104 2 1</span><br><span class="line">setbit unique:users:20201104 5 1</span><br><span class="line">setbit unique:users:20201104 9 1</span><br><span class="line"></span><br><span class="line"># 2020-11-03 日访问网站的userid=0,1,4,9。</span><br><span class="line">setbit unique:users:20201103 0 1</span><br><span class="line">setbit unique:users:20201103 1 1</span><br><span class="line">setbit unique:users:20201103 4 1</span><br><span class="line">setbit unique:users:20201103 9 1</span><br><span class="line"></span><br><span class="line"># 计算出两天都访问过网站的用户数量</span><br><span class="line">bitop and unique:users:and:20201104_03 unique:users:20201103 unique:users:20201104</span><br><span class="line"></span><br><span class="line"># 计算出任意一天都访问过网站的用户数量（例如月活跃就是类似这种） ， 可以使用or求并集</span><br><span class="line">bitop or unique:users:and:20201104_03 unique:users:20201103 unique:users:20201104</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-05(6).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-05(7).png" alt="本地png图片PictureTest.png"></p><h4 id="3-5-2-HyperLogLog"><a href="#3-5-2-HyperLogLog" class="headerlink" title="3.5.2 HyperLogLog"></a>3.5.2 HyperLogLog</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加指定元素到 HyperLogLog 中</span><br><span class="line">pfadd &lt;key&gt;&lt; element&gt; [element ...] </span><br><span class="line"></span><br><span class="line">pfadd h1 &quot;c++&quot;</span><br><span class="line">pfcount h1</span><br><span class="line">pfadd h1 &quot;c&quot;</span><br><span class="line">pfcount h1</span><br><span class="line">pfadd h1 &quot;java&quot;</span><br><span class="line">pfcount h1</span><br><span class="line">pfadd h1 &quot;mysql&quot;</span><br><span class="line">pfcount h1</span><br><span class="line">pfadd h1 &quot;java&quot;</span><br><span class="line">pfcount h1</span><br><span class="line"></span><br><span class="line"># 计算HLL的近似基数</span><br><span class="line">pfcount&lt;key&gt; [key ...]</span><br><span class="line"></span><br><span class="line">pfadd h2 &quot;mysql&quot;</span><br><span class="line">pfadd h2 &quot;redis&quot;</span><br><span class="line">pfadd h2 &quot;sql&quot;</span><br><span class="line">pfcount h1 h2</span><br><span class="line"></span><br><span class="line"># 将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</span><br><span class="line">pfmerge&lt;destkey&gt;&lt;sourcekey&gt; [sourcekey ...]</span><br><span class="line"></span><br><span class="line">pfcount h1 h2</span><br><span class="line">pfmerge h3 h1 h2</span><br><span class="line">pfcount h3</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-05(8).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-05(9).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-05(10).png" alt="本地png图片PictureTest.png"></p><h4 id="3-5-3-Geospatial"><a href="#3-5-3-Geospatial" class="headerlink" title="3.5.3 Geospatial"></a><strong>3.5.3 Geospatial</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</span><br><span class="line"></span><br><span class="line"># 添加地理位置（经度，纬度，名称）</span><br><span class="line">geoadd&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;&lt;member&gt; [longitude latitude member...]</span><br><span class="line"></span><br><span class="line">geoadd china:city 121.47 31.23 shanghai</span><br><span class="line">geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shengzhen 116.38 39.90 beijing</span><br><span class="line"></span><br><span class="line"># 获得指定地区的坐标值</span><br><span class="line">geopos  &lt;key&gt;&lt;member&gt; [member...]  获得指定地区的坐标值</span><br><span class="line"></span><br><span class="line">geopos china:city shanghai beijing shengzhen chongqing</span><br><span class="line"></span><br><span class="line"># 获取两个位置之间的直线距离</span><br><span class="line">geodist&lt;key&gt;&lt;member1&gt;&lt;member2&gt;  [m|km|ft|mi ]</span><br><span class="line"></span><br><span class="line">geodist china:city shengzhen beijing km</span><br><span class="line"></span><br><span class="line"># 以给定的经纬度为中心，找出某一半径内的元素</span><br><span class="line">georadius&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;radius  m|km|ft|mi</span><br><span class="line"></span><br><span class="line">georadius china:city 110 30 1000 km</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-05(11).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-05(12).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-05(13).png" alt="本地png图片PictureTest.png"></p><h3 id="3-6-Redis-事务-锁机制-秒杀"><a href="#3-6-Redis-事务-锁机制-秒杀" class="headerlink" title="3.6 Redis-事务-锁机制-秒杀"></a>3.6 Redis-事务-锁机制-秒杀</h3><h4 id="3-6-1-Multi、Exec、discard"><a href="#3-6-1-Multi、Exec、discard" class="headerlink" title="3.6.1 Multi、Exec、discard"></a>3.6.1 Multi、Exec、discard</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先开启事务，都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</span><br><span class="line">multi</span><br><span class="line">set k2 v2</span><br><span class="line">set k3 v3</span><br><span class="line">exec</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-06(1).png" alt="本地png图片PictureTest.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先开启事务，都会依次进入命令队列中，如果中间不想执行的话，可以使用discard放弃</span><br><span class="line">multi</span><br><span class="line">set k2 v2</span><br><span class="line">set k3 v3</span><br><span class="line">discard</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-06(2).png" alt="本地png图片PictureTest.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</span><br><span class="line">multi</span><br><span class="line">set m1 v1</span><br><span class="line">set m2</span><br><span class="line">set m3 v3</span><br><span class="line">exec</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-06(3).png" alt="本地png图片PictureTest.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</span><br><span class="line">multi</span><br><span class="line">set m1 v1</span><br><span class="line">incr m1</span><br><span class="line">set m2 v2</span><br><span class="line">exec</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-06(4).png" alt="本地png图片PictureTest.png"></p><h4 id="3-6-2-事务冲突的问题"><a href="#3-6-2-事务冲突的问题" class="headerlink" title="3.6.2 事务冲突的问题"></a>3.6.2 事务冲突的问题</h4><p>​在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-06(5).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-06(6).png" alt="本地png图片PictureTest.png"></p><h4 id="3-6-3-事务三大特性"><a href="#3-6-3-事务三大特性" class="headerlink" title="3.6.3 事务三大特性"></a>3.6.3 事务三大特性</h4><p><strong>单独的隔离操作</strong> </p><p>​事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 </p><p><strong>没有隔离级别的概念</strong> </p><p>​队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</p><p><strong>不保证原子性</strong> </p><p>​事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 </p><h3 id="3-7-redis数据持久化"><a href="#3-7-redis数据持久化" class="headerlink" title="3.7 redis数据持久化"></a>3.7 redis数据持久化</h3><h4 id="3-7-1-RDB"><a href="#3-7-1-RDB" class="headerlink" title="3.7.1 RDB"></a>3.7.1 RDB</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># rdb的同步频率, 任意一个满足都可以</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line">首先将以上改为save 20 3</span><br><span class="line">这个意思时在20秒至少有3个键值发生改变就会存入临时文件中。</span><br><span class="line"></span><br><span class="line">set m1 11</span><br><span class="line">set m2 12</span><br><span class="line">set m3 13</span><br><span class="line">set m4 14</span><br><span class="line"></span><br><span class="line">再去/var/lib/redis查看dump.rdb是否发生改变。</span><br></pre></td></tr></table></figure><h4 id="3-7-2-AOF"><a href="#3-7-2-AOF" class="headerlink" title="3.7.2 AOF"></a>3.7.2 AOF</h4><p><strong>1.AOF和RDB同时开启，redis听谁的？</strong></p><p>​AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失）</p><p><strong>2.AOF启动&#x2F;修复&#x2F;恢复</strong></p><p>正常恢复</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改配置文件中的appendonly no，改为yes</span><br><span class="line"></span><br><span class="line">将有数据的aof文件复制一份保存到对应目录(查看目录：config get dir)(与RDB的rdb文件目录一致，我的在/var/lib/redis)</span><br><span class="line"></span><br><span class="line">恢复：重启redis然后重新加载</span><br></pre></td></tr></table></figure><p>异常恢复</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改配置文件中的appendonly no，改为yes</span><br><span class="line"></span><br><span class="line">如遇到AOF文件损坏，通过redis-check-aof--fix appendonly.aof进行恢复</span><br><span class="line"></span><br><span class="line">cd /var/lib/redis</span><br><span class="line">redis-check-aof--fix appendonly.aof</span><br><span class="line"></span><br><span class="line">备份被写坏的AOF文件</span><br><span class="line"></span><br><span class="line">恢复：重启redis，然后重新加载</span><br><span class="line">redis-server /etc/redis/redis.conf</span><br><span class="line">redis-cli -a cai1997722</span><br><span class="line">keys *</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-07(1).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-07(2).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-07(3).png" alt="本地png图片PictureTest.png"></p><h3 id="3-8-redis主从复制"><a href="#3-8-redis主从复制" class="headerlink" title="3.8 redis主从复制"></a>3.8 redis主从复制</h3><h4 id="3-8-1-构建一主二从"><a href="#3-8-1-构建一主二从" class="headerlink" title="3.8.1 构建一主二从"></a>3.8.1 构建一主二从</h4><p>1.首先将创建一个目录Myredis，再将&#x2F;etc&#x2F;redis&#x2F;redis.conf复制到创建的目录下</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(1).png" alt="本地png图片PictureTest.png"></p><p>2.将redis.conf中的appendonly yes修改为no</p><p>3.分别新建三个文件 redis6379.conf redis6380.conf redis6381.conf</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 输入一下内容</span><br><span class="line"></span><br><span class="line">include /home/iot/test/Myredis</span><br><span class="line">pidfile /var/run/redis/redis_6379.pid</span><br><span class="line">port 6379</span><br><span class="line">dbfilename dump6379.rdb</span><br><span class="line">daemonize yes</span><br></pre></td></tr></table></figure><p>4.启动三台redis服务器，并查看系统进程是否启动</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(2).png" alt="本地png图片PictureTest.png"></p><p>5.查看三台主机运行情况</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -p 6379</span><br><span class="line">info replication</span><br><span class="line"></span><br><span class="line">redis-cli -p 6380</span><br><span class="line">info replication</span><br><span class="line"></span><br><span class="line">redis-cli -p 6381</span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(3).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(4).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(5).png" alt="本地png图片PictureTest.png"></p><p>成为某个实例的从服务器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 在6380和6381上执行: slaveof 127.0.0.1 6379</span><br><span class="line"></span><br><span class="line">(2) 在主机上写，在从机上可以读取数据，在从机上写数据报错</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(6).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(7).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(8).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(9).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(10).png" alt="本地png图片PictureTest.png"></p><p>6.特点</p><p>主机挂掉，重启就行，一切如初</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(11).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(12).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(13).png" alt="本地png图片PictureTest.png"></p><p>从机重启需重设：slaveof 127.0.0.1 6379，主机如果在从机关闭的时候添加数据时，从机重新连接时会将这个数据重新恢复</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(14).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(15).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(16).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(17).png" alt="本地png图片PictureTest.png"></p><p>7.薪火相传</p><p>首先将6381的主服务器设为6380</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(18).png" alt="本地png图片PictureTest.png"></p><p>看6379服务器少了一个从机，而6380还是6379服务器的从机，是6381的主机</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(19).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(20).png" alt="本地png图片PictureTest.png"></p><p>主机和从机的特点与6的特点一样</p><p>8.反客为主</p><p>首先6379掉线之后，6380不能主动升级为主服务器，需要我们输入命令升级为主服务器</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(21).png" alt="本地png图片PictureTest.png"></p><p>9.复制原理</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(22).png" alt="本地png图片PictureTest.png"></p><h4 id="3-8-2-哨兵模式"><a href="#3-8-2-哨兵模式" class="headerlink" title="3.8.2 哨兵模式"></a>3.8.2 哨兵模式</h4><p>1.自定义的&#x2F;myredis目录下新建sentinel.conf文件，名字绝不能错，配置哨兵，填写内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">port 26379</span><br><span class="line">daemonize no</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure><p>这里1的意思是至少有1个哨兵同意迁移为主服务器</p><p>2.我的服务器没有redis-sentinel命令，需要用apt install redis-sentinel安装一下，安装完成之后，哨兵自动称为守护进程，使用sudo &#x2F;etc&#x2F;init.d&#x2F;redis-sentinel </p><p>stop可以解决kill杀不死的进程</p><p>redis-sentinel &#x2F;home&#x2F;iot&#x2F;test&#x2F;Myredis&#x2F;sentinel.conf</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(23).png" alt="本地png图片PictureTest.png"></p><p>3.主机挂掉之后，会从从机选举产生新的主机</p><p>哪个从机会被选举为主机呢？根据优先级别：slave-priority </p><p>原主机重启后会变为新选举的主机的从机。</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(24).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(25).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(26).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(27).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-08(28).png" alt="本地png图片PictureTest.png"></p><h3 id="3-9-redis集群"><a href="#3-9-redis集群" class="headerlink" title="3.9 redis集群"></a>3.9 redis集群</h3><h4 id="3-9-1-搭建redis集群"><a href="#3-9-1-搭建redis集群" class="headerlink" title="3.9.1 搭建redis集群"></a>3.9.1 搭建redis集群</h4><p>1.首先将rdb文件删除，在修改redis6379.conf文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm dump6*.rdb</span><br><span class="line"></span><br><span class="line">vim redis6379.conf</span><br><span class="line"># 添加一下内容</span><br><span class="line">include /home/iot/test/Myredis</span><br><span class="line">pidfile &quot;/var/run/redis_6379.pid&quot;</span><br><span class="line">port 6379</span><br><span class="line">protected-mode no</span><br><span class="line">#bind 127.0.0.1</span><br><span class="line">dbfilename &quot;dump6379.rdb&quot;</span><br><span class="line">daemonize yes</span><br><span class="line">appendonly no</span><br><span class="line">dir &quot;/home/iot/test/Myredis&quot;</span><br><span class="line">logfile &quot;/home/iot/test/Myredis/redis_err_6379.log&quot;</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><p>2.在复制5个文件，redis6380.conf redis6381.conf redis6389.conf redis6390.conf redis6391.conf</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp redis6379.conf redis6380.conf redis6381.conf redis6389.conf redis6390.conf redis6391.conf</span><br><span class="line"></span><br><span class="line">#将文件中的6379分别修改为6380 6381 6389 6390 6391</span><br></pre></td></tr></table></figure><p>3.启动6个redis服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server redis6379.conf</span><br><span class="line">redis-server redis6380.conf</span><br><span class="line">redis-server redis6381.conf</span><br><span class="line">redis-server redis6389.conf</span><br><span class="line">redis-server redis6390.conf</span><br><span class="line">redis-server redis6391.conf</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-09(1).png" alt="本地png图片PictureTest.png"></p><p>4.将6个节点合成一个集群</p><p>组合之前，请确保所有redis实例启动后，nodes-xxxx.conf文件都生成正常。</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-09(2).png" alt="本地png图片PictureTest.png"></p><p>5 出现的一些问题</p><p>​1.因为我的服务器redis版本不是高版本，所以不能直接按照redis高版本方式去进行集群。我是通过apt-get install安装redis的，所以没有redis下的src目录，进</p><p>而找不到redis-trib.rb，低版本需要这个去集群。我就换了一种方式去安装redis，采用解压包的方式安装，前提需要卸载apt方式安装的redis。</p><p>​2.[ERR] Sorry, can‘t connect to node 192.168.10.3:6379</p><pre><code>解决方法：在每一个配置文件当中添加protected-mode no#bind 127.0.0.1</code></pre><p>(1)安装完成之后，接下来安装配置redis-trib.rb所需的环境ruby。</p><p>​sudo apt install ruby</p><p>(2)安装rubygem redis依赖</p><p>​wget <a href="http://rubygems.org/downloads/redis-3.3.0.gem">http://rubygems.org/downloads/redis-3.3.0.gem</a></p><p>​gem install -l redis-3.3.0.gem</p><p>(3)最后安装ruby和redis的接口程序</p><p>​gem install redis</p><p>(4)最后将redis-trib.rb复制到&#x2F;home&#x2F;iot&#x2F;test&#x2F;Myredis</p><p>​cp &#x2F;opt&#x2F;redis-4.0.2&#x2F;src&#x2F;redis-trib.rb &#x2F;home&#x2F;iot&#x2F;test&#x2F;Myredis</p><p>(5)运行命令建立redis集群</p><p>​.&#x2F;redis-trib.rb create –replicas 1 192.168.1.124:6379 192.168.1.124:6380 192.168.1.124:6381 192.168.1.124:6389 192.168.1.124:6390 192.168.1.124:6391</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-09(3).png" alt="本地png图片PictureTest.png"></p><p>(6) -c 采用集群策略连接，设置数据会自动切换到相应的写主机</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-09(4).png" alt="本地png图片PictureTest.png"></p><p><strong>出现的错误:</strong></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-09(5).png" alt="本地png图片PictureTest.png"></p><p><strong>解决方法：</strong></p><p>1)、将需要新增的节点下aof、rdb等本地备份文件删除；</p><p>2)、同时将新Node的集群配置文件删除,即：删除你redis.conf里面cluster-config-file所在的文件</p><p>3)、再次添加新节点如果还是报错，则登录新Node,.&#x2F;redis-cli–h x –p对数据库进行清除.</p><h4 id="3-9-2-redis集群操作"><a href="#3-9-2-redis集群操作" class="headerlink" title="3.9.2 redis集群操作"></a>3.9.2 redis集群操作</h4><p>(1) 查询集群中的值</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-09(6).png" alt="本地png图片PictureTest.png"></p><p>注意：只能查询自己插槽的值</p><p>查看键值在那个插槽</p><p>cluster keyslot value</p><p>查看插槽中键值的数量</p><p>cluster countkeysinslot 12706</p><p>查看插槽中键值</p><p>cluster getkeysinslot 12706 10</p><p>(2)故障恢复</p><p>如果主节点下线？从节点能否自动升为主节点？注意：15秒超时,能</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-09(7).png" alt="本地png图片PictureTest.png"></p><p>重连回来之后变为从节点</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server 6379.conf</span><br><span class="line">redis-cli -c -p 3=6379</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C5-redis%5C3-09(8).png" alt="本地png图片PictureTest.png"></p><h2 id="4-hiredis的使用"><a href="#4-hiredis的使用" class="headerlink" title="4 hiredis的使用"></a>4 hiredis的使用</h2><ol><li><p>hiredis的安装</p><ul><li>下载地址: <a href="http://redis.cn/clients.html#c">http://redis.cn/clients.html#c</a> </li><li>安装<ul><li>make</li></ul></li></ul></li><li><p>hiredis API接口的使用</p><ul><li><p>连接数据库</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">redisContext *<span class="title function_">redisConnect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ip, <span class="type">int</span> port)</span>;</span><br><span class="line">redisContext *<span class="title function_">redisConnectWithTimeout</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ip, </span></span><br><span class="line"><span class="params">                                      <span class="type">int</span> port, <span class="type">const</span> <span class="keyword">struct</span> timeval tv)</span>;</span><br></pre></td></tr></table></figure></li><li><p>执行redis命令函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行redis命令</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">redisCommand</span><span class="params">(redisContext *c, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="comment">// redisCommand 函数实际的返回值类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisReply</span> &#123;</span></span><br><span class="line">    <span class="comment">/* 命令执行结果的返回类型 */</span></span><br><span class="line">    <span class="type">int</span> type; </span><br><span class="line">    <span class="comment">/* 存储执行结果返回为整数 */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> integer;</span><br><span class="line">    <span class="comment">/* str变量的字符串值长度 */</span></span><br><span class="line">    <span class="type">size_t</span> len;</span><br><span class="line">    <span class="comment">/* 存储命令执行结果返回是字符串, 或者错误信息 */</span></span><br><span class="line">    <span class="type">char</span> *str;</span><br><span class="line">    <span class="comment">/* 返回结果是数组, 代表数据的大小 */</span></span><br><span class="line">    <span class="type">size_t</span> elements;</span><br><span class="line">    <span class="comment">/* 存储执行结果返回是数组*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisReply</span> **<span class="title">element</span>;</span></span><br><span class="line">&#125; redisReply;</span><br><span class="line">redisReply a[<span class="number">100</span>];</span><br><span class="line">element[i]-&gt;str</span><br></pre></td></tr></table></figure><table><thead><tr><th>状态表示</th><th>含义</th></tr></thead><tbody><tr><td>REDIS_REPLY_STRING&#x3D;&#x3D;1</td><td>返回值是字符串,字符串储存在redis-&gt;str当中,字符串长度为redi</td></tr><tr><td>REDIS_REPLY_ARRAY&#x3D;&#x3D; 2</td><td>返回值是数组，数组大小存在redis-&gt;elements里面，数组值存储在redis-&gt;element[i]里面。数组里面存储的是指向redisReply的指针，数组里面的返回值可以通过redis-&gt;element[i]-&gt;str来访问，数组的结果里全是type&#x3D;&#x3D;REDIS_REPLY_STRING的redisReply对象指针。</td></tr><tr><td>REDIS_REPLY_INTEGER &#x3D;&#x3D; 3</td><td>返回整数long long，从integer字段获取值</td></tr><tr><td>REDIS_REPLY_NIL&#x3D;&#x3D;4</td><td>返回值为空表示执行结果为空</td></tr><tr><td>REDIS_REPLY_STATUS &#x3D;&#x3D;5</td><td>返回命令执行的状态，比如set foo bar 返回的状态为OK，存储在str当中 reply-&gt;str &#x3D;&#x3D; “OK” 。</td></tr><tr><td>REDIS_REPLY_ERROR &#x3D;&#x3D;6</td><td>命令执行错误,错误信息存放在 reply-&gt;str当中。</td></tr></tbody></table></li><li><p>释放资源</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeReplyObject</span><span class="params">(<span class="type">void</span> *reply)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">redisFree</span><span class="params">(redisContext *c)</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux网络编程笔记</title>
      <link href="/2022/07/29/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/29/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-TCP状态转换"><a href="#1-TCP状态转换" class="headerlink" title="1.TCP状态转换"></a>1.TCP状态转换</h2><p><img src="/img%5C%E5%9B%BE%E7%89%87%5CTCP%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png" alt="本地png图片PictureTest.png"></p><p>​<strong>图1 TCP状态转换图</strong></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5CTCP.png" alt="本地png图片PictureTest.png"></p><p>注:（1）当主动连接端主动发送SYN标志位时，主动连接端进入SYN_SENT状态，接收到SYN标志位和ACK时，在没有发送ACK之前，主动连接段一直是SYS_SENT状态，发送完ACK之后，三次握手完成，就进入ESTABLISHED状态。数据传输状态就一直是ESTABLISHED，当主动关闭端主动发送FIN时，在没有接收到被动关闭端发来的ACK时，就进入了FIN_WAIT_1状态，如果没有收到被动关闭端发来的ACK时，就会一直发送FIN。在收到ACK时，就进入FIN_WAIT_2状态。主动关闭端接收到被动关闭端发来的FIN时，此时还是FIN_WAIT_2状态，当主动关闭端成功发送ACK时，就会进入TIME_WAIT状态。只有在2MSL时长之后，就会进入close状态。</p><p> （2）当被动连接端马上进入Listen,接收到主动连接方发来的SYN时，被动连接端还是Listen，在发送SYN和ACK之后，就进入了SYN_RCVD状态，如果此时没有收到主动连接端发来的ACK时，就一直会发送SYN和ACK，直到接收到ACK，就进入ESTABLISHED状态。当被动关闭端接收到主动关闭端发来的FIN时，在没有发送ACK给主动关闭端时，就一直是ESTABLISHED，发送给ACK给主动关闭端，就进入了CLOSE_WAIT状态，对应主动关闭端的FIN_WAIT_2状态。在发送FIN给主动关闭端之后，就进入了LAST_ACK状态.在2MSL期间，没有收到主动关闭端发来的ACK时，就一直会发送FIN，直到收到ACK为止。过了2MSL之后，就主动关闭了。</p><h2 id="2-2MSL"><a href="#2-2MSL" class="headerlink" title="2.2MSL"></a>2.2MSL</h2><p>​一定出现在主动关闭连接请求端— 对应 TIME_WAIT 状态。保证，最后一个 ACK 能成功被对端接收。（等待期间，对端没收到我发的ACK，对端会再次发送FIN请求。）</p><h2 id="3-半关闭"><a href="#3-半关闭" class="headerlink" title="3.半关闭"></a>3.半关闭</h2><p>​比如说使用dup函数使得两个文件描述符都指向一个文件，当使用close关闭，只会关闭其中一个文件描述符，另外一个文件描述符还可以对该符号进行操作，使用shutdown函数就将两个文件描述符全关闭。</p><h2 id="4-多路IO转接服务器设计思路"><a href="#4-多路IO转接服务器设计思路" class="headerlink" title="4.多路IO转接服务器设计思路"></a>4.多路IO转接服务器设计思路</h2><h3 id="4-1-select模型"><a href="#4-1-select模型" class="headerlink" title="4.1 select模型"></a>4.1 select模型</h3><h4 id="4-1-1-select设计思路"><a href="#4-1-1-select设计思路" class="headerlink" title="4.1.1 select设计思路"></a>4.1.1 select设计思路</h4><p>​首先老板会创建监听文件描述符lfd，交给秘书去监听，一旦有客户端连接到来，就会通知老板去处理，老板就会调用Accept函数去处理这个监听文件描述符，并且创建出通信描述符cfd，将cfd交给秘书去通信，一旦有数据到来，就会通知老板去处理，优点在于不会一直阻塞在Accept函数和read函数上，一有客户端就处理，一有数据就处理，不会造成资源的浪费。</p><h4 id="4-1-2-select代码"><a href="#4-1-2-select代码" class="headerlink" title="4.1.2 select代码"></a>4.1.2 select代码</h4><p><img src="E:/蔡伟/14-笔记/图片/select代码.png" alt="本地png图片PictureTest.png"></p><h5 id="1-为什么要保存监听集合？"><a href="#1-为什么要保存监听集合？" class="headerlink" title="(1) 为什么要保存监听集合？"></a>(1) 为什么要保存监听集合？</h5><p>​**答:**因为有五个客户端连接时，文件监听描述符集合里有五个上面有值，再有一个客户端连接时，另外五个对应的监听文件描述符将会从监听文件描述符集合里剔除掉，另外五个本来是已经连接好的状态，只要有数据发过来就可以处理，不保存的话发来数据就不能处理了。</p><h5 id="2-if-0-x3D-x3D-–nready"><a href="#2-if-0-x3D-x3D-–nready" class="headerlink" title="(2) if(0 &#x3D;&#x3D; –nready)"></a>(2) if(0 &#x3D;&#x3D; –nready)</h5><p>​**答:**因为进入if(FD_ISSET(listenfd,&amp;rset))中，必定只监听lfd文件描述符，select的返回值一定是一，所以就跳过这次循环，直接监听有客户端连接或者是客户端数据到来。如果有一个客户端连接和另外一个客户端发送数据同时发生的话，优先处理客户端连接的情况，将不会跳过这次循环，因为返回的是2。</p><h5 id="3-select第二版本"><a href="#3-select第二版本" class="headerlink" title="(3) select第二版本"></a>(3) select第二版本</h5><p>**答:**（1）判断是否有数据发来的逻辑中，通过select返回值是1，说明只有其中一个发生变化，所以通过if(–nready &#x3D;&#x3D; 0)就可以退出for循环，不需要遍历后面的通信文件描述符</p><p>​（2）缺点:当数组都存了文件描述符时，其中中间的客户端都退出了，for循环还是得遍历到最后一个才能找到cfd为1023的客户端。</p><h4 id="4-1-3-select优缺点"><a href="#4-1-3-select优缺点" class="headerlink" title="4.1.3 select优缺点"></a>4.1.3 select优缺点</h4><p>**答:**缺点:(1)监听上限受文件描述符限制。 最大 1024</p><p>​  (2)检测满足条件的fd， 自己添加业务逻辑提高小。 提高了编码难度。</p><p>​  (3)在select第一版本代码中，如果监听的是3,6,1023,有数据到来，那么for循环将会从3开始一直遍历到1023，效率低</p><p>​优点:跨平台。win、linux、macOS、Unix、类Unix、mips</p><h3 id="4-2-poll模型"><a href="#4-2-poll模型" class="headerlink" title="4.2 poll模型"></a>4.2 poll模型</h3><p>​了解就可以</p><h3 id="4-3-epoll模型"><a href="#4-3-epoll模型" class="headerlink" title="4.3 epoll模型"></a>4.3 epoll模型</h3><h4 id="4-3-1-epoll反应堆"><a href="#4-3-1-epoll反应堆" class="headerlink" title="4.3.1 epoll反应堆"></a>4.3.1 epoll反应堆</h4><p>​（1）void initlistensocket(int efd, short port)</p><p>​在这个函数中，将lfd放在全局数组的最后一个位置</p><p>​（2）当客户端发送数据时，会重新更新时间</p><p>​（3）当有客户端连接时，就会调用void acceptconn(int lfd, int events, void *arg)函数去接受，并且设置读事件，看有没有客户端发数据来，先超时验证，在继续使用epoll_wait监听</p><h3 id="4-4-线程池"><a href="#4-4-线程池" class="headerlink" title="4.4 线程池"></a>4.4 线程池</h3><h4 id="4-4-1-相较于多路转接的缺点"><a href="#4-4-1-相较于多路转接的缺点" class="headerlink" title="4.4.1 相较于多路转接的缺点"></a>4.4.1 相较于多路转接的缺点</h4><p>​一旦客户端连接或者客户端发送数据，就要创造一个线程来处理，如果有多个客户端同时发数据，就要创造很多个线程来处理，需要从用户态到内核态的切换，这就造成系统的负载，资源的浪费</p><h4 id="4-4-2-改进方法"><a href="#4-4-2-改进方法" class="headerlink" title="4.4.2 改进方法"></a>4.4.2 改进方法</h4><p>​首先先创造一个线程池，这是有N个线程组成的一块内存，当没有数据到来的时候，就一直阻塞在条件变量，条件变量是任务队列不为NULL，任务队列则是放着任务的队列。</p><p>(2)为什么不使用静态初始化，因为定义的不是全局锁和条件变量，只能使用锁初始化和条件变量初始化函数来初始化</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++小技巧</title>
      <link href="/2022/07/29/C-%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/07/29/C-%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>1.读取输入时，是ctrl+z加换行符结束输入</p><p>2.如何读取一行数字之后，然后在读取另外一行?</p><p>答：使用C函数中getchar()，读取下一个字符，为换行符，则break。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//伪代码</span></span><br><span class="line"><span class="function">ListNode * <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode * header = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">ListNode * pCurrent = header;</span><br><span class="line"><span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; val)</span><br><span class="line">&#123;</span><br><span class="line">ListNode * newnode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">newnode-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">newnode-&gt;val = val;</span><br><span class="line">pCurrent-&gt;next = newnode;</span><br><span class="line">pCurrent = newnode;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode *head = header-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> header;</span><br><span class="line">pCurrent = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(pCurrent)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; pCurrent-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.如何读取一行字符串之后，然后在读取另外一行?</p><p>答：使用getline()，当读取的字符串大小为0，即可退出循环。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string str;</span><br><span class="line">vector&lt;string&gt; str_list;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">getline</span>(cin, str)&#123;</span><br><span class="line"><span class="keyword">if</span>(str.<span class="built_in">size</span>()==<span class="number">0</span>)    <span class="keyword">break</span>;<span class="comment">//记得要这句，才能结束输入</span></span><br><span class="line">str_list.<span class="built_in">push_back</span>(str);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt; str_list.<span class="built_in">size</span>()&lt;&lt;endl; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> s: str_list)&#123;</span><br><span class="line">cout&lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用cin.get()函数去掉产生得空格</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> ch; </span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Enter a number:&quot;</span>;</span><br><span class="line">cin &gt;&gt; number;   <span class="comment">// 读取整数</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Enter a character: &quot;</span>;</span><br><span class="line">cin.<span class="built_in">ignore</span>();    <span class="comment">//使用ignore函数忽略产生得换行符</span></span><br><span class="line">ch = cin.<span class="built_in">get</span>() ;   <span class="comment">// 读取字符</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Thank You!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++面经.md</title>
      <link href="/2022/07/29/C-%E9%9D%A2%E7%BB%8F-md/"/>
      <url>/2022/07/29/C-%E9%9D%A2%E7%BB%8F-md/</url>
      
        <content type="html"><![CDATA[<h2 id="1-语言基础-C-x2F-C"><a href="#1-语言基础-C-x2F-C" class="headerlink" title="1 语言基础(C&#x2F;C++)"></a>1 语言基础(C&#x2F;C++)</h2><h3 id="1-1-指针和引用的区别"><a href="#1-1-指针和引用的区别" class="headerlink" title="1.1 指针和引用的区别"></a>1.1 指针和引用的区别</h3><p>引用是一种更安全的指针</p><p>(1)引用是必须初始化的，指针可以不初始化</p><p>(2)引用只有一级引用，没有多级引用;指针可以有一级指针，也可以有多级指针</p><p>(3)定义一个引用变量，和定义一个指针变量，其汇编指令是一模一样的；通过引用变量修改所引用内存的值，和通过指针解引用修改指针指向的内存的值，其底层指令也是一模一样的</p><h3 id="1-2-如何输入文件结束符"><a href="#1-2-如何输入文件结束符" class="headerlink" title="1.2 如何输入文件结束符"></a>1.2 如何输入文件结束符</h3><p>​敲Ctrl+Z,然后按Enter或Return键。</p><h3 id="1-2-函数调用过程中对象背后调用的方法太多"><a href="#1-2-函数调用过程中对象背后调用的方法太多" class="headerlink" title="1.2 函数调用过程中对象背后调用的方法太多"></a>1.2 函数调用过程中对象背后调用的方法太多</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">int</span> a): <span class="built_in">m_a</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">const</span> Test &amp; t):<span class="built_in">m_a</span>(t.m_a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = t.m_a;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getdata</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">getv</span><span class="params">(Test t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> val = t.<span class="built_in">getdata</span>();</span><br><span class="line"></span><br><span class="line">Test t1 = <span class="built_in">Test</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t1;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2; </span><br><span class="line">t2 = <span class="built_in">getv</span>(t1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注:</strong>(1)  t1构造函数-&gt;t2构造函数-&gt;getv函数-&gt;Test t &#x3D; t1 拷贝构造函数-&gt;Test t1 &#x3D; Test(val) 有参构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;getv函数结束后t1析构-&gt;t析构-&gt;t2 &#x3D; 临时对象赋值操作-&gt;赋值完成后临时对象析构-&gt;t2析构-&gt;t1析构 </p><p><img src="E:/E/蔡伟/14-笔记/图片/1-02程序结果.png" alt="本地png图片PictureTest.png"></p><h3 id="1-3-总结三条对象优化的规则"><a href="#1-3-总结三条对象优化的规则" class="headerlink" title="1.3 总结三条对象优化的规则"></a>1.3 总结三条对象优化的规则</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">int</span> a): <span class="built_in">m_a</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">const</span> Test &amp; t):<span class="built_in">m_a</span>(t.m_a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = t.m_a;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getdata</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">getv1</span><span class="params">(Test &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> val = t.<span class="built_in">getdata</span>();</span><br><span class="line"></span><br><span class="line">Test t1 = <span class="built_in">Test</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t1;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">getv2</span><span class="params">(Test &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> val = t.<span class="built_in">getdata</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Test</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2; </span><br><span class="line">t2 = <span class="built_in">getv1</span>(t1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2; </span><br><span class="line">t2 = <span class="built_in">getv2</span>(t1);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2 = <span class="built_in">getv2</span>(t1); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test03</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-1-函数参数传递过程中，对象有限按引用传递，不要按值传递"><a href="#1-3-1-函数参数传递过程中，对象有限按引用传递，不要按值传递" class="headerlink" title="1.3.1 函数参数传递过程中，对象有限按引用传递，不要按值传递"></a>1.3.1 函数参数传递过程中，对象有限按引用传递，不要按值传递</h4><p>​ t1构造函数-&gt;t2构造函数-&gt;getv函数-&gt;Test t1 &#x3D; Test(val) 有参构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;getv函数结束后t1析构-&gt;t2 &#x3D; 临时对象赋值操作-&gt;赋值完成后临时对象析构-&gt;t2析构-&gt;t1析构 </p><h4 id="1-3-2-函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象"><a href="#1-3-2-函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象" class="headerlink" title="1.3.2 函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象"></a>1.3.2 函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象</h4><p>​ t1构造函数-&gt;t2构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;t2 &#x3D; 临时对象赋值操作-&gt;赋值完成后临时对象析构-&gt;t2析构-&gt;t1析构 </p><h4 id="1-3-3-接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受"><a href="#1-3-3-接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受" class="headerlink" title="1.3.3 接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受"></a>1.3.3 接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受</h4><p>​ t1构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;t2 &#x3D; 临时对象赋值操作-&gt;t2析构-&gt;t1析构 </p><h3 id="1-4-CMyString的代码问题"><a href="#1-4-CMyString的代码问题" class="headerlink" title="1.4 CMyString的代码问题"></a>1.4 CMyString的代码问题</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//会利用拷贝构造函数生成一个临时对象，会在栈上临时开辟内存，再将内容拷贝到内存上</span></span><br><span class="line"><span class="comment">//这大大增加了资源的损耗 </span></span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;11111111111111111&quot;</span>)</span></span>;</span><br><span class="line">    String str2;</span><br><span class="line">    str2 = <span class="built_in">get_string</span>(str1);</span><br><span class="line">    cout &lt;&lt; str2.<span class="built_in">c_str</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1)会利用拷贝构造函数生成一个临时对象，会在栈上临时开辟内存，再将内容拷贝到内存上，这大大增加了资源的损耗 </p><h3 id="1-5-添加右值引用参数的拷贝构造和赋值函数"><a href="#1-5-添加右值引用参数的拷贝构造和赋值函数" class="headerlink" title="1.5 添加右值引用参数的拷贝构造和赋值函数"></a>1.5 添加右值引用参数的拷贝构造和赋值函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class String</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    String(const char* str = nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;String(const char*)&quot; &lt;&lt; endl;</span><br><span class="line">        if (str != nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = new char[strlen(str) + 1];</span><br><span class="line">            strcpy(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = new char[1];</span><br><span class="line">            *m_data = &#x27;\0&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String(const String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;String(const String&amp; src)&quot; &lt;&lt; endl;</span><br><span class="line">        m_data = new char[strlen(src.m_data) + 1];</span><br><span class="line">        strcpy(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;String(String&amp;&amp; src)&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;m_data = src.m_data;</span><br><span class="line">src.m_data = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">    ~String()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;~String()&quot; &lt;&lt; endl;</span><br><span class="line">        delete[]m_data;</span><br><span class="line">        m_data = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //调用String&amp;是为了支持连续的operator=赋值操作</span><br><span class="line">    String&amp; operator=(const String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;operator=(const String &amp;str)&quot; &lt;&lt; endl;</span><br><span class="line">        if (&amp;str == this)</span><br><span class="line">        &#123;</span><br><span class="line">            return *this;</span><br><span class="line">        &#125;</span><br><span class="line">        delete[]m_data;</span><br><span class="line">        m_data = new char[strlen(str.m_data) + 1];</span><br><span class="line">        strcpy(m_data, str.m_data);</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        //调用String&amp;是为了支持连续的operator=赋值操作</span><br><span class="line">    String&amp; operator=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;operator=(String&amp;&amp; str)&quot; &lt;&lt; endl;</span><br><span class="line">        if (&amp;str == this)</span><br><span class="line">        &#123;</span><br><span class="line">            return *this;</span><br><span class="line">        &#125;</span><br><span class="line">        delete[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = nullptr;</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const char* c_str() </span><br><span class="line">&#123;</span><br><span class="line">        return m_data;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    char* m_data;//用于保存字符串</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">String get_string(String&amp; str) &#123;</span><br><span class="line">    const char* pstr = str.c_str();</span><br><span class="line">    String tmp(pstr);</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    String str1(&quot;11111111111111111&quot;);</span><br><span class="line">    String str2;</span><br><span class="line">    str2 = get_string(str1);</span><br><span class="line">    cout &lt;&lt; str2.c_str() &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1) 改进方法:改用右值引用去接受这个临时对象，就不需要在栈上临时开辟内存，直接接受临时对象的内容，再将临时对象的内容置为空，这样的析构也减少了资源损耗</p><h3 id="1-6-CMyString在vector上的应用"><a href="#1-6-CMyString在vector上的应用" class="headerlink" title="1.6 CMyString在vector上的应用"></a>1.6 CMyString在vector上的应用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs);</span><br><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(String&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_data = src.m_data;</span><br><span class="line">src.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(String&amp;&amp; str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *tmpstr = <span class="keyword">new</span> <span class="built_in">char</span>(<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(tmpstr,lhs.m_data);</span><br><span class="line"><span class="built_in">strcat</span>(tmpstr,rhs.m_data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tmpstr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">str2</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">    String str3 = str1 + str2;</span><br><span class="line">cout &lt;&lt; str3;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注:**每次调用+号时都会申请一块内存，但这块内存并没有释放，很容易造成内存泄漏。</p><p>**改进方法:**使用有参构造出一个对象来，在将申请的内存释放掉</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs);</span><br><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(String&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_data = src.m_data;</span><br><span class="line">src.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(String&amp;&amp; str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *tmpstr = <span class="keyword">new</span> <span class="built_in">char</span>(<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(tmpstr,lhs.m_data);</span><br><span class="line"><span class="built_in">strcat</span>(tmpstr,rhs.m_data);</span><br><span class="line"><span class="function">String <span class="title">str</span><span class="params">(tmpstr)</span></span>;</span><br><span class="line"><span class="keyword">delete</span> [] tmpstr;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">str2</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">    String str3 = str1 + str2;</span><br><span class="line">cout &lt;&lt; str3;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**缺点:**申请一大块内存给构造出来的对象，然后又在内存中剔除，在拷贝构造函数中，也申请一大块内存，这加大了资源的损耗。</p><p>**改进方法:**直接使用右值引用接受这个临时对象，让str3直接指向申请的这块内存，再将内同拷贝给str3.m_data,再将之前申请的这块内存置为空，析构函数也没起到作用，减小资源的损耗</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs);</span><br><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(String&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_data = src.m_data;</span><br><span class="line">src.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(String&amp;&amp; str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">String str;</span><br><span class="line">str.m_data = <span class="keyword">new</span> <span class="built_in">char</span>(<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(str.m_data,lhs.m_data);</span><br><span class="line"><span class="built_in">strcat</span>(str.m_data,rhs.m_data);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">str2</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    String str3 = str1 + str2;</span><br><span class="line">cout &lt;&lt; str3;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="E:/E/蔡伟/14-笔记/图片/1-06(1)程序结果.png" alt="本地png图片PictureTest.png"></p><p>一道校招题</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs);</span><br><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(String&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_data = src.m_data;</span><br><span class="line">src.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(String&amp;&amp; str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;lhs,<span class="type">const</span> String &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">String str;</span><br><span class="line">str.m_data = <span class="keyword">new</span> <span class="built_in">char</span>(<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(str.m_data,lhs.m_data);</span><br><span class="line"><span class="built_in">strcat</span>(str.m_data,rhs.m_data);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="type">const</span> String &amp;str)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">vector&lt;String&gt; pstring;</span><br><span class="line"></span><br><span class="line">pstring.<span class="built_in">reserve</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">pstring.<span class="built_in">push_back</span>(str1);</span><br><span class="line">pstring.<span class="built_in">push_back</span>(<span class="built_in">String</span>(<span class="string">&quot;world&quot;</span>));</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="E:/E/蔡伟/14-笔记/图片/1-06(2)程序结果.png" alt="本地png图片PictureTest.png"></p><h3 id="1-7-move移动语义和forward类型完美转发"><a href="#1-7-move移动语义和forward类型完美转发" class="headerlink" title="1.7 move移动语义和forward类型完美转发"></a>1.7 move移动语义和forward类型完美转发</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, <span class="type">const</span> T&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span>(p)<span class="built_in">T</span>(val);<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, T&amp;&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">new</span>(p)<span class="built_in">T</span>(std::<span class="built_in">move</span>(val));<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T&amp; val)</span><span class="comment">//向容器末尾添加元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">        <span class="built_in">expand</span>();</span><br><span class="line">   *_last++ = val;<span class="comment">//last指针指向的内存构造一个值为val的对象</span></span><br><span class="line">    _allocator.<span class="built_in">construct</span>(_last, val);</span><br><span class="line">    _last++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T&amp;&amp; val)</span><span class="comment">//向容器末尾添加元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">        <span class="built_in">expand</span>();</span><br><span class="line">    *_last++ = val;<span class="comment">//last指针指向的内存构造一个值为val的对象</span></span><br><span class="line">    _allocator.<span class="built_in">construct</span>(_last, std::<span class="built_in">move</span>(val));</span><br><span class="line">    _last++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注:**右值引用本身也是左值，当调用push_back时，底层也只会调用左值引用的构造函数，而不会调用右值引用的构造函数，所以需要使用move进行强转成右值引用。</p><p>**缺点:**代码量太多</p><p>**改进方法:**使用模板函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, <span class="type">const</span> T&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span>(p)<span class="built_in">T</span>(val);<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, T&amp;&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">new</span>(p)<span class="built_in">T</span>(std::<span class="built_in">move</span>(val));<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Ty1&gt; <span class="comment">// 换个名会进行类型推演，直接用T直接断定是右值引用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(Ty1&amp;&amp; val)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">expand</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forward：类型的完美转发</span></span><br><span class="line">_allocator.<span class="built_in">construct</span>(_last, val);</span><br><span class="line">_last++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注:</strong>   函数模板的类型推演 + 引用折叠 String&amp;&amp; + &amp;&amp; &#x3D; String&amp;&amp; String&amp; + &amp;&amp; &#x3D; String&amp;  </p><p>**缺点:**底层也只会调用左值引用的构造函数</p><p><strong>改进方法</strong>:使用forward进行类型的完美转换,能够识别左值和右值类型</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template&lt;typename Ty2&gt;</span><br><span class="line">void construct(T* p, Ty2&amp;&amp; val)//负责对象构造</span><br><span class="line">&#123;</span><br><span class="line">    new (p) T(std::forward&lt;Ty2&gt;(val));//定位new</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Ty1&gt; // 换个名会进行类型推演，直接用T直接断定是右值引用</span><br><span class="line">void push_back(Ty1&amp;&amp; val) </span><br><span class="line">&#123;</span><br><span class="line">if (full())</span><br><span class="line">&#123;</span><br><span class="line">expand();</span><br><span class="line">&#125;</span><br><span class="line">// forward：类型的完美转发</span><br><span class="line">_allocator.construct(_last, std::forward&lt;Ty1&gt;(val));</span><br><span class="line">_last++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-体验一下智能指针的强大"><a href="#2-体验一下智能指针的强大" class="headerlink" title="2 体验一下智能指针的强大"></a>2 体验一下智能指针的强大</h2><h3 id="2-1-基础知识"><a href="#2-1-基础知识" class="headerlink" title="2.1 基础知识"></a>2.1 基础知识</h3><p>裸指针到底有什么不好，写过一些C++代码的人应该都能知道，比如下面的原因：</p><p>(1)忘记释放资源，导致资源泄露（常发生内存泄漏问题）<br>(2)同一资源释放多次，导致释放野指针，程序崩溃<br>(3)明明代码的后面写了释放资源的代码，但是由于程序逻辑满足条件，从中间return掉了，导致释放资源的代码未被执行到<br>(4)代码运行过程中发生异常，随着异常栈展开，导致释放资源的代码未被执行到</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPointer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SmartPointer</span>(T *point = <span class="literal">NULL</span>):<span class="built_in">pointer</span>(point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SmartPointer</span>(<span class="type">const</span> SmartPointer&lt;T&gt; &amp;point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">T &amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T * <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">SmartPointer</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T * pointer; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_num = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person &amp;person) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_num:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s</span><span class="params">(<span class="keyword">new</span> Person)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s1</span><span class="params">(s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>智能指针的优点:</strong></p><p>(1)智能指针体现在把裸指针进行了一次面向对象的封装，在构造函数中初始化资源地址，在析构函数中负责释放资源</p><p>(2)利用栈上的对象出作用域自动析构这个特点，在智能指针的析构函数中保证释放</p><p><strong>智能指针的缺点:</strong>                                                                                                                                                                                                         </p><p>(1)怎么解决智能指针的浅拷贝问题</p><p>(2)多个智能指针指向同一个资源的时候，怎么保证资源只释放一次，而不是每个智能指针都释放一次，造成代码运行不可预期的严重后果</p><p>**改进方法:**使用深拷贝或者带引用计数的智能指针和不带引用计数的智能指针</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPointer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SmartPointer</span>(T *point = <span class="literal">NULL</span>):<span class="built_in">pointer</span>(point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SmartPointer</span>(<span class="type">const</span> SmartPointer&lt;T&gt; &amp;point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;pointer = <span class="keyword">new</span> <span class="built_in">T</span>(*point.pointer);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">T &amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T * <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">SmartPointer</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> pointer;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T * pointer; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_num = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person &amp;person) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_num:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s</span><span class="params">(<span class="keyword">new</span> Person)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s1</span><span class="params">(s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="2-2-不带引用计数的智能指针"><a href="#2-2-不带引用计数的智能指针" class="headerlink" title="2.2 不带引用计数的智能指针"></a>2.2 不带引用计数的智能指针</h3><h4 id="2-2-1-auto-ptr"><a href="#2-2-1-auto-ptr" class="headerlink" title="2.2.1 auto_ptr"></a>2.2.1 auto_ptr</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">s1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出错 </span></span><br><span class="line">*s1 = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>auto_ptr的缺点</strong>:</p><p>(1)auto_ptr没有使用引用计数，在复制构造函数和赋值构造函数中将对象所有权转移了。</p><p>(2)auto_ptr不能指向数组，因为auto_ptr在析构的时候只是调用delete,而数组应该要调用delete[]。</p><p>(3)auto_ptr不能和标准容器（vector,list,map…)一起使用。</p><p>**总结:**auto_ptr智能指针不带引用计数，那么它处理浅拷贝的问题，是直接把前面的auto_ptr都置为nullptr，只让最后一个auto_ptr持有资源。</p><h4 id="2-2-2-scoped-ptr"><a href="#2-2-2-scoped-ptr" class="headerlink" title="2.2.2 scoped_ptr"></a>2.2.2 scoped_ptr</h4><p>​从根本上杜绝了智能指针浅拷贝的发生，所以scoped_ptr也是不能用在容器当中的，如果容器互相进行拷贝或者赋值，就会引起scoped_ptr对象的拷贝构造和赋值，这是不允许的，代码会提示编译错误。</p><h4 id="2-2-3-unique-ptr"><a href="#2-2-3-unique-ptr" class="headerlink" title="2.2.3 unique_ptr"></a>2.2.3 unique_ptr</h4>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++高级教程</title>
      <link href="/2022/07/29/C-%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/"/>
      <url>/2022/07/29/C-%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-对象被优化以后才是高效的C-编程"><a href="#1-对象被优化以后才是高效的C-编程" class="headerlink" title="1 对象被优化以后才是高效的C++编程"></a>1 对象被优化以后才是高效的C++编程</h2><h3 id="1-1-对象使用过程中背后调用了那些方法"><a href="#1-1-对象使用过程中背后调用了那些方法" class="headerlink" title="1.1 对象使用过程中背后调用了那些方法"></a>1.1 对象使用过程中背后调用了那些方法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">int</span> a): <span class="built_in">m_a</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">const</span> Test &amp; t):<span class="built_in">m_a</span>(t.m_a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = t.m_a;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t = <span class="built_in">Test</span>(<span class="number">10</span>);</span><br><span class="line"><span class="function">Test <span class="title">t1</span><span class="params">(t)</span></span>;</span><br><span class="line">Test t2 = t1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显式生成临时对象，当这句话执行完成后，这个临时对象马上被析构</span></span><br><span class="line">t1 = <span class="built_in">Test</span>(<span class="number">10</span>);</span><br><span class="line">t1 = (Test)<span class="number">20</span>;</span><br><span class="line"><span class="comment">//隐式生成临时对象，当这句话执行完成后，这个临时对象马上被析构</span></span><br><span class="line">t1 = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不应该用指针保留一个临时对象，因为出了这个语句后p指向的是一个已经析构的临时对象</span></span><br><span class="line"><span class="comment">//而可以用引用来保留一个临时对象，出了语句临时对象不析构，</span></span><br><span class="line"><span class="comment">//因为引用相当于一个别名，临时对象的生命周期会变成引用变量的生命周期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test *t3 = &amp;Test(20); 会报错 </span></span><br><span class="line"><span class="type">const</span> Test &amp;t4 = <span class="built_in">Test</span>(<span class="number">10</span>);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注:(1) 不应该用指针保留一个临时对象,因为出了这个语句后p指向的是一个已经析构的临时对象,而可以用引用来保留一个临时对象，出了语句临时对象不析构,因为引用相当于一个别名，临时对象的生命周期会变成引用变量的生命周期</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-01(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">int</span> a,<span class="type">int</span> b = <span class="number">6</span>): <span class="built_in">m_a</span>(a),<span class="built_in">m_b</span>(b)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">const</span> Test &amp; t):<span class="built_in">m_a</span>(t.m_a),<span class="built_in">m_b</span>(t.m_b)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = t.m_a;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_b = t.m_b;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line"><span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>,<span class="number">10</span>)</span></span>; <span class="comment">//有参构造函数 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">20</span>,<span class="number">20</span>)</span></span>;  <span class="comment">//有参构造函数 </span></span><br><span class="line">Test t3 = t2; <span class="comment">//拷贝构造函数 </span></span><br><span class="line"><span class="type">static</span> Test t4 = <span class="built_in">Test</span>(<span class="number">30</span>,<span class="number">30</span>); <span class="comment">//有参构造函数 </span></span><br><span class="line">t2 = <span class="built_in">Test</span>(<span class="number">40</span>,<span class="number">40</span>);  <span class="comment">//先显式有参构造临时对象，在赋值，执行完这条语句，析构临时对象 </span></span><br><span class="line">t2 = (Test)(<span class="number">50</span>,<span class="number">50</span>); <span class="comment">//先显式有参构造临时对象，在赋值，执行完这条语句，析构临时对象 </span></span><br><span class="line">t2 = <span class="number">60</span>;<span class="comment">//先隐式有参构造临时对象，在赋值，执行完这条语句，析构临时对象</span></span><br><span class="line">Test* p1 = <span class="keyword">new</span> <span class="built_in">Test</span>(<span class="number">70</span>,<span class="number">70</span>); <span class="comment">//有参构造函数 </span></span><br><span class="line">Test* p2 = <span class="keyword">new</span> Test[<span class="number">2</span>];  <span class="comment">// 构造函数两次 </span></span><br><span class="line"><span class="comment">//Test* p3 = &amp;Test(80);</span></span><br><span class="line"><span class="type">const</span> Test&amp; p4 = <span class="built_in">Test</span>(<span class="number">90</span>,<span class="number">90</span>);<span class="comment">//有参构造函数 </span></span><br><span class="line"><span class="keyword">delete</span> p1;   </span><br><span class="line"><span class="keyword">delete</span>[]p2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*析构的顺序</span></span><br><span class="line"><span class="comment">p1,p2,p2,p4,t3,t2,t4,t5,t1 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">t5</span><span class="params">(<span class="number">100</span>,<span class="number">100</span>)</span></span>; <span class="comment">//有参构造函数 </span></span><br></pre></td></tr></table></figure><p><strong>注:</strong>(1) 构造顺序:t1-&gt;t5&gt;t2-&gt;t3_&gt;t4-&gt;p1-&gt;p2-&gt;p4</p><p>​ (2) 析构顺序:p1-&gt;p2-&gt;p2-&gt;p4-&gt;t3-&gt;t2-&gt;t4-&gt;t5-&gt;t1</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-01(2)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h3 id="1-2-函数调用过程中对象背后调用的方法太多"><a href="#1-2-函数调用过程中对象背后调用的方法太多" class="headerlink" title="1.2 函数调用过程中对象背后调用的方法太多"></a>1.2 函数调用过程中对象背后调用的方法太多</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">int</span> a): <span class="built_in">m_a</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">const</span> Test &amp; t):<span class="built_in">m_a</span>(t.m_a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = t.m_a;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getdata</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">getv</span><span class="params">(Test t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> val = t.<span class="built_in">getdata</span>();</span><br><span class="line"></span><br><span class="line">Test t1 = <span class="built_in">Test</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t1;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2; </span><br><span class="line">t2 = <span class="built_in">getv</span>(t1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注:</strong>(1)  t1构造函数-&gt;t2构造函数-&gt;getv函数-&gt;Test t &#x3D; t1 拷贝构造函数-&gt;Test t1 &#x3D; Test(val) 有参构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;getv函数结束后t1析构-&gt;t析构-&gt;t2 &#x3D; 临时对象赋值操作-&gt;赋值完成后临时对象析构-&gt;t2析构-&gt;t1析构 </p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-02%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h3 id="1-3-总结三条对象优化的规则"><a href="#1-3-总结三条对象优化的规则" class="headerlink" title="1.3 总结三条对象优化的规则"></a>1.3 总结三条对象优化的规则</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">int</span> a): <span class="built_in">m_a</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test</span>(<span class="type">const</span> Test &amp; t):<span class="built_in">m_a</span>(t.m_a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = t.m_a;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getdata</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">getv1</span><span class="params">(Test &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> val = t.<span class="built_in">getdata</span>();</span><br><span class="line"></span><br><span class="line">Test t1 = <span class="built_in">Test</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t1;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">getv2</span><span class="params">(Test &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> val = t.<span class="built_in">getdata</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Test</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2; </span><br><span class="line">t2 = <span class="built_in">getv1</span>(t1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2; </span><br><span class="line">t2 = <span class="built_in">getv2</span>(t1);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;  </span><br><span class="line">Test t2 = <span class="built_in">getv2</span>(t1); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test03</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-1-函数参数传递过程中，对象有限按引用传递，不要按值传递"><a href="#1-3-1-函数参数传递过程中，对象有限按引用传递，不要按值传递" class="headerlink" title="1.3.1 函数参数传递过程中，对象有限按引用传递，不要按值传递"></a>1.3.1 函数参数传递过程中，对象有限按引用传递，不要按值传递</h4><p>​ t1构造函数-&gt;t2构造函数-&gt;getv函数-&gt;Test t1 &#x3D; Test(val) 有参构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;getv函数结束后t1析构-&gt;t2 &#x3D; 临时对象赋值操作-&gt;赋值完成后临时对象析构-&gt;t2析构-&gt;t1析构 </p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-03(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h4 id="1-3-2-函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象"><a href="#1-3-2-函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象" class="headerlink" title="1.3.2 函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象"></a>1.3.2 函数返回对象的时候，应该优先返回一个临时对象，而不要返回一个定义过的对象</h4><p>​ t1构造函数-&gt;t2构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;t2 &#x3D; 临时对象赋值操作-&gt;赋值完成后临时对象析构-&gt;t2析构-&gt;t1析构 </p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-03(2)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h4 id="1-3-3-接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受"><a href="#1-3-3-接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受" class="headerlink" title="1.3.3 接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受"></a>1.3.3 接受返回值是对象的函数调用的时候，优先按初始化的方式接受，不要按赋值的方式接受</h4><p>​ t1构造函数-&gt;拷贝构造函数出一个在main函数上的临时对象-&gt;t2 &#x3D; 临时对象赋值操作-&gt;t2析构-&gt;t1析构 </p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-03(3)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h3 id="1-4-CMyString的代码问题"><a href="#1-4-CMyString的代码问题" class="headerlink" title="1.4 CMyString的代码问题"></a>1.4 CMyString的代码问题</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//会利用拷贝构造函数生成一个临时对象，会在栈上临时开辟内存，再将内容拷贝到内存上</span></span><br><span class="line"><span class="comment">//这大大增加了资源的损耗 </span></span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;11111111111111111&quot;</span>)</span></span>;</span><br><span class="line">    String str2;</span><br><span class="line">    str2 = <span class="built_in">get_string</span>(str1);</span><br><span class="line">    cout &lt;&lt; str2.<span class="built_in">c_str</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-04(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>(1)会利用拷贝构造函数生成一个临时对象，会在栈上临时开辟内存，再将内容拷贝到内存上，这大大增加了资源的损耗 </p><h3 id="1-5-添加右值引用参数的拷贝构造和赋值函数"><a href="#1-5-添加右值引用参数的拷贝构造和赋值函数" class="headerlink" title="1.5 添加右值引用参数的拷贝构造和赋值函数"></a>1.5 添加右值引用参数的拷贝构造和赋值函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#pragma warning(disable:4996)</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class String</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    String(const char* str = nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;String(const char*)&quot; &lt;&lt; endl;</span><br><span class="line">        if (str != nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = new char[strlen(str) + 1];</span><br><span class="line">            strcpy(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = new char[1];</span><br><span class="line">            *m_data = &#x27;\0&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String(const String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;String(const String&amp; src)&quot; &lt;&lt; endl;</span><br><span class="line">        m_data = new char[strlen(src.m_data) + 1];</span><br><span class="line">        strcpy(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;String(String&amp;&amp; src)&quot; &lt;&lt; endl;</span><br><span class="line">this-&gt;m_data = src.m_data;</span><br><span class="line">src.m_data = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">    ~String()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;~String()&quot; &lt;&lt; endl;</span><br><span class="line">        delete[]m_data;</span><br><span class="line">        m_data = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //调用String&amp;是为了支持连续的operator=赋值操作</span><br><span class="line">    String&amp; operator=(const String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;operator=(const String &amp;str)&quot; &lt;&lt; endl;</span><br><span class="line">        if (&amp;str == this)</span><br><span class="line">        &#123;</span><br><span class="line">            return *this;</span><br><span class="line">        &#125;</span><br><span class="line">        delete[]m_data;</span><br><span class="line">        m_data = new char[strlen(str.m_data) + 1];</span><br><span class="line">        strcpy(m_data, str.m_data);</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        //调用String&amp;是为了支持连续的operator=赋值操作</span><br><span class="line">    String&amp; operator=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;operator=(String&amp;&amp; str)&quot; &lt;&lt; endl;</span><br><span class="line">        if (&amp;str == this)</span><br><span class="line">        &#123;</span><br><span class="line">            return *this;</span><br><span class="line">        &#125;</span><br><span class="line">        delete[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = nullptr;</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const char* c_str() </span><br><span class="line">&#123;</span><br><span class="line">        return m_data;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    char* m_data;//用于保存字符串</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">String get_string(String&amp; str) &#123;</span><br><span class="line">    const char* pstr = str.c_str();</span><br><span class="line">    String tmp(pstr);</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    String str1(&quot;11111111111111111&quot;);</span><br><span class="line">    String str2;</span><br><span class="line">    str2 = get_string(str1);</span><br><span class="line">    cout &lt;&lt; str2.c_str() &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-05(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>(1) 改进方法:改用右值引用去接受这个临时对象，就不需要在栈上临时开辟内存，直接接受临时对象的内容，再将临时对象的内容置为空，这样的析构也减少了资源损耗</p><h3 id="1-6-CMyString在vector上的应用"><a href="#1-6-CMyString在vector上的应用" class="headerlink" title="1.6 CMyString在vector上的应用"></a>1.6 CMyString在vector上的应用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs);</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(String&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_data = src.m_data;</span><br><span class="line">        src.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(String&amp;&amp; str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* tmpstr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(tmpstr, lhs.m_data);</span><br><span class="line">    <span class="built_in">strcat</span>(tmpstr, rhs.m_data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(tmpstr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">str2</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">    String str3 = str1 + str2;</span><br><span class="line">    cout &lt;&lt; str3;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-06(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>**注:**每次调用+号时都会申请一块内存，但这块内存并没有释放，很容易造成内存泄漏。</p><p>**改进方法:**使用有参构造出一个对象来，在将申请的内存释放掉</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs);</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* tmpstr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(tmpstr, lhs.m_data);</span><br><span class="line">    <span class="built_in">strcat</span>(tmpstr, rhs.m_data);</span><br><span class="line">    <span class="function">String <span class="title">str</span><span class="params">(tmpstr)</span></span>;</span><br><span class="line">    <span class="keyword">delete</span>[]tmpstr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">str2</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">    String str3 = str1 + str2;</span><br><span class="line">    cout &lt;&lt; str3;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-06(2)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>**缺点:**申请一大块内存给构造出来的对象，然后又在内存中剔除，在拷贝构造函数中，也申请一大块内存，这加大了资源的损耗。</p><p>**改进方法:**直接使用右值引用接受这个临时对象，让str3直接指向申请的这块内存，再将内同拷贝给str3.m_data,再将之前申请的这块内存置为空，析构函数也没起到作用，减小资源的损耗</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs);</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(String&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_data = src.m_data;</span><br><span class="line">        src.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(String&amp;&amp; str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    String str;</span><br><span class="line">    str.m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(str.m_data, lhs.m_data);</span><br><span class="line">    <span class="built_in">strcat</span>(str.m_data, rhs.m_data);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">str2</span><span class="params">(<span class="string">&quot; world!&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    String str3 = str1 + str2;  <span class="comment">//临时对象的析构指针并没有什么东西</span></span><br><span class="line">    cout &lt;&lt; str3;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-06(3)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>一道校招题</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs);</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, src.m_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(String&amp;&amp; src)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(String&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_data = src.m_data;</span><br><span class="line">        src.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const String &amp;str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用String&amp;是为了支持连续的operator=赋值操作</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(String&amp;&amp; str)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[]m_data;</span><br><span class="line">        m_data = str.m_data;</span><br><span class="line">        str.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">get_string</span><span class="params">(String&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = str.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(pstr)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; lhs, <span class="type">const</span> String&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    String str;</span><br><span class="line">    str.m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(lhs.m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(str.m_data, lhs.m_data);</span><br><span class="line">    <span class="built_in">strcat</span>(str.m_data, rhs.m_data);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; str.m_data &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    vector&lt;String&gt; pstring;</span><br><span class="line"></span><br><span class="line">    pstring.<span class="built_in">reserve</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    pstring.<span class="built_in">push_back</span>(str1);</span><br><span class="line">    pstring.<span class="built_in">push_back</span>(<span class="built_in">String</span>(<span class="string">&quot;world&quot;</span>));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C1-06(4)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h3 id="1-7-move移动语义和forward类型完美转发"><a href="#1-7-move移动语义和forward类型完美转发" class="headerlink" title="1.7 move移动语义和forward类型完美转发"></a>1.7 move移动语义和forward类型完美转发</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, <span class="type">const</span> T&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span>(p)<span class="built_in">T</span>(val);<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, T&amp;&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">new</span>(p)<span class="built_in">T</span>(std::<span class="built_in">move</span>(val));<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T&amp; val)</span><span class="comment">//向容器末尾添加元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">        <span class="built_in">expand</span>();</span><br><span class="line">   *_last++ = val;<span class="comment">//last指针指向的内存构造一个值为val的对象</span></span><br><span class="line">    _allocator.<span class="built_in">construct</span>(_last, val);</span><br><span class="line">    _last++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T&amp;&amp; val)</span><span class="comment">//向容器末尾添加元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">        <span class="built_in">expand</span>();</span><br><span class="line">    *_last++ = val;<span class="comment">//last指针指向的内存构造一个值为val的对象</span></span><br><span class="line">    _allocator.<span class="built_in">construct</span>(_last, std::<span class="built_in">move</span>(val));</span><br><span class="line">    _last++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注:**右值引用本身也是左值，当调用push_back时，底层也只会调用左值引用的构造函数，而不会调用右值引用的构造函数，所以需要使用move进行强转成右值引用。</p><p>**缺点:**代码量太多</p><p>**改进方法:**使用模板函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, <span class="type">const</span> T&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span>(p)<span class="built_in">T</span>(val);<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, T&amp;&amp; val)</span><span class="comment">//负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">new</span>(p)<span class="built_in">T</span>(std::<span class="built_in">move</span>(val));<span class="comment">//定位new</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Ty1&gt; <span class="comment">// 换个名会进行类型推演，直接用T直接断定是右值引用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(Ty1&amp;&amp; val)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">expand</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forward：类型的完美转发</span></span><br><span class="line">_allocator.<span class="built_in">construct</span>(_last, val);</span><br><span class="line">_last++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注:</strong>   函数模板的类型推演 + 引用折叠 String&amp;&amp; + &amp;&amp; &#x3D; String&amp;&amp; String&amp; + &amp;&amp; &#x3D; String&amp;  </p><p>**缺点:**底层也只会调用左值引用的构造函数</p><p><strong>改进方法</strong>:使用forward进行类型的完美转换,能够识别左值和右值类型</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template&lt;typename Ty2&gt;</span><br><span class="line">void construct(T* p, Ty2&amp;&amp; val)//负责对象构造</span><br><span class="line">&#123;</span><br><span class="line">    new (p) T(std::forward&lt;Ty2&gt;(val));//定位new</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Ty1&gt; // 换个名会进行类型推演，直接用T直接断定是右值引用</span><br><span class="line">void push_back(Ty1&amp;&amp; val) </span><br><span class="line">&#123;</span><br><span class="line">if (full())</span><br><span class="line">&#123;</span><br><span class="line">expand();</span><br><span class="line">&#125;</span><br><span class="line">// forward：类型的完美转发</span><br><span class="line">_allocator.construct(_last, std::forward&lt;Ty1&gt;(val));</span><br><span class="line">_last++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-体验一下智能指针的强大"><a href="#2-体验一下智能指针的强大" class="headerlink" title="2 体验一下智能指针的强大"></a>2 体验一下智能指针的强大</h2><h3 id="2-1-基础知识"><a href="#2-1-基础知识" class="headerlink" title="2.1 基础知识"></a>2.1 基础知识</h3><p>裸指针到底有什么不好，写过一些C++代码的人应该都能知道，比如下面的原因：</p><p>(1)忘记释放资源，导致资源泄露（常发生内存泄漏问题）</p><p>(2)同一资源释放多次，导致释放野指针，程序崩溃</p><p>(3)明明代码的后面写了释放资源的代码，但是由于程序逻辑满足条件，从中间return掉了，导致释放资源的代码未被执行到</p><p>(4)代码运行过程中发生异常，随着异常栈展开，导致释放资源的代码未被执行到</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPointer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SmartPointer</span>(T *point = <span class="literal">NULL</span>):<span class="built_in">pointer</span>(point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SmartPointer</span>(<span class="type">const</span> SmartPointer&lt;T&gt; &amp;point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">T &amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T * <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">SmartPointer</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T * pointer; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_num = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person &amp;person) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_num:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s</span><span class="params">(<span class="keyword">new</span> Person)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s1</span><span class="params">(s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>智能指针的优点:</strong></p><p>(1)智能指针体现在把裸指针进行了一次面向对象的封装，在构造函数中初始化资源地址，在析构函数中负责释放资源</p><p>(2)利用栈上的对象出作用域自动析构这个特点，在智能指针的析构函数中保证释放</p><p><strong>智能指针的缺点:</strong>                                                                                                                                                                                                         </p><p>(1)怎么解决智能指针的浅拷贝问题</p><p>(2)多个智能指针指向同一个资源的时候，怎么保证资源只释放一次，而不是每个智能指针都释放一次，造成代码运行不可预期的严重后果</p><p>**改进方法:**使用深拷贝或者带引用计数的智能指针和不带引用计数的智能指针</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPointer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SmartPointer</span>(T *point = <span class="literal">NULL</span>):<span class="built_in">pointer</span>(point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SmartPointer</span>(<span class="type">const</span> SmartPointer&lt;T&gt; &amp;point)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;pointer = <span class="keyword">new</span> <span class="built_in">T</span>(*point.pointer);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">T &amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T * <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">SmartPointer</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> pointer;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T * pointer; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_num = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person &amp;person) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_num:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s</span><span class="params">(<span class="keyword">new</span> Person)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s1</span><span class="params">(s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="2-2-不带引用计数的智能指针"><a href="#2-2-不带引用计数的智能指针" class="headerlink" title="2.2 不带引用计数的智能指针"></a>2.2 不带引用计数的智能指针</h3><h4 id="2-2-1-auto-ptr"><a href="#2-2-1-auto-ptr" class="headerlink" title="2.2.1 auto_ptr"></a>2.2.1 auto_ptr</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">s1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出错 </span></span><br><span class="line">*s1 = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>auto_ptr的缺点</strong>:</p><p>(1)auto_ptr没有使用引用计数，在复制构造函数和赋值构造函数中将对象所有权转移了。</p><p>(2)auto_ptr不能指向数组，因为auto_ptr在析构的时候只是调用delete,而数组应该要调用delete[]。</p><p>(3)auto_ptr不能和标准容器（vector,list,map…)一起使用。</p><p>**总结:**auto_ptr智能指针不带引用计数，那么它处理浅拷贝的问题，是直接把前面的auto_ptr都置为nullptr，只让最后一个auto_ptr持有资源。</p><h4 id="2-2-2-scoped-ptr"><a href="#2-2-2-scoped-ptr" class="headerlink" title="2.2.2 scoped_ptr"></a>2.2.2 scoped_ptr</h4><p>​从根本上杜绝了智能指针浅拷贝的发生，所以scoped_ptr也是不能用在容器当中的，如果容器互相进行拷贝或者赋值，就会引起scoped_ptr对象的拷贝构造和赋值，这是不允许的，代码会提示编译错误。</p><h4 id="2-2-3-unique-ptr"><a href="#2-2-3-unique-ptr" class="headerlink" title="2.2.3 unique_ptr"></a>2.2.3 unique_ptr</h4><p>​从上面看到，unique_ptr有一点和scoped_ptr做的一样，就是去掉了拷贝构造函数和operator&#x3D;赋值重载函数，禁止用户对unique_ptr进行显示的拷贝构造和赋值，防止智能指针浅拷贝问题的发生。但是unique_ptr提供了带右值引用参数的拷贝构造和赋值，也就是说，unique_ptr智能指针可以通过右值引用进行拷贝构造和赋值操作，或者在产生unique_ptr临时对象的地方，如把unique_ptr作为函数的返回值时，示例代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1</span></span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line">unique_ptr&lt;<span class="type">int</span>&gt; ptr2 = std::<span class="built_in">move</span>(ptr); <span class="comment">// 使用了右值引用的拷贝构造</span></span><br><span class="line">ptr2 = std::<span class="built_in">move</span>(ptr); <span class="comment">// 使用了右值引用的operator=赋值重载函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例2</span></span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">test_uniqueptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">ptr1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> ptr1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此处调用test_uniqueptr函数，首先调用右值引用的拷贝构造函数产生ptr1,在return ptr1代码</span></span><br><span class="line"><span class="comment">处，调用右值引用的拷贝构造生成在main函数栈上的临时对象，由ptr1拷贝构造ptr，完成后对局部对象进行析构</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">unique_ptr&lt;<span class="type">int</span>&gt; ptr = <span class="built_in">test_uniqueptr</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-带引用计数的智能指针"><a href="#2-3-带引用计数的智能指针" class="headerlink" title="2.3 带引用计数的智能指针"></a>2.3 带引用计数的智能指针</h3><h4 id="2-3-1-自己构造带引用计数的智能指针"><a href="#2-3-1-自己构造带引用计数的智能指针" class="headerlink" title="2.3.1 自己构造带引用计数的智能指针"></a>2.3.1 自己构造带引用计数的智能指针</h4><p>​当允许多个智能指针指向同一个资源的时候，每一个智能指针都会给资源的引用计数加1，当一个智能指针析构时，同样会使资源的引用计数减1，这样最后一个智能指针把资源的引用计数从1减到0时，就说明该资源可以释放了，由最后一个智能指针的析构函数来处理资源的释放问题，这就是引用计数的概念。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Refcnt</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Refcnt</span>(T *ptr = <span class="literal">NULL</span>):<span class="built_in">mptr</span>(ptr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mptr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt;  <span class="string">&quot;Refcnt的有参构造函数&quot;</span> &lt;&lt; endl; </span><br><span class="line">m_count = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addcnt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">delcnt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> --m_count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T *mptr;</span><br><span class="line"><span class="type">int</span> m_count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPointer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">SmartPointer</span>(T *point = <span class="literal">NULL</span>):<span class="built_in">pointer</span>(point)</span><br><span class="line">&#123;</span><br><span class="line">myRefcnt = <span class="keyword">new</span> <span class="built_in">Refcnt</span>&lt;T&gt;(pointer); </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SmartPointer</span>(<span class="type">const</span> SmartPointer&lt;T&gt; &amp;point)</span><br><span class="line">&#123;</span><br><span class="line">pointer = point.pointer;</span><br><span class="line">myRefcnt = point.myRefcnt;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span>(pointer != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">myRefcnt-&gt;<span class="built_in">addcnt</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SmartPointer&lt;T&gt; &amp; <span class="keyword">operator</span>=(<span class="type">const</span> SmartPointer&lt;T&gt; &amp;point)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> == &amp;point)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(myRefcnt-&gt;<span class="built_in">delcnt</span>() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> pointer;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;pointer = point.pointer;</span><br><span class="line"><span class="keyword">this</span>-&gt;myRefcnt = point.myRefcnt;</span><br><span class="line"><span class="keyword">this</span>-&gt;myRefcnt-&gt;<span class="built_in">addcnt</span>();</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">T &amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T * <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">SmartPointer</span>()</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>-&gt;myRefcnt-&gt;<span class="built_in">delcnt</span>() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPointer的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> pointer;</span><br><span class="line">pointer = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T * pointer;</span><br><span class="line">Refcnt&lt;T&gt; * myRefcnt; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_num = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person &amp;person) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_num:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s</span><span class="params">(<span class="keyword">new</span> Person(<span class="number">2</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SmartPointer&lt;Person&gt; <span class="title">s1</span><span class="params">(s)</span></span>;</span><br><span class="line"></span><br><span class="line">SmartPointer&lt;Person&gt; s2;</span><br><span class="line"></span><br><span class="line">s2 = s1;</span><br><span class="line"></span><br><span class="line">*s = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">(*s2).<span class="built_in">showPerson</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="2-4-shared-ptr的交叉引用问题"><a href="#2-4-shared-ptr的交叉引用问题" class="headerlink" title="2.4 shared_ptr的交叉引用问题"></a>2.4 shared_ptr的交叉引用问题</h3><p>​对于整数的++或者- -操作，它并不是线程安全的操作，因此shared_ptr和weak_ptr底层的引用计数已经通过CAS操作，保证了引用计数加减的原子特性，因此shared_ptr和weak_ptr本身就是线程安全的带引用计数的智能指针。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shared_ptr&lt;B&gt; ptrB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shared_ptr&lt;A&gt; ptrA;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">ptra</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;B&gt; <span class="title">ptrb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line"></span><br><span class="line">ptra-&gt;ptrB = ptrb;</span><br><span class="line">ptrb-&gt;ptrA = ptra;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ptra.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line">cout &lt;&lt; ptrb.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-04(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-04(1).png" alt="本地png图片PictureTest.png"></p><p>​ptra指向A对象，A的引用计数为1，ptrb指向B对象，B的引用计数为1。当A对象的成员变量ptrB也指向B对象，B的引用计数为2，当B对象的成员变量ptrA也指向A对象，A的引用计数为2。出main函数作用域，ptra和ptrb两个局部对象析构，分别给A对象和B对象的引用计数从2减到1，达不到释放A和B的条件（释放的条件是A和B的引用计数为0），因此造成两个new出来的A和B对象无法释放，导致内存泄露，这个问题就是“强智能指针的交叉引用(循环引用)问题”。</p><p>**改进方法:**定义对象时，用强智能指针shared_ptr，在其它地方引用对象时，使用弱智能指针weak_ptr。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;B&gt; ptrB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;A&gt; ptrA;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">ptra</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;B&gt; <span class="title">ptrb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line"></span><br><span class="line">ptra-&gt;ptrB = ptrb;</span><br><span class="line">ptrb-&gt;ptrA = ptra;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ptra.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line">cout &lt;&lt; ptrb.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-04(2)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p><strong>弱智能指针weak_ptr区别于shared_ptr之处在于：</strong></p><p>(1)weak_ptr不会改变资源的引用计数，只是一个观察者的角色，通过观察shared_ptr来判定资源是否存在</p><p>(2)weak_ptr持有的引用计数，不是资源的引用计数，而是同一个资源的观察者的计数</p><p>(3)weak_ptr没有提供常用的指针操作，无法直接访问资源，需要先通过lock方法提升为shared_ptr强智能指针，才能访问资源</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是个好方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;B&gt; ptrB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ptrA-&gt;<span class="built_in">testA</span>();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;A&gt; ptrA;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">ptra</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;B&gt; <span class="title">ptrb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line"></span><br><span class="line">ptra-&gt;ptrB = ptrb;</span><br><span class="line">ptrb-&gt;ptrA = ptra;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ptra.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line">cout &lt;&lt; ptrb.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">ptrb-&gt;<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-04(3)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>**缺点:**调用不了A对象中的testA</p><p>**改进方法:**需要将弱指针升级为强指针</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是个好方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;B&gt; ptrB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">shared_ptr&lt;A&gt; ps = ptrA.<span class="built_in">lock</span>();</span><br><span class="line"><span class="keyword">if</span>(ps != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;<span class="built_in">testA</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;A&gt; ptrA;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">ptra</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;B&gt; <span class="title">ptrb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line"></span><br><span class="line">ptra-&gt;ptrB = ptrb;</span><br><span class="line">ptrb-&gt;ptrA = ptra;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ptra.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line">cout &lt;&lt; ptrb.<span class="built_in">use_count</span>() &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">ptrb-&gt;<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-04(4)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h3 id="2-5-多线程访问共享对象的线程安全问题"><a href="#2-5-多线程访问共享对象的线程安全问题" class="headerlink" title="2.5 多线程访问共享对象的线程安全问题"></a>2.5 多线程访问共享对象的线程安全问题</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是个好方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子线程 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handler01</span><span class="params">(A *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q-&gt;<span class="built_in">testA</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A *p = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(handler01,p)</span></span>;</span><br><span class="line"></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line">t1.<span class="built_in">join</span>(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-05(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>**注:**主线程等待两秒后，子线程就会调用A中的testA函数</p><p>如果是子线程等待两秒后，主线程已经将对象析构了，子线程在调用已经析构的对象，将会出现问题，改进就是子线程询问一下对象是否存活，使用强弱指针来实现解决共享对象的线程安全问题。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是个好方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子线程 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handler01</span><span class="params">(weak_ptr&lt;A&gt; pw)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">shared_ptr&lt;A&gt; sp = pw.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sp != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">sp-&gt;<span class="built_in">testA</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A对象已经析构了&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">p</span> <span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(handler01,weak_ptr&lt;A&gt;(p))</span></span>;</span><br><span class="line"></span><br><span class="line">t1.<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<img src="E:/蔡伟/14-笔记/图片/2-05(2)程序结果.png" alt="本地png图片PictureTest.png"></p><h3 id="2-6-自定义删除器"><a href="#2-6-自定义删除器" class="headerlink" title="2.6 自定义删除器"></a>2.6 自定义删除器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">#include &lt;memory&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">class Mydector</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void operator()(T *ptr) const</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;call Mydector&quot; &lt;&lt; endl;</span><br><span class="line">delete [] ptr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">class Myfiledector</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void operator()(T *ptr) const</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;call Myfiledector&quot; &lt;&lt; endl;</span><br><span class="line">fclose(ptr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;int,Mydector&lt;int&gt;&gt; p(new int[100]);</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;FILE,Myfiledector&lt;FILE&gt;&gt; p1(fopen(&quot;C:/Users/caiwei/Desktop/data.txt&quot;,&quot;w&quot;));</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-06(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>**缺点:**调用不同的指针，也要写出想应得删除器，如果种类过多，难以取名。</p><p>**改进方法:**利用lambda表达式和函数对象</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;<span class="type">int</span>,function&lt;<span class="type">void</span>(<span class="type">int</span> *)&gt;&gt; <span class="built_in">p</span>(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">100</span>],</span><br><span class="line">[](<span class="type">int</span> *p)-&gt;<span class="type">void</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call Mydector&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> [] p;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;FILE,function&lt;<span class="type">void</span>(FILE*)&gt;&gt; <span class="built_in">p1</span>(<span class="built_in">fopen</span>(<span class="string">&quot;C:/Users/caiwei/Desktop/data.txt&quot;</span>,<span class="string">&quot;w&quot;</span>),</span><br><span class="line">[](FILE *p)-&gt;<span class="type">void</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call Myfiledector&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">fclose</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C2-06(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h2 id="3-C-11中引入的bind绑定器和function函数对象"><a href="#3-C-11中引入的bind绑定器和function函数对象" class="headerlink" title="3 C++11中引入的bind绑定器和function函数对象"></a>3 C++11中引入的bind绑定器和function函数对象</h2><h3 id="3-1-bind1st和bind2nd什么时候会用到"><a href="#3-1-bind1st和bind2nd什么时候会用到" class="headerlink" title="3.1 bind1st和bind2nd什么时候会用到"></a>3.1 bind1st和bind2nd什么时候会用到</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printvector</span><span class="params">(Container &amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">typename</span> Container::iterator it = con.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;it != con.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt;= <span class="number">10</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">p.<span class="built_in">push_back</span>(<span class="built_in">rand</span>()%<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printvector</span>(p);</span><br><span class="line"><span class="built_in">sort</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printvector</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="built_in">printvector</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C3-01(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p>一般greater，less底层都是二元对象，要是想使用一元对象，就需要使用绑定器。绑定器有两种，一个是band1st，另一个是bind2nd。</p><p>bind1st：operator()的第一个形参变量绑定成一个确定的值</p><p>bind2nd：operator()的第二个形参变量绑定成一个确定的值</p><p>例如:bind1st:+greater bool operator()(70,const_Ty&amp;_Right) bind2nd:+less bool operator()(const_Ty &amp;_Left,70)</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printvector</span><span class="params">(Container &amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">typename</span> Container::iterator it = con.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;it != con.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt;= <span class="number">10</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">p.<span class="built_in">push_back</span>(<span class="built_in">rand</span>()%<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printvector</span>(p);</span><br><span class="line"><span class="built_in">sort</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printvector</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="built_in">printvector</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector&lt;int&gt;::iterator it = find_if(p.begin(),p.end(),bind1st(greater&lt;int&gt;(),70));</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">find_if</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),<span class="built_in">bind2nd</span>(<span class="built_in">less</span>&lt;<span class="type">int</span>&gt;(),<span class="number">70</span>));</span><br><span class="line"><span class="keyword">if</span>( it != p.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">p.<span class="built_in">insert</span>(it,<span class="number">70</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printvector</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C3-01(2)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h3 id="3-2-bind1st和bind2nd的底层原理实现"><a href="#3-2-bind1st和bind2nd的底层原理实现" class="headerlink" title="3.2 bind1st和bind2nd的底层原理实现"></a>3.2 bind1st和bind2nd的底层原理实现</h3><p>​绑定器本身是一个函数对象</p><h3 id="3-3-模板的完全特例化和非完全特例化"><a href="#3-3-模板的完全特例化和非完全特例化" class="headerlink" title="3.3 模板的完全特例化和非完全特例化"></a>3.3 模板的完全特例化和非完全特例化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Vector</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call Vector template init&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对char*类型提供完全特例化版本 </span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>&lt;<span class="type">char</span> *&gt; </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Vector</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call Vector&lt;char *&gt; template init&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对指针类型提供的部分特例化版本 </span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>&lt;T *&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Vector</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call Vector&lt;T *&gt; template init&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对函数指针(有返回值，有两个形参变量)提供的部分特例化 </span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> a1,<span class="keyword">typename</span> a2&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>&lt;<span class="built_in">T</span> (*)(a1,a2)&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Vector</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call Vector&lt;T (*)(a1,a2)&gt; template init&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> a1,<span class="keyword">typename</span> a2&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>&lt;<span class="built_in">T</span> (a1,a2)&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Vector</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call Vector&lt;T (a1,a2)&gt; template init&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Vector&lt;<span class="type">int</span>&gt; vec1;</span><br><span class="line">Vector&lt;<span class="type">char</span>*&gt; vec2;</span><br><span class="line">Vector&lt;<span class="type">int</span>*&gt; vec3;</span><br><span class="line">Vector&lt;<span class="built_in">int</span>(*)(<span class="type">int</span> ,<span class="type">int</span> )&gt; vec4;</span><br><span class="line">Vector&lt;<span class="built_in">int</span> (<span class="type">int</span> ,<span class="type">int</span> )&gt; vec5;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*Pfunc1)</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br><span class="line">Pfunc1 pfunc1 = sum;</span><br><span class="line">cout &lt;&lt; <span class="built_in">pfunc1</span>(<span class="number">10</span>,<span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="type">int</span> <span class="title">Pfunc2</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br><span class="line">Pfunc2 *pfunc2 = sum;</span><br><span class="line">cout &lt;&lt; <span class="built_in">pfunc2</span>(<span class="number">10</span>,<span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注:**有完全特例化优先匹配完全特例化，有部分特例化就匹配部分特例化，没有的话就从原模版自己实例化</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C3-03(1)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><p><strong>函数类型推演</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(T a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> A1,<span class="keyword">typename</span> A2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(T(*)(A1,A2))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A2).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> R,<span class="keyword">typename</span> A1,<span class="keyword">typename</span> A2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func3</span><span class="params">(T(R::*a)(A1,A2))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(R).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A2).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//func(10); // int</span></span><br><span class="line"><span class="comment">//func(&quot;aaa&quot;); // const char *</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>(sum);  <span class="comment">//func T 不加* int(__cdecl*)(int,int) </span></span><br><span class="line"><span class="comment">//func T 加*  int(__cdecl)(int,int) </span></span><br><span class="line"><span class="built_in">func2</span>(sum);</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>(&amp;Test::sum2);</span><br><span class="line"><span class="built_in">func3</span>(&amp;Test::sum2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C3-03(2)%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="本地png图片PictureTest.png"></p><h3 id="3-4-function函数对象类型的应用示例"><a href="#3-4-function函数对象类型的应用示例" class="headerlink" title="3.4 function函数对象类型的应用示例"></a>3.4 function函数对象类型的应用示例</h3><p>绑定器，函数对象，lambda表达式本质上都是函数对象，只能使用在一条语句中，但是如果想要在多条语句中使用，就需要function</p><p><strong>使用function函数需要注意：</strong></p><p>(1)用函数类型实例化function；</p><p>(2)通过function调用operator()函数的时候，需要根据函数类型传入相应的参数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; hello world &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello1</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">function&lt;<span class="type">void</span>()&gt; func = hello;</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">void</span>(string)&gt; func1 = hello1;</span><br><span class="line"><span class="built_in">func1</span>(<span class="string">&quot;hello kevin durant!!&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span> , <span class="type">int</span> )&gt; func2 = sum;</span><br><span class="line">cout &lt;&lt; <span class="built_in">func2</span>(<span class="number">10</span>,<span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span> , <span class="type">int</span> )&gt; func3 = [](<span class="type">int</span> a,<span class="type">int</span> b)-&gt;<span class="type">int</span>&#123;<span class="keyword">return</span> a + b;&#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">func3</span>(<span class="number">10</span>,<span class="number">30</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>function不仅可以留下普通全局函数的类型，对于类的成员方法也可以进行类型保留</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">function&lt;<span class="type">int</span>(Test *,<span class="type">int</span>,<span class="type">int</span>)&gt; func = &amp;Test::sum1;</span><br><span class="line">Test t;</span><br><span class="line">cout &lt;&lt; <span class="built_in">func</span>(&amp;t,<span class="number">10</span>,<span class="number">40</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>function的特点：可以把所有函数、绑定器、函数对象和lambda<a href="https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1001.2101.3001.7020">表达式</a>的类型保留起来，在其他地方都可以使用。否则绑定器、lambda表达式就只能使用在语句中</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查看所有书籍信息&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">borrow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;借书&quot;</span> &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;还书&quot;</span> &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查询书籍&quot;</span> &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loginout</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;注销&quot;</span> &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showmenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1.查看所有书籍信息&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2.借书&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3.还书&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4.查询书籍&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;5.注销&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择：&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>,function&lt;<span class="type">void</span>()&gt;&gt; map1;</span><br><span class="line"></span><br><span class="line">map1.<span class="built_in">insert</span>(&#123;<span class="number">1</span>,show&#125;);</span><br><span class="line">map1.<span class="built_in">insert</span>(&#123;<span class="number">2</span>,borrow&#125;);</span><br><span class="line">map1.<span class="built_in">insert</span>(&#123;<span class="number">3</span>,back&#125;);</span><br><span class="line">map1.<span class="built_in">insert</span>(&#123;<span class="number">4</span>,query&#125;);</span><br><span class="line">map1.<span class="built_in">insert</span>(&#123;<span class="number">5</span>,loginout&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">showmenu</span>();</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it = map1.<span class="built_in">find</span>(choice);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(it == map1.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">it-&gt;<span class="built_in">second</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-function的实现原理"><a href="#3-5-function的实现原理" class="headerlink" title="3.5 function的实现原理"></a>3.5 function的实现原理</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">(string str)</span> </span>&#123; cout &lt;&lt; str &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Fty&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myfunction</span>&#123;&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">template&lt;typename R,typename A1&gt;</span></span><br><span class="line"><span class="comment">class myfunction&lt;R(A1)&gt;</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">//typedef R(*PFUNC)(A1);</span></span><br><span class="line"><span class="comment">using PFUNC = R(*)(A1);</span></span><br><span class="line"><span class="comment">myfunction(PFUNC pfunc):_pfunc(pfunc)&#123;&#125;</span></span><br><span class="line"><span class="comment">R operator()(A1 arg)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">return _pfunc(arg);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">private:</span></span><br><span class="line"><span class="comment">PFUNC _pfunc;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">template&lt;typename R, typename A1,typename A2&gt;</span></span><br><span class="line"><span class="comment">class myfunction&lt;R(A1,A2)&gt;</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">//typedef R(*PFUNC)(A1);</span></span><br><span class="line"><span class="comment">using PFUNC = R(*)(A1,A2);</span></span><br><span class="line"><span class="comment">myfunction(PFUNC pfunc) :_pfunc(pfunc) &#123;&#125;</span></span><br><span class="line"><span class="comment">R operator()(A1 arg1,A2 arg2)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">return _pfunc(arg1,arg2);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">private:</span></span><br><span class="line"><span class="comment">PFUNC _pfunc;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//...表示可变参，A表示的是一组1类型，个数任意</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... A&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myfunction</span>&lt;<span class="built_in">R</span>(A...)&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> PFUNC = <span class="built_in">R</span>(*)(A...);</span><br><span class="line"><span class="built_in">myfunction</span>(PFUNC pfunc) :_pfunc(pfunc) &#123;&#125;</span><br><span class="line"><span class="function">R <span class="title">operator</span><span class="params">()</span><span class="params">(A... arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _pfunc(arg...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">PFUNC _pfunc;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">myfunction&lt;<span class="title">void</span><span class="params">(string)</span>&gt; <span class="title">func1</span><span class="params">(hello)</span></span>;</span><br><span class="line"><span class="built_in">func1</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="function">myfunction&lt;<span class="title">int</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>&gt; <span class="title">func2</span><span class="params">(sum)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">func2</span>(<span class="number">10</span>, <span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-bind和function实现线程池"><a href="#3-6-bind和function实现线程池" class="headerlink" title="3.6 bind和function实现线程池"></a>3.6 bind和function实现线程池</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> placeholders;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//绑定器本身就是一种函数对象，返回的也是函数对象</span></span><br><span class="line"><span class="comment">//会自动进行函数类型推演 </span></span><br><span class="line"><span class="built_in">bind</span>(hello,<span class="string">&quot;hello world!&quot;</span>)();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">bind</span>(sum,<span class="number">10</span>,<span class="number">20</span>)() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">bind</span>(&amp;Test::sum1,<span class="built_in">Test</span>(),<span class="number">30</span>,<span class="number">20</span>)() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//function只接受一个类型,绑定器可以给相应的函数绑定固定的参数，绑定器只能使用在语句当中</span></span><br><span class="line"><span class="comment">//参数占位符,绑定器出了语句，无法继续使用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span>(hello,_1)(<span class="string">&quot;hello kevin durant!&quot;</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">bind</span>(sum,_1,_2)(<span class="number">100</span>,<span class="number">200</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">bind</span>(&amp;Test::sum1,_1,_2,_3)(<span class="built_in">Test</span>(),<span class="number">30</span>,<span class="number">30</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">void</span>(string)&gt; func1 = <span class="built_in">bind</span>(hello,_1);</span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span>,<span class="type">int</span>)&gt; func2 = <span class="built_in">bind</span>(sum,_1,_2);</span><br><span class="line">function&lt;<span class="type">int</span>(Test,<span class="type">int</span>,<span class="type">int</span>)&gt; func3 = <span class="built_in">bind</span>(&amp;Test::sum1,_1,_2,_3);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">func1</span>(<span class="string">&quot;hello xiaxi&quot;</span>);</span><br><span class="line"><span class="built_in">func1</span>(<span class="string">&quot;hello caiwei&quot;</span>);</span><br><span class="line"><span class="built_in">func1</span>(<span class="string">&quot;hello zouzeyu&quot;</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">func2</span>(<span class="number">10</span>,<span class="number">40</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">func3</span>(<span class="built_in">Test</span>(),<span class="number">10</span>,<span class="number">50</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> placeholders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Thread</span>(function&lt;<span class="built_in">void</span>(<span class="type">int</span>)&gt; func,<span class="type">int</span> no):_func(func),_no(no)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">thread <span class="title">t</span><span class="params">(_func,_no)</span></span>;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; _func;</span><br><span class="line"><span class="type">int</span> _no;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ThreadPool</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">ThreadPool</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; _pool.<span class="built_in">size</span>() ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _pool[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">startpool</span><span class="params">(<span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">//不管是C++里面的thread还是Linux里面的pthread需要的线程函数都是一个C函数，是不能够使用成员方法的，因为它是C的函数类型，不可能把成员方法的函数指针给一个C的函数指针，接收不了。所以就需要绑定，把runInThread所依赖的参数全部绑定</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">_pool.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Thread</span>(<span class="built_in">bind</span>(&amp;ThreadPool::ruinthread,<span class="keyword">this</span>,_1),i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">_handler.<span class="built_in">push_back</span>(_pool[i]-&gt;<span class="built_in">start</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(thread &amp;t: _handler)</span><br><span class="line">&#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">vector&lt;Thread *&gt; _pool;</span><br><span class="line">vector&lt;thread&gt; _handler;</span><br><span class="line">    <span class="comment">//把runInThread这个成员方法充当线程函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ruinthread</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call ruinthread id:&quot;</span> &lt;&lt; id &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ThreadPool threadpool;</span><br><span class="line"></span><br><span class="line">threadpool.<span class="built_in">startpool</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="3-7-lambda表达式的实现原理"><a href="#3-7-lambda表达式的实现原理" class="headerlink" title="3.7 lambda表达式的实现原理"></a>3.7 lambda表达式的实现原理</h3><p>函数对象的应用：使用在泛型算法参数传递、比较性质、自定义操作、优先级队列和智能指针</p><p>函数对象的缺点：需要先定义一个函数对象类型，但是类型定义完后可能只是用在了定义的地方，后面可能不会再用了，没有必要为了需要一个函数对象定义一个类型，这个类型就永远在代码当中。</p><p>C++11函数对象的升级版 &#x3D;&gt; lambda表达式是一个函数对象</p><p>lambda表达式：底层依赖函数对象的机制实现的。</p><p>lambda表达式语法：<a href="%E5%BD%A2%E5%8F%82%E5%88%97%E8%A1%A8">捕获外部变量</a> -&gt;返回值{操作代码};</p><p>如果lambda表达式的返回值不需要，那么“-&gt;返回值”可以省略</p><p>[捕获外部变量]</p><p>[ ]：表示不捕获任何外部变量<br>[&#x3D;]：以传值的方式捕获外部的所有变量<br>[&amp;]：以传引用的方式捕获外部的所有变量<br>[this]：捕获外部的this指针<br>[&#x3D;,&amp;a]：以传值的方式捕获外部的所有变量，但是a变量以传引用的方式捕获<br>[a,b]：以传值的方式捕获外部变量a和b<br>[a,&amp;b]：a以值传递捕获，b以传引用的方式捕获</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="type">void</span>&gt;</span><br><span class="line"><span class="keyword">class</span> TestLambda01</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TestLambda01</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T <span class="built_in">operator</span>()()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> TestLambda02</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TestLambda02</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T <span class="built_in">operator</span>()(T a,T b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> TestLambda03</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TestLambda03</span>(T a,T b):<span class="built_in">m_a</span>(a),<span class="built_in">m_b</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="built_in">operator</span>()() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">T temp = m_a;</span><br><span class="line">m_a = m_b;</span><br><span class="line">m_b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">mutable</span> T m_a;</span><br><span class="line"><span class="keyword">mutable</span> T m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> TestLambda04</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TestLambda04</span>(T &amp;a,T &amp;b):<span class="built_in">m_a</span>(a),<span class="built_in">m_b</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="built_in">operator</span>()() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">T temp = m_a;</span><br><span class="line">m_a = m_b;</span><br><span class="line">m_b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T &amp;m_a;</span><br><span class="line">T &amp;m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> func1 = []()-&gt;<span class="type">void</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> func2 = [](<span class="type">int</span> a,<span class="type">int</span> b)-&gt;<span class="type">int</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">auto</span> func3 = [=]() <span class="keyword">mutable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> func4 = [&amp;]() </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func1</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">func2</span>(<span class="number">10</span>,<span class="number">30</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func3</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func4</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">TestLambda01&lt;&gt; t1;</span><br><span class="line"><span class="built_in">t1</span>();</span><br><span class="line"></span><br><span class="line">TestLambda02&lt;&gt; t2;</span><br><span class="line">cout &lt;&lt; <span class="built_in">t2</span>(<span class="number">10</span>,<span class="number">30</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">TestLambda03&lt;&gt; <span class="built_in">t3</span>(a,b);</span><br><span class="line"><span class="built_in">t3</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">TestLambda04&lt;&gt; <span class="built_in">t4</span>(a,b);</span><br><span class="line"><span class="built_in">t4</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="3-8-lambda表达式的应用实践"><a href="#3-8-lambda表达式的应用实践" class="headerlink" title="3.8  lambda表达式的应用实践"></a>3.8  lambda表达式的应用实践</h3><h4 id="3-8-1-应用于泛型算法"><a href="#3-8-1-应用于泛型算法" class="headerlink" title="3.8.1 应用于泛型算法"></a>3.8.1 应用于泛型算法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() %<span class="number">100</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),[](<span class="type">int</span> a,<span class="type">int</span> b)</span><br><span class="line">-&gt;<span class="type">bool</span>&#123;<span class="keyword">return</span> a &gt; b;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;it != vec.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">it = <span class="built_in">find_if</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),[](<span class="type">int</span> a)</span><br><span class="line">-&gt;<span class="type">bool</span>&#123;<span class="keyword">return</span> a &lt; <span class="number">65</span>;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(it != vec.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">insert</span>(it,<span class="number">65</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(it = vec.<span class="built_in">begin</span>();it != vec.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">for_each(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),[](<span class="type">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a %<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>既然lambda表达式只能使用在语句中，如果想跨语句使用之前定义好的lambda表达式，采用function类型来表示函数对象的类型。</p><h4 id="3-8-2-应用于哈希表"><a href="#3-8-2-应用于哈希表" class="headerlink" title="3.8.2 应用于哈希表"></a>3.8.2 应用于哈希表</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>,function&lt;<span class="type">int</span>(<span class="type">int</span>,<span class="type">int</span>)&gt;&gt; map1;</span><br><span class="line"><span class="comment">//auto只能出现在根据右边表达式推导左边的类型，只能使用在函数的局部作用域的范围之内</span></span><br><span class="line"><span class="comment">//预先lambda表达式不知道需要先存储lambda表达式类型</span></span><br><span class="line">map1[<span class="number">1</span>] = [](<span class="type">int</span> a,<span class="type">int</span> b)-&gt;<span class="type">int</span>&#123;<span class="keyword">return</span> a + b;&#125;;</span><br><span class="line">map1[<span class="number">2</span>] = [](<span class="type">int</span> a,<span class="type">int</span> b)-&gt;<span class="type">int</span>&#123;<span class="keyword">return</span> a - b;&#125;;</span><br><span class="line">map1[<span class="number">3</span>] = [](<span class="type">int</span> a,<span class="type">int</span> b)-&gt;<span class="type">int</span>&#123;<span class="keyword">return</span> a * b;&#125;;</span><br><span class="line">map1[<span class="number">4</span>] = [](<span class="type">int</span> a,<span class="type">int</span> b)-&gt;<span class="type">int</span>&#123;<span class="keyword">return</span> a / b;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入选择:&quot;</span>; </span><br><span class="line">cin &gt;&gt; choice;</span><br><span class="line">cout &lt;&lt; map1[choice](<span class="number">10</span>,<span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="3-8-3-智能指针自定义删除器"><a href="#3-8-3-智能指针自定义删除器" class="headerlink" title="3.8.3 智能指针自定义删除器"></a>3.8.3 智能指针自定义删除器</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">unique_ptr&lt;FILE ,function&lt;<span class="type">void</span>(FILE *)&gt;&gt; <span class="built_in">str</span>(<span class="built_in">fopen</span>(<span class="string">&quot;C:/Users/caiwei/Desktop/a.txt&quot;</span>,<span class="string">&quot;w&quot;</span>),[](FILE *PF)-&gt;\</span><br><span class="line"><span class="type">void</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fclose</span>(PF);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is call myfiledelete&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="3-8-4-传入函数对象使得容器元素按照指定方式排列"><a href="#3-8-4-传入函数对象使得容器元素按照指定方式排列" class="headerlink" title="3.8.4 传入函数对象使得容器元素按照指定方式排列"></a>3.8.4 传入函数对象使得容器元素按照指定方式排列</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Data</span>(<span class="type">int</span> a,<span class="type">int</span> b):<span class="built_in">m_a</span>(a),<span class="built_in">m_b</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Data</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line"><span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> FUNC = function&lt;<span class="built_in">bool</span>(Data &amp;,Data &amp;)&gt;;</span><br><span class="line">priority_queue&lt;Data,vector&lt;Data&gt;,FUNC&gt; <span class="built_in">maxHeap</span>([](Data &amp;d1,Data &amp;d2)-&gt;<span class="type">bool</span>\</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> d1.m_b &gt; d2.m_b;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">maxHeap.<span class="built_in">push</span>(<span class="built_in">Data</span>(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">maxHeap.<span class="built_in">push</span>(<span class="built_in">Data</span>(<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line">maxHeap.<span class="built_in">push</span>(<span class="built_in">Data</span>(<span class="number">30</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="4-C-11知识点汇总"><a href="#4-C-11知识点汇总" class="headerlink" title="4 C++11知识点汇总"></a>4 C++11知识点汇总</h2><h3 id="4-1-C-11常用知识点整理总结"><a href="#4-1-C-11常用知识点整理总结" class="headerlink" title="4.1 C++11常用知识点整理总结"></a>4.1 C++11常用知识点整理总结</h3><h4 id="4-1-1-关键字和语法"><a href="#4-1-1-关键字和语法" class="headerlink" title="4.1.1 关键字和语法"></a>4.1.1 关键字和语法</h4><ul><li>auto：可以根据右值，推导右值的类型，然后左边变量的类型也就知道了</li><li>nullptr：给指针专用（能够和整数进行区别）</li><li>foreach：可以遍历数组，容器等</li><li>右值引用：move移动语义函数和forward类型完美转发</li><li>模板的一个新特性：typename… A 表示可变参（类型参数）</li></ul><h4 id="4-1-2-绑定器和函数对象"><a href="#4-1-2-绑定器和函数对象" class="headerlink" title="4.1.2 绑定器和函数对象"></a>4.1.2 绑定器和函数对象</h4><ul><li>function：函数对象</li><li>bind：绑定器</li><li>lambda表达式</li></ul><h4 id="4-1-3-智能指针"><a href="#4-1-3-智能指针" class="headerlink" title="4.1.3 智能指针"></a>4.1.3 智能指针</h4><p>智能指针可以自动管理资源，以防止代码不可预期的执行导致资源泄露、资源未释放。</p><h4 id="4-1-4-容器"><a href="#4-1-4-容器" class="headerlink" title="4.1.4 容器"></a>4.1.4 容器</h4><p>unordered_set和unordered_map：哈希表</p><p>array：数组，无法进行扩容</p><p>forward_list：前向链表</p><h4 id="4-1-5-跨平台"><a href="#4-1-5-跨平台" class="headerlink" title="4.1.5 跨平台"></a>4.1.5 跨平台</h4><ol><li>C++语言级别支持多线程编程，代码可以跨平台，增强了可移植性</li></ol><h3 id="4-2-通过thread类编写C-多线程程序"><a href="#4-2-通过thread类编写C-多线程程序" class="headerlink" title="4.2 通过thread类编写C++多线程程序"></a>4.2 通过thread类编写C++多线程程序</h3><h4 id="4-2-1-怎么创建启动一个线程"><a href="#4-2-1-怎么创建启动一个线程" class="headerlink" title="4.2.1 怎么创建启动一个线程"></a>4.2.1 怎么创建启动一个线程</h4><p>​std::thread定义一个线程对象，传入线程所需要的线程函数和参数，线程自动开启</p><h4 id="4-2-2-子线程如何结束"><a href="#4-2-2-子线程如何结束" class="headerlink" title="4.2.2  子线程如何结束"></a>4.2.2  子线程如何结束</h4><p>​子线程函数运行完成，线程就结束了</p><h4 id="4-2-3-主线程如何处理子线程"><a href="#4-2-3-主线程如何处理子线程" class="headerlink" title="4.2.3 主线程如何处理子线程"></a>4.2.3 主线程如何处理子线程</h4><p>​**t.join():**等待t线程结束，当前线程继续往下运行</p><p>​**t.detach():**把t线程设置为分离线程，主线程结束，整个进程结束，所以子线程自动结束</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">threadhandler</span><span class="params">(<span class="type">int</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//让子线程睡眠2秒</span></span><br><span class="line"><span class="comment">//chrono:名词空间，定义了一些和时间有关的常量</span></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(time));</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hello threadhandler!!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建了一个线程对象，传入一个线程函数，新线程就开始运行了</span></span><br><span class="line"><span class="function">std::thread <span class="title">t1</span><span class="params">(threadhandler,<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="comment">//主线程等待子线程结束，主线程继续往下运行</span></span><br><span class="line"><span class="comment">//t1.join();</span></span><br><span class="line"><span class="comment">//把子线程设置为分离线程</span></span><br><span class="line"><span class="comment">//t1.detach();</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;main thread done&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//主线程运行完成，查看如果当前进程还有未运行完成的子进程，进程就会异常终止</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="4-3-线程间互斥-mutex互斥锁和lock-guard"><a href="#4-3-线程间互斥-mutex互斥锁和lock-guard" class="headerlink" title="4.3 线程间互斥-mutex互斥锁和lock_guard"></a>4.3 线程间互斥-mutex互斥锁和lock_guard</h3><p><strong>竞态条件</strong>：多线程程序执行的结果是一致的，不会随着CPU对线程不同的调用顺序，而产生不同运行结果</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++ thread模拟车站三个窗口卖票的程序</span></span><br><span class="line"><span class="type">int</span> ticketCount = <span class="number">100</span>;<span class="comment">//车站有100张车票，由三个窗口一起卖票</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selltraket</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (ticketcount &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;号窗卖出&quot;</span> &lt;&lt; ticketcount &lt;&lt; <span class="string">&quot;张票&quot;</span> &lt;&lt; endl;</span><br><span class="line">ticketcount--;</span><br><span class="line"></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">list&lt;std::thread&gt; tlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">tlist.<span class="built_in">push_back</span>(std::<span class="built_in">thread</span>(selltraket,i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (std::thread&amp; t : tlist)</span><br><span class="line">&#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所有窗口卖票结束&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码，启动三个线程模拟三个窗口同时卖票，总票数是100张，由于整数的<code>--</code>操作不是线程安全的操作</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">std::mutex mtx;<span class="comment">//全局的一把互斥锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//C++ thread模拟车站三个窗口卖票的程序</span></span><br><span class="line"><span class="type">int</span> ticketcount = <span class="number">100</span>;<span class="comment">//车站有100张车票，由三个窗口一起卖票</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selltraket</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ticketcount &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">mtx.<span class="built_in">lock</span>();</span><br><span class="line"><span class="comment">//不加if可能导致ticketCount=1时，两个线程同时进入while循环，导致ticketCount成为负数</span></span><br><span class="line"><span class="keyword">if</span> (ticketcount &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;号窗卖出&quot;</span> &lt;&lt; ticketcount &lt;&lt; <span class="string">&quot;张票&quot;</span> &lt;&lt; endl;</span><br><span class="line">ticketcount--;</span><br><span class="line">&#125;</span><br><span class="line">mtx.<span class="built_in">unlock</span>();</span><br><span class="line"><span class="comment">//每卖出一张票，睡眠100ms，让每个窗口都有机会卖票</span></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">list&lt;std::thread&gt; tlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">tlist.<span class="built_in">push_back</span>(std::<span class="built_in">thread</span>(selltraket, i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (std::thread&amp; t : tlist)</span><br><span class="line">&#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所有窗口卖票结束&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注:**不加if判断的话，当ticketcount &#x3D; 1时，一个线程进入while循环，当还没有完成减一的操作时，另一个线程就也进入while循环，阻塞</p><p>在加锁这个函数，当完成减去1的操作时，解锁。另一个就完成减一的操作，就把ticketcount变成－1了。</p><p><strong>lock_guard自动释放锁</strong>(相当于scoped_ptr)</p><p>由于互斥锁需要手动lock()，unlock()，可能导致unlock()调用不到。所以采用lock_guard()封装mutex，保证所以线程都能释放锁，防止</p><p>死锁的发生。（就像智能指针一样，利用栈上的对象出作用域必须析构对象来释放空间）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">std::mutex mtx;<span class="comment">//全局的一把互斥锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//C++ thread模拟车站三个窗口卖票的程序</span></span><br><span class="line"><span class="type">int</span> ticketcount = <span class="number">100</span>;<span class="comment">//车站有100张车票，由三个窗口一起卖票</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selltraket</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ticketcount &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="comment">//不加if可能导致ticketCount=1时，两个线程同时进入while循环，导致ticketCount成为负数</span></span><br><span class="line"><span class="keyword">if</span> (ticketcount &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">                <span class="comment">//临界区代码段,需要保证原子操作，所以进行线程间互斥操作-&gt;mutex</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;号窗卖出&quot;</span> &lt;&lt; ticketcount &lt;&lt; <span class="string">&quot;张票&quot;</span> &lt;&lt; endl;</span><br><span class="line">ticketcount--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每卖出一张票，睡眠100ms，让每个窗口都有机会卖票</span></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">list&lt;std::thread&gt; tlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">tlist.<span class="built_in">push_back</span>(std::<span class="built_in">thread</span>(selltraket, i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (std::thread&amp; t : tlist)</span><br><span class="line">&#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所有窗口卖票结束&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-线程间同步通信-生产者消费者模型"><a href="#4-4-线程间同步通信-生产者消费者模型" class="headerlink" title="4.4 线程间同步通信-生产者消费者模型"></a>4.4 线程间同步通信-生产者消费者模型</h3><p><strong>C++多线程编程两个问题:</strong></p><p><strong>1 线程间的互斥</strong></p><p>竟态条件-》临界区代码段-》保证原子操作-》互斥锁mutex 轻量级的无锁实现CAS</p><p>strace .&#x2F;a.out</p><p><strong>2 线程间的同步通信</strong></p><p><strong>生产者，消费者线程模型:<strong>生产者线程生产出产品以后，会通知消费者线程去消费产品；如果消费者线程去消费产品，发现还没有产品生产出来，它需要通过线程生产出产品以后，消费者线程才能继续往下执行。</strong>使用条件变量和互斥锁实现的</strong>。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span> <span class="comment">//C++ STL所有的容器都不是线程安全的</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">std::mutex mtx;<span class="comment">//定义互斥锁，做线程间的互斥操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lock_guard&lt;std::mutex&gt; <span class="title">mylock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">que.<span class="built_in">push</span>(val);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;生产者生产&quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot;号商品&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lock_guard&lt;std::mutex&gt; <span class="title">mylock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="type">int</span> val = que.<span class="built_in">front</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;消费者消费&quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot;号商品&quot;</span> &lt;&lt; endl;</span><br><span class="line">que.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">producer</span><span class="params">(Queue* queue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">queue-&gt;<span class="built_in">put</span>(i);</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">microseconds</span>(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consumer</span><span class="params">(Queue* queue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">queue-&gt;<span class="built_in">get</span>();</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">microseconds</span>(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue myqueue;</span><br><span class="line"><span class="function">std::thread <span class="title">t1</span><span class="params">(producer, &amp;myqueue)</span></span>;</span><br><span class="line"><span class="function">std::thread <span class="title">t2</span><span class="params">(consumer, &amp;myqueue)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.<span class="built_in">join</span>();</span><br><span class="line">t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注:**当消费者线程抢先CPU的时间片时，此时没有产品给消费者消费，将会出错。</p><p>**改进方法:**互斥锁和条件变量的结合</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span> <span class="comment">//C++ STL所有的容器都不是线程安全的</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">notify_one:通知另外的一个线程的</span></span><br><span class="line"><span class="comment">notify_all:通知其他所有线程的</span></span><br><span class="line"><span class="comment">通知其他所有线程，我生产了一个物品，赶紧消费吧</span></span><br><span class="line"><span class="comment">其他线程得知，就会从等待=&gt;阻塞=&gt;获取互斥锁才能继续执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">std::mutex mtx;<span class="comment">//全局的一把互斥锁</span></span><br><span class="line">std::condition_variable ctx;<span class="comment">//定义条件变量，做线程间的同步通信操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;std::mutex&gt; <span class="title">mylock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (!que.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//que不为空，生产者应该通知消费者去消费，消费完了，再继续生产</span></span><br><span class="line"><span class="comment">//生产者线程进入等待状态，并且把mtx互斥锁释放掉</span></span><br><span class="line">ctx.<span class="built_in">wait</span>(mylock);</span><br><span class="line">&#125;</span><br><span class="line">que.<span class="built_in">push</span>(val);</span><br><span class="line">ctx.<span class="built_in">notify_all</span>(); <span class="comment">//通知其他线程我生产完了，赶紧消费吧</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;生产者生产&quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot;号商品&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;std::mutex&gt; <span class="title">mylock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (que.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//que为空，消费者应该通知生产者去生产，生产完了，再继续消费</span></span><br><span class="line"><span class="comment">//消费者线程进入等待状态，并且把mtx互斥锁释放掉</span></span><br><span class="line">ctx.<span class="built_in">wait</span>(mylock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> val = que.<span class="built_in">front</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;消费者消费&quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot;号商品&quot;</span> &lt;&lt; endl;</span><br><span class="line">que.<span class="built_in">pop</span>();</span><br><span class="line">ctx.<span class="built_in">notify_all</span>();  <span class="comment">//通知其他线程我消费完了，赶紧生产吧</span></span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">producer</span><span class="params">(Queue* queue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">queue-&gt;<span class="built_in">put</span>(i);</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">microseconds</span>(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consumer</span><span class="params">(Queue* queue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">queue-&gt;<span class="built_in">get</span>();</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">microseconds</span>(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue myqueue;</span><br><span class="line"><span class="function">std::thread <span class="title">t1</span><span class="params">(producer, &amp;myqueue)</span></span>;</span><br><span class="line"><span class="function">std::thread <span class="title">t2</span><span class="params">(consumer, &amp;myqueue)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.<span class="built_in">join</span>();</span><br><span class="line">t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(T a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> A1,<span class="keyword">typename</span> A2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(T(*)(A1,A2))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A2).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> R,<span class="keyword">typename</span> A1,<span class="keyword">typename</span> A2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func3</span><span class="params">(T(R::*a)(A1,A2))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(R).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(A2).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//func(10); // int</span></span><br><span class="line"><span class="comment">//func(&quot;aaa&quot;); // const char *</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>(sum);  <span class="comment">//func T 不加* int(__cdecl*)(int,int) </span></span><br><span class="line"><span class="comment">//func T 加*  int(__cdecl)(int,int) </span></span><br><span class="line"><span class="built_in">func2</span>(sum);</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>(&amp;Test::sum2);</span><br><span class="line"><span class="built_in">func3</span>(&amp;Test::sum2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C4-04(2).png" alt="本地png图片PictureTest.png"></p><h3 id="4-5-再谈lock-guard和unique-lock"><a href="#4-5-再谈lock-guard和unique-lock" class="headerlink" title="4.5 再谈lock_guard和unique_lock"></a>4.5 再谈lock_guard和unique_lock</h3><h4 id="4-5-1-mutex"><a href="#4-5-1-mutex" class="headerlink" title="4.5.1 mutex"></a>4.5.1 mutex</h4><p>​写法类似于裸指针，可能出现获取但没释放的情况。</p><h4 id="4-5-2-lock-guard"><a href="#4-5-2-lock-guard" class="headerlink" title="4.5.2 lock_guard"></a>4.5.2 lock_guard</h4><p>​(1) lock_guard类似于智能指针，构造函数获取锁，析构函数释放锁，禁止拷贝构造和赋值</p><p>​(2) lock_guard 不可能用在函数参数传递或者返回过程中，因为这些会用到拷贝构造或赋值函数，但lock_guard不能进行拷贝构造和赋</p><p>值，只能用在简单的加锁和解锁临界区代码段中。</p><h4 id="4-5-3-unique-lock"><a href="#4-5-3-unique-lock" class="headerlink" title="4.5.3 unique_lock"></a>4.5.3 unique_lock</h4><p>(1) 同样是构造函数获取锁，析构函数释放锁。</p><p>(2) 删除了左值的拷贝构造和等号运算符重载，提供了右值的拷贝构造和等号运算符重载，unique_lock可用于函数的参数传递以及返回过程中。</p><p>(3) 底层也提供了互斥锁的lock()和unlock()方法</p><h4 id="4-5-4-condition-variable"><a href="#4-5-4-condition-variable" class="headerlink" title="4.5.4 condition_variable"></a>4.5.4 condition_variable</h4><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C3-C++%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B%5C4-05.png" alt="本地png图片PictureTest.png"></p><h3 id="4-6-基于CAS操作的atomic原子类型"><a href="#4-6-基于CAS操作的atomic原子类型" class="headerlink" title="4.6 基于CAS操作的atomic原子类型"></a>4.6 基于CAS操作的atomic原子类型</h3><p>互斥锁是比较重的，适合于临界区代码做的事情稍稍复杂的情形。而++,–操作使用CAS原子特性就足够了，是无锁操作。</p><p>CAS并不是不加锁，只不过加锁解锁不在软件层面。cpu和内存之间通信通过系统总线进行。CAS通过exchange&#x2F;swap指令，相当于给总</p><p>线加锁，当一个线程在做cpu和内存交换，不允许其他线程再使用总线，有助于提高多线程效率。</p><p>volatile：防止多线程对共享变量进行缓存，访问的都是原始内存变量值。</p><p>不加volatile的话，每个线程都会拷贝一份自己的线程栈上的变量，带到CPU的缓存，这样效率较高，但也可能出错。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> atomic_bool is_ready = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">volatile</span> atomic_int cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!is_ready) &#123;</span><br><span class="line"><span class="comment">// 当前线程让出时间片,等待下一次调度</span></span><br><span class="line">this_thread::<span class="built_in">yield</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每个线程都加100次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">list&lt;thread&gt; tlist;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">tlist.<span class="built_in">push_back</span>(<span class="built_in">thread</span>(task));</span><br><span class="line">&#125;</span><br><span class="line">this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">2</span>));</span><br><span class="line">is_ready = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (thread&amp; t : tlist) &#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; cnt &lt;&lt; endl; <span class="comment">// 1000</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-设计模式"><a href="#5-设计模式" class="headerlink" title="5 设计模式"></a>5 设计模式</h2><h3 id="5-1-单例模式代码设计"><a href="#5-1-单例模式代码设计" class="headerlink" title="5.1 单例模式代码设计"></a>5.1 单例模式代码设计</h3><p>一个类不管创建多少次对象，都只能得到一个该对象的实例。</p><p>常用到的，比如日志模块，数据库模块</p><h4 id="5-1-1-饿汉式单例模式"><a href="#5-1-1-饿汉式单例模式" class="headerlink" title="5.1.1 饿汉式单例模式"></a><strong>5.1.1 饿汉式单例模式</strong></h4><p>还没有获取实例对象，实例对象就已经产生了。</p><p><strong>优点</strong>：线程安全的。对象存放在数据段，main函数还没有开始执行，对象就已经初始化好了。</p><p><strong>缺点</strong>：获取在软件启动的时候，并没有使用到这个对象，然而这个对象已经产生，比较浪费资源。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singlemon</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//由于普通成员方法的调用依赖对象，而获取唯一对象的时候并没有产生对象，所以定义成static</span></span><br><span class="line"><span class="comment">//static接口获取指向对象的指针</span></span><br><span class="line"><span class="function"><span class="type">static</span> Singlemon *<span class="title">getInstance</span><span class="params">()</span> <span class="comment">//3.获取类的唯一实例对象的接口方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;singlemon;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> Singlemon singlemon; <span class="comment">//2.定义一个唯一的类的实例对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Singlemon</span>() <span class="comment">//1.构造函数私有化</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;默认构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Singlemon</span>(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">Singlemon &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外初始化static成员变量处于数据段，对象在函数执行前就存在。</span></span><br><span class="line">Singlemon Singlemon::singlemon;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过类名调用函数返回指向对象的指针，用于操作对象</span></span><br><span class="line">Singlemon *p1 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p2 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p3 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-懒汉式单例模式"><a href="#5-1-2-懒汉式单例模式" class="headerlink" title="5.1.2 懒汉式单例模式"></a><strong>5.1.2 懒汉式单例模式</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singlemon</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//由于普通成员方法的调用依赖对象，而获取唯一对象的时候并没有产生对象，所以定义成static</span></span><br><span class="line"><span class="comment">//static接口获取指向对象的指针</span></span><br><span class="line"><span class="function"><span class="type">static</span> Singlemon *<span class="title">getInstance</span><span class="params">()</span> <span class="comment">//3.获取类的唯一实例对象的接口方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(singlemon == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">singlemon = <span class="keyword">new</span> <span class="built_in">Singlemon</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singlemon; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> Singlemon *singlemon; <span class="comment">//2.定义一个唯一的类的实例对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Singlemon</span>() <span class="comment">//1.构造函数私有化</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;默认构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Singlemon</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Relese</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">~<span class="built_in">Relese</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> singlemon;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Relese relese;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Singlemon</span>(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">Singlemon &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外初始化static成员变量处于数据段，对象在函数执行前就存在。</span></span><br><span class="line">Singlemon *Singlemon::singlemon = <span class="literal">nullptr</span>;</span><br><span class="line">Singlemon::Relese Singlemon::relese;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过类名调用函数返回指向对象的指针，用于操作对象</span></span><br><span class="line">Singlemon *p1 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p2 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p3 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-线程安全的懒汉单例模式"><a href="#5-2-线程安全的懒汉单例模式" class="headerlink" title="5.2 线程安全的懒汉单例模式"></a>5.2 线程安全的懒汉单例模式</h3><p><strong>(1)getInstance是否为可重入函数(非递归环境下)？</strong></p><p>**答:**如果一个函数能再多线程下运行，而且不会发生竟态条件，则这个函数为可重入函数。而不可重入函数由于使用了一些系统资源，比</p><p>如全局变量区，中断向量表等，所以它如果被中断的话，可能会出现问题，这类函数是不能运行在多任务环境下的。</p><p>(2)instance&#x3D;new <a href="https://so.csdn.net/so/search?q=Singleton&spm=1001.2101.3001.7020">Singleton</a>()做三件事：开辟内存，构造对象和给instance赋值。只要还没给instance赋值，if条件满足，另一线程就可以</p><p>进入if语句，再次实例化一个对象。<strong>线程不安全，不是可重入函数。通过 <strong>锁+双重判断，改为</strong>线程安全</strong>的函数。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singlemon</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//由于普通成员方法的调用依赖对象，而获取唯一对象的时候并没有产生对象，所以定义成static</span></span><br><span class="line"><span class="comment">//static接口获取指向对象的指针</span></span><br><span class="line"><span class="function"><span class="type">static</span> Singlemon *<span class="title">getInstance</span><span class="params">()</span> <span class="comment">//3.获取类的唯一实例对象的接口方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(singlemon == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(singlemon == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">singlemon = <span class="keyword">new</span> <span class="built_in">Singlemon</span>();</span><br><span class="line"><span class="keyword">return</span> singlemon;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singlemon; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> Singlemon *singlemon; <span class="comment">//2.定义一个唯一的类的实例对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Singlemon</span>() <span class="comment">//1.构造函数私有化</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;默认构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Singlemon</span>(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">Singlemon &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类外初始化static成员变量处于数据段，对象在函数执行前就存在。</span></span><br><span class="line">Singlemon *Singlemon::singlemon = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过类名调用函数返回指向对象的指针，用于操作对象</span></span><br><span class="line">Singlemon *p1 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p2 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p3 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注:</strong>(1) 如果将锁放在第一个if外面，单线程将会频繁的加锁解锁，浪费资源</p><p>​ (2) 不加双重判断的话，第一个线程还没赋值的时候，第二个线程满足条件阻塞在锁上，但一个线程结束，解锁时，第二个线程又初始</p><p>化一个实例对象，造成单例模式下的线程不安全。</p><p>​(3) instance指针属于数据段，是同一进程多个进程共享的内存。为了加快指令的执行，CPU会把共享内存的值拷贝一份带到各个线程</p><p>的缓存，这依然导致线程不安全，所以加上volatile，使得各个线程不再持有缓存</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singlemon</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> Singlemon *<span class="title">getInstance</span><span class="params">()</span> <span class="comment">//3.获取类的唯一实例对象的接口方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> Singlemon singlemon; <span class="comment">//2. 懒汉式单例模式，定义唯一的对象实例</span></span><br><span class="line"><span class="keyword">return</span> &amp;singlemon;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Singlemon</span>() <span class="comment">//1.构造函数私有化</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;默认构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Singlemon</span>(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">Singlemon &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Singlemon &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过类名调用函数返回指向对象的指针，用于操作对象</span></span><br><span class="line">Singlemon *p1 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p2 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">Singlemon *p3 = Singlemon::<span class="built_in">getInstance</span>();</span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，对于static静态局部变量的初始化，编译器会自动对它的初始化进行加锁和解锁控制，使静态局部变量的初始化成为线程安全</p><p>的操作，不用担心多个线程都会初始化静态局部变量，因此上面的懒汉单例模式是线程安全的单例模式！</p><h3 id="5-3-简单工厂和工厂方法"><a href="#5-3-简单工厂和工厂方法" class="headerlink" title="5.3 简单工厂和工厂方法"></a>5.3 简单工厂和工厂方法</h3><h4 id="5-3-1-简单工厂"><a href="#5-3-1-简单工厂" class="headerlink" title="5.3.1 简单工厂"></a>5.3.1 简单工厂</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(string name):<span class="built_in">m_name</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BMW</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆宝马汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDI</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AUDI</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆奥迪汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Car * p1 = <span class="keyword">new</span> <span class="built_in">BMW</span>(<span class="string">&quot;X1&quot;</span>);</span><br><span class="line">Car * p2 = <span class="keyword">new</span> <span class="built_in">AUDI</span>(<span class="string">&quot;A6&quot;</span>);</span><br><span class="line"></span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br><span class="line">p2-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p1;</span><br><span class="line"><span class="keyword">delete</span> p2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>**缺点:**开发者需要知道派生类的名字，而逻辑上不应该了解创建对象的具体内容，所以把对象封装在一个简单工厂</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(string name):<span class="built_in">m_name</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BMW</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆宝马汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDI</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AUDI</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆奥迪汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CarType</span></span><br><span class="line">&#123;</span><br><span class="line">Bmw,Audi</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car *<span class="title">buycar</span><span class="params">(CarType cartype)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(cartype)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> Bmw:</span><br><span class="line"><span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">BMW</span>(<span class="string">&quot;X1&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> Audi:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">AUDI</span>(<span class="string">&quot;A6&quot;</span>);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cerr &lt;&lt; <span class="string">&quot;传入工厂的参数不正确:&quot;</span> &lt;&lt; cartype &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SimpleFactory *s1 = <span class="keyword">new</span> <span class="built_in">SimpleFactory</span>();</span><br><span class="line">Car *p1 = s1-&gt;<span class="built_in">buycar</span>(Bmw);</span><br><span class="line">Car *p2 = s1-&gt;<span class="built_in">buycar</span>(Audi);</span><br><span class="line"></span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br><span class="line">p2-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> s1;</span><br><span class="line"><span class="keyword">delete</span> p1;</span><br><span class="line"><span class="keyword">delete</span> p2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>**改进方法:**使用智能指针管理资源</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(string name):<span class="built_in">m_name</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BMW</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆宝马汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDI</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AUDI</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆奥迪汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CarType</span></span><br><span class="line">&#123;</span><br><span class="line">Bmw,Audi</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car *<span class="title">buycar</span><span class="params">(CarType cartype)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(cartype)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> Bmw:</span><br><span class="line"><span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">BMW</span>(<span class="string">&quot;X1&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> Audi:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">AUDI</span>(<span class="string">&quot;A6&quot;</span>);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cerr &lt;&lt; <span class="string">&quot;传入工厂的参数不正确:&quot;</span> &lt;&lt; cartype &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_ptr&lt;SimpleFactory&gt; <span class="title">s1</span><span class="params">(<span class="keyword">new</span> SimpleFactory())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p1</span><span class="params">(s1-&gt;buycar(Bmw))</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p2</span><span class="params">(s1-&gt;buycar(Audi))</span></span>;</span><br><span class="line"></span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br><span class="line">p2-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>缺点:<strong>create_car函数</strong>无法做到 “开-闭”原则</strong> ，即对原有代码修改关闭，对功能扩展开放。这个函数随着新对象的添加，或者原有对象的删</p><p>除，都会导致该函数的代码修改，而且有可能影响原来的功能。</p><h4 id="5-3-2-工厂方法"><a href="#5-3-2-工厂方法" class="headerlink" title="5.3.2 工厂方法"></a>5.3.2 工厂方法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(string name):<span class="built_in">m_name</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BMW</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆宝马汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDI</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AUDI</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆奥迪汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Car * <span class="title">createcar</span><span class="params">(string name)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMWFactory</span>:<span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car * <span class="title">createcar</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">BMW</span>(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDIFactory</span>:<span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car * <span class="title">createcar</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">AUDI</span>(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_ptr&lt;Factory&gt; <span class="title">bmwfactory</span><span class="params">(<span class="keyword">new</span> BMWFactory())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Factory&gt; <span class="title">audifactory</span><span class="params">(<span class="keyword">new</span> AUDIFactory())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p1</span><span class="params">(bmwfactory-&gt;createcar(<span class="string">&quot;x1&quot;</span>))</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p2</span><span class="params">(audifactory-&gt;createcar(<span class="string">&quot;A6&quot;</span>))</span></span>;</span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br><span class="line">p2-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>**缺点:**每一个实例工厂负责生产一种实例产品，也就是一个产品对应一个工厂，一个工厂对应一个产品。在现实生活中一个工厂是可以生</p><p>产多种产品的，而工厂方法中，给这每一个产品都创建一个工厂类，这样代码中的类就太多了，<strong>不好维护</strong>。</p><h3 id="5-4-抽象工厂"><a href="#5-4-抽象工厂" class="headerlink" title="5.4 抽象工厂"></a>5.4 抽象工厂</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(string name):<span class="built_in">m_name</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BMW</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆宝马汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDI</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AUDI</span>(string name):<span class="built_in">Car</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我买入了一辆奥迪汽车&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">light</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showlight</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMWlight</span>:<span class="keyword">public</span> light</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showlight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;宝马车灯&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDIlight</span>:<span class="keyword">public</span> light</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showlight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;奥迪车灯&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Car * <span class="title">createcar</span><span class="params">(string name)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> light * <span class="title">createlight</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMWFactory</span>:<span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car * <span class="title">createcar</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">BMW</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">light * <span class="title">createlight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">BMWlight</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDIFactory</span>:<span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car * <span class="title">createcar</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">AUDI</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">light * <span class="title">createlight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">AUDIlight</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_ptr&lt;Factory&gt; <span class="title">bmwfactory</span><span class="params">(<span class="keyword">new</span> BMWFactory())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Factory&gt; <span class="title">audifactory</span><span class="params">(<span class="keyword">new</span> AUDIFactory())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p1</span><span class="params">(bmwfactory-&gt;createcar(<span class="string">&quot;x1&quot;</span>))</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p2</span><span class="params">(audifactory-&gt;createcar(<span class="string">&quot;A6&quot;</span>))</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;light&gt; <span class="title">p3</span><span class="params">(bmwfactory-&gt;createlight())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;light&gt; <span class="title">p4</span><span class="params">(audifactory-&gt;createlight())</span></span>;</span><br><span class="line"></span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br><span class="line">p2-&gt;<span class="built_in">show</span>();</span><br><span class="line">p3-&gt;<span class="built_in">showlight</span>();</span><br><span class="line">p4-&gt;<span class="built_in">showlight</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="5-5-总结"><a href="#5-5-总结" class="headerlink" title="5.5 总结"></a>5.5 总结</h3><p><strong>(1) 简单工厂（Simple Factory）</strong></p><p>​<strong>优点：</strong>把对象的创建封装在一个接口函数里面，通过传入不同标识，返回创建的对象，客户不用自己负责new对象，不用了解对象创建</p><p>​             的详细过程。</p><p>​<strong>缺点：</strong>提供创建对象实例的接口函数不闭合，不能对修改关闭</p><p><strong>(2) 工厂方法（Factory Method）</strong></p><p>​<strong>优点：</strong>Factory基类，提供了一个纯虚函数（创建产品），定义派生类（具体产品的工厂）负责创建对应产品，可以做到不同的产品，</p><p>​                在不同的工厂里面创建，能够对现有工厂以及产品修改关闭。</p><p>​     <strong>缺点：</strong>实际上，很多产品是有关联关系的，属于一个产品簇，不应该放在不同的工厂里面去创建，这样一是不符合产品对象创建逻</p><p>辑，二是工厂类太多了，不好维护。</p><p><strong>(3) 抽象工厂（Abstract Factory）</strong></p><p>​      把有关联关系的、属于一个产品簇的所有产品创建的接口函数放在一个抽象工厂里面，派生类（具体生产的工厂）应该负责创建该产</p><p>品簇里面所有产品。</p><h3 id="5-6-代理模式"><a href="#5-6-代理模式" class="headerlink" title="5.6 代理模式"></a>5.6 代理模式</h3><p><strong>代理Proxy模式：</strong>通过代理类，来控制实际对象的访问权限</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">movie</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">freemovies</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">vipmovies</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ticketmovies</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//委托类 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Freebugmovie</span>:<span class="keyword">public</span> movie</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">freemovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;观看免费电影&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vipmovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;观看vip电影&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ticketmovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;观看用券电影&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理FixBugVideoSite</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vistormovie</span>:<span class="keyword">public</span> movie</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Vistormovie</span>()</span><br><span class="line">&#123;</span><br><span class="line">videomovie = <span class="keyword">new</span> <span class="built_in">Freebugmovie</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Vistormovie</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> videomovie;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过代理对象的freemovies，来访问真正委托类对象的freemovies方法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">freemovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">videomovie-&gt;<span class="built_in">freemovies</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vipmovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;您目前只是普通游客，需要升级为VIP，才能观看VIP电影&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ticketmovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;您目前没有券，需要购买电影券，才能观看电影&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">movie * videomovie;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理Vipmovie</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vipmovie</span>:<span class="keyword">public</span> movie</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Vipmovie</span>()</span><br><span class="line">&#123;</span><br><span class="line">videomovie = <span class="keyword">new</span> <span class="built_in">Freebugmovie</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Vipmovie</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> videomovie;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">freemovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过代理对象的freemovies，来访问真正委托类对象的freemovies方法</span></span><br><span class="line">videomovie-&gt;<span class="built_in">freemovies</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vipmovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过代理对象的vipmovies，来访问真正委托类对象的vipmovies方法</span></span><br><span class="line">videomovie-&gt;<span class="built_in">vipmovies</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ticketmovies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;您目前没有券，需要购买电影券，才能观看电影&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">movie * videomovie;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用的API接口，使用的都是基类的指针或者引用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">watchmovie</span><span class="params">(unique_ptr&lt;movie&gt; &amp;ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ptr-&gt;<span class="built_in">freemovies</span>();</span><br><span class="line">ptr-&gt;<span class="built_in">vipmovies</span>();</span><br><span class="line">ptr-&gt;<span class="built_in">ticketmovies</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//客户直接访问代理对象</span></span><br><span class="line"><span class="function">unique_ptr&lt;movie&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> Vistormovie())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;movie&gt; <span class="title">p2</span><span class="params">(<span class="keyword">new</span> Vipmovie())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">watchmovie</span>(p1);</span><br><span class="line"><span class="built_in">watchmovie</span>(p2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-7-装饰器模式"><a href="#5-7-装饰器模式" class="headerlink" title="5.7 装饰器模式"></a>5.7 装饰器模式</h3><p>​通过子类实现功能增强的问题：为了增强现有类的功能，通过实现子类的方式，重写接口，是可以完成功能扩展的，但是代码中有太多</p><p>的子类添加进来了。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是一辆宝马汽车，配置有：基类配置&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AUDI</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是一辆奥迪汽车，配置有：基类配置&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BENZ</span>:<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是一辆奔驰汽车，配置有：基类配置&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteDecorator01</span>: <span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ConcreteDecorator01</span>(Car *p1):<span class="built_in">pCar</span>(p1)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pCar-&gt;<span class="built_in">show</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;,定速巡航&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">ConcreteDecorator01</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> pCar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Car *pCar;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteDecorator02</span>: <span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ConcreteDecorator02</span>(Car *p1):<span class="built_in">pCar</span>(p1)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pCar-&gt;<span class="built_in">show</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;,自动刹车&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">ConcreteDecorator02</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> pCar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Car *pCar;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteDecorator03</span>: <span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ConcreteDecorator03</span>(Car *p1):<span class="built_in">pCar</span>(p1)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pCar-&gt;<span class="built_in">show</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;,轨道偏离&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">ConcreteDecorator03</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> pCar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Car *pCar;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Car *p1 = <span class="keyword">new</span> <span class="built_in">BMW</span>();</span><br><span class="line">p1 = <span class="keyword">new</span> <span class="built_in">ConcreteDecorator01</span>(p1);</span><br><span class="line">p1 = <span class="keyword">new</span> <span class="built_in">ConcreteDecorator02</span>(p1);</span><br><span class="line">p1 = <span class="keyword">new</span> <span class="built_in">ConcreteDecorator03</span>(p1);</span><br><span class="line">p1-&gt;<span class="built_in">show</span>(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-8-适配器模式"><a href="#5-8-适配器模式" class="headerlink" title="5.8 适配器模式"></a>5.8 适配器模式</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VGA</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV01</span>:<span class="keyword">public</span> VGA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过VGA接口投影进行播放视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">//新进很多只支持HDMI的投影仪，但旧电脑只支持VGA接口</span></span><br><span class="line"><span class="comment">//方法一:买一个支持HDMI接口的电脑，这个就叫代码重构</span></span><br><span class="line"><span class="comment">//方法二:买一个转换头(适配器),将VGA信号转换成HDMI接口 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HDMI</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV02</span>:<span class="keyword">public</span> HDMI</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过HDMI接口投影进行播放视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VGAadapttoHDMI</span>:<span class="keyword">public</span> VGA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">VGAadapttoHDMI</span>(HDMI *hdmi):<span class="built_in">pHDMI</span>(hdmi)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pHDMI-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">HDMI *pHDMI;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">playvedio</span><span class="params">(VGA *pVGA)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pVGA-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Computer computer;</span><br><span class="line"></span><br><span class="line">computer.<span class="built_in">playvedio</span>(<span class="keyword">new</span> <span class="built_in">TV01</span>());</span><br><span class="line"></span><br><span class="line">computer.<span class="built_in">playvedio</span>(<span class="keyword">new</span> <span class="built_in">VGAadapttoHDMI</span>(<span class="keyword">new</span> <span class="built_in">TV02</span>()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-9-观察者模式"><a href="#5-9-观察者模式" class="headerlink" title="5.9 观察者模式"></a>5.9 观察者模式</h3><p>​行为型模式：主要关注的是对象之间的通信</p><p>​观察者-监听者模式（发布-订阅模式）设计模式：主要关注的是对象的一对多的关系，也就是多个对象都依赖一个对象，当该对象的状</p><p>态发生改变时，其他对象都能够接收到相应通知。比如有一组数据，生成一个数据对象，通过这一组数据可以生成曲线图（对象1）&#x2F;柱状</p><p>图（对象2）&#x2F;圆饼图（对象3），当数据对象发生改变时，对象1、对象2、对象3应该及时的收到相应的通知！</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">observer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">handle</span><span class="params">(<span class="type">int</span> msgid)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">observer1</span>:<span class="keyword">public</span> observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(msgid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer1 recv 1 msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer1 recv 2 msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer1 recv unknow msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">observer2</span>:<span class="keyword">public</span> observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(msgid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer2 recv 2 msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer2 recv unknow msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">observer3</span>:<span class="keyword">public</span> observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(msgid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer3 recv 1 msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer3 recv 1 msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Observer3 recv unknow msg!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addobserver</span><span class="params">(observer *server,<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">subjecter[msgid].<span class="built_in">push_back</span>(server);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">disclain</span><span class="params">(<span class="type">int</span> msgid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> it = subjecter.<span class="built_in">find</span>(msgid);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(it != subjecter.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(observer *server:it-&gt;second)</span><br><span class="line">&#123;</span><br><span class="line">server-&gt;<span class="built_in">handle</span>(msgid);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,list&lt;observer*&gt;&gt; subjecter;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Subject subject;</span><br><span class="line"></span><br><span class="line">observer *p1 = <span class="keyword">new</span> <span class="built_in">observer1</span>();</span><br><span class="line">observer *p2 = <span class="keyword">new</span> <span class="built_in">observer2</span>();</span><br><span class="line">observer *p3 = <span class="keyword">new</span> <span class="built_in">observer3</span>();</span><br><span class="line"></span><br><span class="line">subject.<span class="built_in">addobserver</span>(p1,<span class="number">1</span>);</span><br><span class="line">subject.<span class="built_in">addobserver</span>(p1,<span class="number">2</span>);</span><br><span class="line">subject.<span class="built_in">addobserver</span>(p2,<span class="number">2</span>);</span><br><span class="line">subject.<span class="built_in">addobserver</span>(p3,<span class="number">1</span>);</span><br><span class="line">subject.<span class="built_in">addobserver</span>(p3,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> msgid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入消息ID：&quot;</span> ;</span><br><span class="line">cin &gt;&gt; msgid;</span><br><span class="line"></span><br><span class="line">subject.<span class="built_in">disclain</span>(msgid); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-搜索迷宫路径"><a href="#6-搜索迷宫路径" class="headerlink" title="6 搜索迷宫路径"></a>6 搜索迷宫路径</h2><h3 id="6-1-深度优先遍历搜索迷宫路径"><a href="#6-1-深度优先遍历搜索迷宫路径" class="headerlink" title="6.1 深度优先遍历搜索迷宫路径"></a>6.1 深度优先遍历搜索迷宫路径</h3><p>如何深度搜索一个迷宫路径？</p><p>​非递归实现，需要一个栈。深度优先遍历就是一个方向能走，就一直朝着这个方向(同一个方向)走。我们给代码定义一下：优先是向右边走，然后是向下走，然</p><p>后是向左走，最后是向上走。迷宫的左上角元素坐标（0,0）的值是1的话，根本不存在迷宫通行的路径，入口就是封的了。如果是左上角元素坐标(0,0)的值是0的</p><p>话，把它入栈。栈现在不为空，取栈顶元素，先看它右边能不能走，能走的话，就一直向右走，它右边是0，就入栈了。再查看栈顶元素，看它的右边能不能走，</p><p>假设它的右边和下面的元素值都是1，它左边是0，又走回到入口元素了，然后它的右边是0，就这样，不断来回走了。所以，我们得这么判断：如果栈顶元素的右</p><p>边可以走的话，我们要把当前节点的右方向改成不能走，把右边节点的左方向改成不能走。因为不能走回头路，而且因为路子走不通回退后也不能继续走相同的死</p><p>路。因为是深度<a href="https://so.csdn.net/so/search?q=%E9%81%8D%E5%8E%86&spm=1001.2101.3001.7020">遍历</a>，所以入栈后，不用判断之前节点的方向。continue后，重新取栈顶元素，继续进行判断。同理得到向下、向左和向上。</p><p>​如果栈顶元素判断完四个方向都不能走，就是到死路了，就把栈顶元素出栈。然后再取栈顶元素，进行判断，如果它的4个方向都不能走，就出栈，如果栈为</p><p>空，则迷宫无通路。如果有方向能走，就继续走下去。以此类推下去。但是，都要判断一下此节点是不是右下角的节点，如果是，就是找到通路了。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对应state四个状态，因为state是数组，所以一定对应好下标</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LEFT = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> RIGHT = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> UP = <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> DOWN = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> num = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NO = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> YES = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Meth</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Meth</span>(<span class="type">int</span> row, <span class="type">int</span> col) :<span class="built_in">m_row</span>(row),<span class="built_in">m_col</span>(col)</span><br><span class="line">    &#123;</span><br><span class="line">        node = <span class="keyword">new</span> Node *[m_row];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node[i] = <span class="keyword">new</span> Node[m_col];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initnode</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        node[x][y].m_x = x;</span><br><span class="line">        node[x][y].m_y = y;</span><br><span class="line">        node[x][y].m_val = val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node[x][y].state[i] = NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setnodestate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m_col; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (node[i][j].m_val == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j &lt; m_col - <span class="number">1</span> &amp;&amp; node[i][j + <span class="number">1</span>].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[RIGHT] = YES;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i &lt; m_row - <span class="number">1</span> &amp;&amp; node[i + <span class="number">1</span>][j].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[DOWN] = YES;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; node[i][j - <span class="number">1</span>].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[LEFT] = YES;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; node[i - <span class="number">1</span>][j].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[UP] = YES;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">searchnodepath</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node[<span class="number">0</span>][<span class="number">0</span>].m_val == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        pstack.<span class="built_in">push</span>(node[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!pstack.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            Node top = pstack.<span class="built_in">top</span>();</span><br><span class="line">            <span class="type">int</span> x = top.m_x;</span><br><span class="line">            <span class="type">int</span> y = top.m_y;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (x == m_row - <span class="number">1</span> &amp;&amp; y == m_col - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[RIGHT] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[RIGHT] = NO;</span><br><span class="line">                node[x][y + <span class="number">1</span>].state[LEFT] = NO;</span><br><span class="line">                pstack.<span class="built_in">push</span>(node[x][y + <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[DOWN] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[DOWN] = NO;</span><br><span class="line">                node[x + <span class="number">1</span>][y].state[UP] = NO;</span><br><span class="line">                pstack.<span class="built_in">push</span>(node[x + <span class="number">1</span>][y]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[LEFT] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[LEFT] = NO;</span><br><span class="line">                node[x][y - <span class="number">1</span>].state[RIGHT] = NO;</span><br><span class="line">                pstack.<span class="built_in">push</span>(node[x][y - <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[UP] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[UP] = NO;</span><br><span class="line">                node[x - <span class="number">1</span>][y].state[DOWN] = NO;</span><br><span class="line">                pstack.<span class="built_in">push</span>(node[x - <span class="number">1</span>][y]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pstack.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">shownodepath</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pstack.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;不存在迷宫路径&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (!pstack.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                Node top = pstack.<span class="built_in">top</span>();</span><br><span class="line">                node[top.m_x][top.m_y].m_val = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                pstack.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_row; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m_col; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (node[i][j].m_val == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot;* &quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cout &lt;&lt; node[i][j].m_val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> m_x;</span><br><span class="line">        <span class="type">int</span> m_y;</span><br><span class="line">        <span class="type">int</span> m_val;</span><br><span class="line">        <span class="type">int</span> state[num];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Node** node;</span><br><span class="line">    <span class="type">int</span> m_row;</span><br><span class="line">    <span class="type">int</span> m_col;</span><br><span class="line">    stack&lt;Node&gt; pstack;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入迷宫得行列数(例如: 10 10):&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> col = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> row = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; row &gt;&gt; col;</span><br><span class="line"></span><br><span class="line">    <span class="function">Meth <span class="title">meth</span><span class="params">(row, col)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入迷宫的路径信息(0表示可以走,1表示不能走):&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; data;</span><br><span class="line"></span><br><span class="line">            meth.<span class="built_in">initnode</span>(i, j, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    meth.<span class="built_in">setnodestate</span>();</span><br><span class="line"></span><br><span class="line">    meth.<span class="built_in">searchnodepath</span>();</span><br><span class="line"></span><br><span class="line">    meth.<span class="built_in">shownodepath</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-广度优先遍历搜索迷宫路径"><a href="#6-2-广度优先遍历搜索迷宫路径" class="headerlink" title="6.2 广度优先遍历搜索迷宫路径"></a>6.2 广度优先遍历搜索迷宫路径</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对应state四个状态，因为state是数组，所以一定对应好下标</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LEFT = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> RIGHT = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> UP = <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> DOWN = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> num = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NO = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> YES = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Meth</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Meth</span>(<span class="type">int</span> row, <span class="type">int</span> col) :<span class="built_in">m_row</span>(row), <span class="built_in">m_col</span>(col)</span><br><span class="line">    &#123;</span><br><span class="line">        node = <span class="keyword">new</span> Node * [m_row];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node[i] = <span class="keyword">new</span> Node[m_col];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pnode.<span class="built_in">resize</span>(m_row * m_col);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initnode</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        node[x][y].m_x = x;</span><br><span class="line">        node[x][y].m_y = y;</span><br><span class="line">        node[x][y].m_val = val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node[x][y].state[i] = NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setnodestate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m_col; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (node[i][j].m_val == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j &lt; m_col - <span class="number">1</span> &amp;&amp; node[i][j + <span class="number">1</span>].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[RIGHT] = YES;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i &lt; m_row - <span class="number">1</span> &amp;&amp; node[i + <span class="number">1</span>][j].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[DOWN] = YES;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; node[i][j - <span class="number">1</span>].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[LEFT] = YES;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; node[i - <span class="number">1</span>][j].m_val == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node[i][j].state[UP] = YES;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">searchnodepath</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node[<span class="number">0</span>][<span class="number">0</span>].m_val == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pqueue.<span class="built_in">push</span>(node[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!pqueue.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            Node top = pqueue.<span class="built_in">front</span>();</span><br><span class="line">            <span class="type">int</span> x = top.m_x;</span><br><span class="line">            <span class="type">int</span> y = top.m_y;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[RIGHT] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[RIGHT] = NO;</span><br><span class="line">                node[x][y + <span class="number">1</span>].state[LEFT] = NO;</span><br><span class="line">                pnode[x * m_row + y + <span class="number">1</span>] = node[x][y];</span><br><span class="line">                pqueue.<span class="built_in">push</span>(node[x][y + <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">check</span>(node[x][y + <span class="number">1</span>]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[DOWN] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[DOWN] = NO;</span><br><span class="line">                node[x + <span class="number">1</span>][y].state[UP] = NO;</span><br><span class="line">                pnode[(x + <span class="number">1</span>) * m_row + y] = node[x][y];</span><br><span class="line">                pqueue.<span class="built_in">push</span>(node[x+<span class="number">1</span>][y]);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">check</span>(node[x+<span class="number">1</span>][y]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[LEFT] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[LEFT] = NO;</span><br><span class="line">                node[x][y - <span class="number">1</span>].state[RIGHT] = NO;</span><br><span class="line">                pnode[x * m_row + y - <span class="number">1</span>] = node[x][y];</span><br><span class="line">                pqueue.<span class="built_in">push</span>(node[x][y - <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">check</span>(node[x][y - <span class="number">1</span>]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node[x][y].state[UP] == YES)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].state[UP] = NO;</span><br><span class="line">                node[x - <span class="number">1</span>][y].state[DOWN] = NO;</span><br><span class="line">                pnode[(x <span class="number">-1</span>) * m_row + y ] = node[x][y];</span><br><span class="line">                pqueue.<span class="built_in">push</span>(node[x - <span class="number">1</span>][y]);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">check</span>(node[x<span class="number">-1</span>][y]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pqueue.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">shownodepath</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pqueue.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;不存在迷宫路径&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = m_row - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> y = m_col - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                node[x][y].m_val = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Node top = pnode[x * m_row + y];</span><br><span class="line">                x = top.m_x;</span><br><span class="line">                y = top.m_y;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_row; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m_col; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (node[i][j].m_val == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot;* &quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        cout &lt;&lt; node[i][j].m_val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> m_x;</span><br><span class="line">        <span class="type">int</span> m_y;</span><br><span class="line">        <span class="type">int</span> m_val;</span><br><span class="line">        <span class="type">int</span> state[num];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(Node&amp; node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( node.m_x == m_row - <span class="number">1</span> &amp;&amp; node.m_y == m_col - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Node** node;</span><br><span class="line">    <span class="type">int</span> m_row;</span><br><span class="line">    <span class="type">int</span> m_col;</span><br><span class="line">    queue&lt;Node&gt; pqueue;</span><br><span class="line">    vector&lt;Node&gt; pnode;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入迷宫得行列数(例如: 10 10):&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> col = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> row = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; row &gt;&gt; col;</span><br><span class="line"></span><br><span class="line">    <span class="function">Meth <span class="title">meth</span><span class="params">(row, col)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入迷宫的路径信息(0表示可以走,1表示不能走):&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; data;</span><br><span class="line"></span><br><span class="line">            meth.<span class="built_in">initnode</span>(i, j, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    meth.<span class="built_in">setnodestate</span>();</span><br><span class="line"></span><br><span class="line">    meth.<span class="built_in">searchnodepath</span>();</span><br><span class="line"></span><br><span class="line">    meth.<span class="built_in">shownodepath</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-大数的加减法"><a href="#6-3-大数的加减法" class="headerlink" title="6.3 大数的加减法"></a>6.3 大数的加减法</h3><h3 id="6-4-海量数据的查重问题"><a href="#6-4-海量数据的查重问题" class="headerlink" title="6.4 海量数据的查重问题"></a>6.4 海量数据的查重问题</h3><p>(1) 哈希表(得看有没有对内存的限制，如果没有限制，就是直接用哈希表解决）</p><p>​比如说 50亿（5G）个整数的查重问题， 10亿个整数内存大约是1G，50亿个整数相当于内存是5G，一个整数4个字节，如果要算50亿个整数的查重问题的话，</p><p>如果要用一个哈希表把这50亿个数据全部存储下来，就得花20G的内存，链式哈希表每个节点还得有一个地址域，又占4字节，所以总共需要（20G+20G&#x3D;40G） </p><p>的内存空间。哈希表就是空间换时间的这么一个结构。</p><p>(2) 分治思想 （如果对内存有要求，就要使用分治思想，对数据的大小进行划分）</p><p>​第1和第2个方法思想是解决查重问题的根本出发点，就是用哈希表。</p><p>(3) Bloom Filter：布隆过滤器（查重用的，节省内存，但是有点误差）</p><p>(4) 如果是字符串类型的查重 除了哈希表，布隆过滤器，还可以使用TrieTree字典树(前缀树)</p><p><strong>考察点1：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> size = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[size] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = <span class="built_in">rand</span>() % <span class="number">10000</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; map1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> val:arr)</span><br><span class="line">&#123;</span><br><span class="line">map1[val]++; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:map1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(it.second &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;值:&quot;</span> &lt;&lt; it.first &lt;&lt; <span class="string">&quot;重复次数:&quot;</span> &lt;&lt; it.second &lt;&lt; endl;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>考察点2：</strong>有一个文件，有大量的整数 50亿个整数，内存限制400M，让你找出文件中重复的元素，重复的次数。如果文件有50亿个整数(5G)，如果要用哈希表，</p><p>就是要开辟 5G乘以4&#x3D;20G乘以2 &#x3D; 40G的内存大小空间，此时只能用分治法的思想了。</p><p><strong>分治法的思想：</strong> 把大文件划分成小文件，使得每一个小文件能够加载到内存当中，求出对应的重复的元素，把结果写入到一个存储重复元素的文件当中。大文件 </p><p>&#x3D;》 小文件的个数（40G&#x2F;400M &#x3D; 120个小文件，一个系统默认一个进程使用的文件数不超过1024遍历大文件的元素，把每一个元素根据哈希映射函数，放到对应</p><p>序号的小文件当中data % 127 &#x3D; file_index，依次划分为data0.txt，data1.tx1……..data126.txt。值相同的，通过一样的哈希映射函数，肯定是放在同一个小文件</p><p>当中的，这样就从小文件里把数据全部读出来放在内存中，进行查重，求重复出现的数字进行输出或者打印或者存储到一个文件中。</p><p><strong>考察点3：</strong>a,b两个文件，里面都有10亿个整数，内存限制400M，让你求出a，b两个文件当中重复的元素有哪些？</p><p><strong>还是分治思想的策略：</strong>10亿个整数相当于是 -&gt; 1G乘以4 &#x3D; 4G乘以2&#x3D;8G&#x2F;400M &#x3D; 27个小文件，把a和b两个大文件，划分为个数相等的一系列小文件。从a文件中读</p><p>取数据，通过 数据%27 &#x3D; file_index 放到a的其中的小文件中。从b文件中读取数据，通过 数据%27 &#x3D; file_index 放到b的其中的小文件中</p><p><strong>a和b两个文件中，数据相同的元素，进行哈希映射以后，肯定在相同序号的</strong></p><h3 id="6-5-海量数据求top-k的问题"><a href="#6-5-海量数据求top-k的问题" class="headerlink" title="6.5 海量数据求top k的问题"></a>6.5 海量数据求top k的问题</h3><p>(1)求最大的&#x2F;最小的前K个元素?求最大的&#x2F;最小的第K个元素?</p><p>10000个整数，找值前10大的元素或者是找值前10</p><p><strong>解法1：</strong>大根堆&#x2F;小根堆 &#x3D;》不用自己实现大根堆&#x2F;小根堆， 使用优先级队列priority_queue就可以，先用前10个整数创建一个小根堆（最小值就在堆顶），然后遍</p><p>历剩下的整数，如果整数比堆顶元素大，那么删除堆顶元素（出堆），然后再把整数入堆，遍历完所有整数，小根堆里面放的就是值最大的前10个元素了；如果找</p><p>的是第k小（大根堆堆顶）或者第k大（小根堆堆顶），只需要访问堆顶一个元素就可以了。大根堆是求最小的前K个元素，小根堆是求最大的前K个元素。</p><p><strong>小根堆求最大的前K个元素</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; minHeap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">minHeap.<span class="built_in">push</span>(vec[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*it &gt; minHeap.<span class="built_in">top</span>())</span><br><span class="line">&#123;</span><br><span class="line">minHeap.<span class="built_in">push</span>(*it);</span><br><span class="line">minHeap.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!minHeap.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; minHeap.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">minHeap.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>大根堆求最小的前K个元素</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">queue.<span class="built_in">push</span>(vec[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*it &lt; queue.<span class="built_in">top</span>())</span><br><span class="line">&#123;</span><br><span class="line">queue.<span class="built_in">push</span>(*it);</span><br><span class="line">queue.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!queue.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; queue.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">queue.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解法2：快排分割函数(比优先级队列效率更高)</strong></p><p>​经过快排分割函数，能够在O(lgn)时间内，把小于基准数的整数调整到左边，把大于基准数的整数调整到右边，基准数（index）就可以认为是第（index+1）小</p><p>的整数了 [0,(index)]就是前index+1小的整数了</p><p><strong>求最小的前k个元素</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k = arr[i];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= k)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">arr[i++] = arr[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt; k)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">arr[j--] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = k;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> pos = <span class="built_in">partition</span>(arr, i, j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos == k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> arr[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pos &gt; k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(arr, i, pos - <span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(arr, pos + <span class="number">1</span>, j, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sort</span>(vec, <span class="number">0</span>, vec.<span class="built_in">size</span>() - <span class="number">1</span>, i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>求最大的前k个元素</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k = arr[i];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &lt; k)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">arr[i++] = arr[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &gt;= k)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">arr[j--] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = k;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> pos = <span class="built_in">partition</span>(arr, i, j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos == k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> arr[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pos &gt; k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(arr, i, pos - <span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(arr, pos + <span class="number">1</span>, j, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sort</span>(vec, <span class="number">0</span>, vec.<span class="built_in">size</span>() - <span class="number">1</span>, i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-海量数据查重和topK的综合应用"><a href="#6-6-海量数据查重和topK的综合应用" class="headerlink" title="6.6 海量数据查重和topK的综合应用"></a>6.6 海量数据查重和topK的综合应用</h3><p>查重：数据是否有重复，以及数据重复的次数</p><p>topK：有几亿个数字。求元素的值，前K大&#x2F;小，第K大&#x2F;小</p><p><strong>题目：数据的重复次数最大&#x2F;最小的前K个&#x2F;第K个</strong></p><p>哈希统计(map) + 堆&#x2F;快排分割</p><p><strong>在一组数字中 ，找出重复次数最多的前10个(小顶堆)</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> val:vec)</span><br><span class="line">&#123;</span><br><span class="line">mymap[val]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it = mymap.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> P = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> FUNC = function&lt;<span class="built_in">bool</span>(P&amp;, P&amp;)&gt;;</span><br><span class="line">priority_queue&lt;P, vector&lt;P&gt;, FUNC&gt; <span class="built_in">myqueue</span>(</span><br><span class="line">[](<span class="keyword">auto</span>&amp; a, <span class="keyword">auto</span>&amp; b)-&gt;<span class="type">bool</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; it != mymap.<span class="built_in">end</span>()&amp;&amp; k &lt; <span class="number">10</span>; k++, it++)</span><br><span class="line">&#123;</span><br><span class="line">myqueue.<span class="built_in">push</span>(*it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; it != mymap.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (it-&gt;second &gt; myqueue.<span class="built_in">top</span>().second)</span><br><span class="line">&#123;</span><br><span class="line">myqueue.<span class="built_in">pop</span>();</span><br><span class="line">myqueue.<span class="built_in">push</span>(*it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!myqueue.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; myqueue.<span class="built_in">top</span>().first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; myqueue.<span class="built_in">top</span>().second &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">myqueue.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在一组数字中 ，找出重复次数最少的前10个(大顶堆)</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> val : vec)</span><br><span class="line">&#123;</span><br><span class="line">mymap[val]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it = mymap.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> P = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> FUNC = function&lt;<span class="built_in">bool</span>(P&amp;, P&amp;)&gt;;</span><br><span class="line">priority_queue&lt;P, vector&lt;P&gt;, FUNC&gt; <span class="built_in">myqueue</span>(</span><br><span class="line">[](<span class="keyword">auto</span>&amp; a, <span class="keyword">auto</span>&amp; b)-&gt;<span class="type">bool</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; it != mymap.<span class="built_in">end</span>() &amp;&amp; k &lt; <span class="number">10</span>; k++, it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (it-&gt;second != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">myqueue.<span class="built_in">push</span>(*it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; it != mymap.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (it-&gt;second &lt; myqueue.<span class="built_in">top</span>().second &amp;&amp; it-&gt;second != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">myqueue.<span class="built_in">pop</span>();</span><br><span class="line">myqueue.<span class="built_in">push</span>(*it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!myqueue.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; myqueue.<span class="built_in">top</span>().first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; myqueue.<span class="built_in">top</span>().second &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">myqueue.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在一组数字中 ，找出重复次数最多的前10个(快速分割函数)</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec,<span class="type">int</span> i,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k = vec[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp;  vec[j] &lt; k)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">vec[i++] = vec[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp;  vec[i] &gt; k)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">vec[j--] = vec[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vec[i] = k;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;vec, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> pos = <span class="built_in">partition</span>(vec, i, j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos == k<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> vec[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pos &gt; k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(vec, i, pos - <span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(vec, pos + <span class="number">1</span>, j, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec2;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> val : vec)</span><br><span class="line">&#123;</span><br><span class="line">mymap[val]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = mymap.<span class="built_in">begin</span>(); it != mymap.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (it-&gt;second &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">vec1.<span class="built_in">push_back</span>(it-&gt;second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> result = <span class="built_in">sort</span>(vec1, <span class="number">0</span>, vec1.<span class="built_in">size</span>() - <span class="number">1</span>, i);</span><br><span class="line">cout &lt;&lt; result &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">vec2.<span class="built_in">push_back</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在一组数字中 ，找出重复次数最少的前10个(快速分割函数)</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec, <span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k = vec[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; vec[j] &gt;= k)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">vec[i++] = vec[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; vec[i] &lt; k)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">vec[j--] = vec[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vec[i] = k;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> pos = <span class="built_in">partition</span>(vec, i, j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos == k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> vec[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pos &gt; k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(vec, i, pos - <span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sort</span>(vec, pos + <span class="number">1</span>, j, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec2;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> val : vec)</span><br><span class="line">&#123;</span><br><span class="line">mymap[val]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = mymap.<span class="built_in">begin</span>(); it != mymap.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (it-&gt;second &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">vec1.<span class="built_in">push_back</span>(it-&gt;second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> result = <span class="built_in">sort</span>(vec1, <span class="number">0</span>, vec1.<span class="built_in">size</span>() - <span class="number">1</span>, i);</span><br><span class="line">cout &lt;&lt; result &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">vec2.<span class="built_in">push_back</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++标准11-14</title>
      <link href="/2022/07/29/C-%E6%A0%87%E5%87%8611-14/"/>
      <url>/2022/07/29/C-%E6%A0%87%E5%87%8611-14/</url>
      
        <content type="html"><![CDATA[<h1 id="第一讲-语言基础-C-x2F-C"><a href="#第一讲-语言基础-C-x2F-C" class="headerlink" title="第一讲 语言基础(C&#x2F;C++)"></a>第一讲 语言基础(C&#x2F;C++)</h1><h2 id="第一节-基础"><a href="#第一节-基础" class="headerlink" title="第一节 基础"></a>第一节 基础</h2><h3 id="1-1-头文件"><a href="#1-1-头文件" class="headerlink" title="1.1 头文件"></a>1.1 头文件</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C1.1.png"></p><p>（1）标准库都在std名称空间中，全名为std::+名字；</p><p>（2）旧版本就是#include&lt;stdio.h&gt;也可以兼容使用；</p><h3 id="1-2-测试是否支持并设置C-2-0-cplusplus"><a href="#1-2-测试是否支持并设置C-2-0-cplusplus" class="headerlink" title="1.2 测试是否支持并设置C++2.0,_cplusplus"></a>1.2 测试是否支持并设置C++2.0,_cplusplus</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C1.2.png"></p><h3 id="1-3-主要学习内容-C-2-0版本"><a href="#1-3-主要学习内容-C-2-0版本" class="headerlink" title="1.3 主要学习内容-C++2.0版本"></a>1.3 主要学习内容-C++2.0版本</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C1.3.png"></p><h2 id="第二节-Variadic-Templates可变参数模板（重量级改变）"><a href="#第二节-Variadic-Templates可变参数模板（重量级改变）" class="headerlink" title="第二节 Variadic Templates可变参数模板（重量级改变）"></a>第二节 Variadic Templates可变参数模板（重量级改变）</h2><h3 id="2-1-print-为例"><a href="#2-1-print-为例" class="headerlink" title="2.1 print()为例"></a>2.1 print()为例</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C2.1.png"></p><p>（1）const Type&amp;… <a href="https://so.csdn.net/so/search?q=args&spm=1001.2101.3001.7020">args</a>表明接收任意数量任意类型的参数；</p><p>（2）可以帮助我们做递归操作每次取出一个参数；做一个递归结束无参数的函数，终止递归；</p><p>（3）sizeof…(args)返回到底有多少个；</p><p>（4）2和3可以并存吗，是可以的！</p><h3 id="2-2-hash-function为例，依次分离出一个参数"><a href="#2-2-hash-function为例，依次分离出一个参数" class="headerlink" title="2.2 hash function为例，依次分离出一个参数"></a>2.2 hash function为例，依次分离出一个参数</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C2.2.png"></p><p>（1）先调用1，形成seed和一包数据，然后调用2（特化)，hash_combine将一包T融入seed变化，然后自己调用自己，再进行拆分，然后到3做为终止条件；每次调用自己的hash_val就是拆分出一个参数；</p><h3 id="2-3-tuple，多次继承为例"><a href="#2-3-tuple，多次继承为例" class="headerlink" title="2.3 tuple，多次继承为例"></a>2.3 tuple，多次继承为例</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C2.3.png"></p><p>（1）每次继承留下一个参数，继承其余一包数据；</p><h2 id="第三节-小改变集合"><a href="#第三节-小改变集合" class="headerlink" title="第三节 小改变集合"></a>第三节 小改变集合</h2><h3 id="3-1-Spaces-in-Template-Expressions模板表达式中的空格"><a href="#3-1-Spaces-in-Template-Expressions模板表达式中的空格" class="headerlink" title="3.1 Spaces in Template Expressions模板表达式中的空格"></a>3.1 Spaces in Template Expressions模板表达式中的空格</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C3.1.png"></p><h3 id="3-2-nullptr"><a href="#3-2-nullptr" class="headerlink" title="3.2 nullptr"></a>3.2 nullptr</h3><p>（1）用nullptr代替0和NULL；空指针；</p><p>（2）nullptr的类型是std::nullptr_t,定义在头文件中；</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C3.2.png"></p><h3 id="3-3-自动类型判断auto"><a href="#3-3-自动类型判断auto" class="headerlink" title="3.3 自动类型判断auto"></a>3.3 自动类型判断auto</h3><p>​(1) 之前auto就是局部变量的意思，但是现在auto表示自动类型判断；</p><p>​(2) 编译器本身就具备自己判断类型的能力；</p><p>​(3) auto关键字</p><p>​(4) 首先判断版本支持C++2.0；标准库本身也在使用auto；</p><p>​(5) 这里是reverse_iterator是迭代器适配器，利用到了迭代器萃取机进行提问回答difference_type的类型作为函数返回类型；</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C3.3.png"></p><h2 id="第四节-Uniform-Initialization一致性的初始化"><a href="#第四节-Uniform-Initialization一致性的初始化" class="headerlink" title="第四节 Uniform Initialization一致性的初始化"></a>第四节 Uniform Initialization一致性的初始化</h2><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C4.png"></p><p>​(1) 之前的初始化可能用到{},(),&#x3D;赋值；</p><p>​(2) 任意的初始化都可以统一用{}进行初始化，设置初值；</p><p>​(3) 因为编译器遇到{}时会自动生成一个initializer_list,其中T就是int，int,string,double这些，背后 其实是一个array&lt;T,n&gt;,n是元素个数，然后一个一个传给调用的函数（就是int values的构造函数），如果本身接受的就是initial_list,就不用一个一个赋值，直接整个传过去</p><h3 id="4-1-Initializer-list"><a href="#4-1-Initializer-list" class="headerlink" title="4.1 Initializer_list"></a>4.1 Initializer_list</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C4.1.png"></p><p>​(1) 不允许窄化转换；例如double转int是不被允许的;</p><h3 id="4-2-initializer-list的应用"><a href="#4-2-initializer-list的应用" class="headerlink" title="4.2 initializer_list的应用"></a>4.2 initializer_list的应用</h3><h4 id="4-2-1-例子1"><a href="#4-2-1-例子1" class="headerlink" title="4.2.1 例子1"></a>4.2.1 例子1</h4><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C4.2(1).png"></p><p>(1) 此处也是对应任意数量的参数，对应生成一个initializer_list，但是注意，这里的类型只能一致指定的int,因为其背后实现是一个array</p><p>数组；和tuple不同，tuple更加强大，任意数量任意类型；</p><p>(2) 这也是应用initializer_list&lt;&gt;的一个方法；</p><h4 id="4-2-2-例子2"><a href="#4-2-2-例子2" class="headerlink" title="4.2.2 例子2"></a>4.2.2 例子2</h4><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C4.2(2).png"></p><p>(1) 当是complex就调用版本1构造函数；</p><p>(2) 如果没有版本2，q,s还可以使用，因为会被拆解成两个参数，就可以调用版本1，r则不合法操作；</p><p>(3) 右侧是initailizer_list的源代码实现；其data是一个arary的迭代器（指向array的头部），size_type元素个数；编译器可以调用</p><p>initializer_list类private中的一个构造函数，（外部都不可以调用），在看到{}之后就会调用此处，（在调用这个隐私构造函数前，编译器</p><p>会提前创建一个array并把其头迭代器传入此函数参数中）</p><h4 id="4-2-3-array容器新增"><a href="#4-2-3-array容器新增" class="headerlink" title="4.2.3 array容器新增"></a>4.2.3 array容器新增</h4><p>(1) 就可以与STL对接，数组就变成一个容器了，因为算法只跟迭代器对接；</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C4.2(3).png"></p><h4 id="4-2-4-initializer-list-lt-gt-没有内含array"><a href="#4-2-4-initializer-list-lt-gt-没有内含array" class="headerlink" title="4.2.4 initializer_list&lt;&gt;没有内含array"></a>4.2.4 initializer_list&lt;&gt;没有内含array</h4><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C4.2(4).png"></p><p>(1)并没有内含着一个array容器，构造函数只是传入一个array迭代器；因此在拷贝的时候，还是相同的元素，传递的只是指针而已（浅拷</p><p>贝）；原来的一包和新的一包指向同一个array；</p><h4 id="4-2-5-initializer-list-lt-gt-在库中应用广泛，说明可以接收数量不定的参数"><a href="#4-2-5-initializer-list-lt-gt-在库中应用广泛，说明可以接收数量不定的参数" class="headerlink" title="4.2.5 initializer_list&lt;&gt;在库中应用广泛，说明可以接收数量不定的参数"></a>4.2.5 initializer_list&lt;&gt;在库中应用广泛，说明可以接收数量不定的参数</h4><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C4.2(5).png"></p><p>(1) 可看到insert传入了{0,1,2,3,4};</p><p>(2) max和min同时比较多个参数，返回其中最大&#x2F;最小的一个参数；</p><h2 id="第五节-explicit关键字—一个以上参数的构造函数"><a href="#第五节-explicit关键字—一个以上参数的构造函数" class="headerlink" title="第五节 explicit关键字—一个以上参数的构造函数"></a>第五节 explicit关键字—一个以上参数的构造函数</h2><h3 id="5-1-C-2-0之前的（只用于一个实参的防止隐式转换）"><a href="#5-1-C-2-0之前的（只用于一个实参的防止隐式转换）" class="headerlink" title="5.1 C++2.0之前的（只用于一个实参的防止隐式转换）"></a>5.1 C++2.0之前的（只用于一个实参的防止隐式转换）</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C5.1.png"></p><p>(1)关键字explicit用于构造函数，用于防止单参数构造函数的隐式转换；只有在明确调用单参数构造函数时，才使用；左侧就会发生隐式转换；</p><h3 id="5-2-C-2-0现在explicit也同样针对于多参数的构造函数的隐式转换"><a href="#5-2-C-2-0现在explicit也同样针对于多参数的构造函数的隐式转换" class="headerlink" title="5.2 C++2.0现在explicit也同样针对于多参数的构造函数的隐式转换"></a>5.2 C++2.0现在explicit也同样针对于多参数的构造函数的隐式转换</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C5.2.png"></p><h2 id="第六节-新特性"><a href="#第六节-新特性" class="headerlink" title="第六节 新特性"></a>第六节 新特性</h2><h3 id="6-1-for循环的一种特殊写法"><a href="#6-1-for循环的一种特殊写法" class="headerlink" title="6.1 for循环的一种特殊写法"></a>6.1 for循环的一种特殊写法</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C6.1.png"></p><p>(1) 之前for()有三段，现在只有两部分，左侧是声明，右侧放容器；</p><p>(2) 第一段是值赋值，如果是复数就是16字节的100万次搬动，下面是auto&amp;引用，因此就是4字节的100万次搬动；而且如果for循环要改变元素的值，一定要用引用，因为上面的只是拷贝到一个新地方，并不影响原来的元素；</p><p>(3) 关联式容器不允许用迭代器改变其元素；</p><h3 id="6-2-for循环的实现—遍历容器一个一个赋值"><a href="#6-2-for循环的实现—遍历容器一个一个赋值" class="headerlink" title="6.2 for循环的实现—遍历容器一个一个赋值"></a>6.2 for循环的实现—遍历容器一个一个赋值</h3><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C6.2(1).png"></p><p>(1) 其实是遍历右侧容器，并将其一个一个赋值到decl中；</p><p>(2) 两种调用，一个是容器的begin()，一个是全局函数begin(容器);</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C2-C++%E6%A0%87%E5%87%8611-14%5C6.2(2).png"></p><p>(3) 左侧C就不允许单参数的隐式转换，因此这种for就会报错；</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将博客推送至github</title>
      <link href="/2022/07/29/%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%8E%A8%E9%80%81%E8%87%B3github/"/>
      <url>/2022/07/29/%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%8E%A8%E9%80%81%E8%87%B3github/</url>
      
        <content type="html"><![CDATA[<h2 id="1-本地安装Hexo博客框架并推送到GitHub"><a href="#1-本地安装Hexo博客框架并推送到GitHub" class="headerlink" title="1 本地安装Hexo博客框架并推送到GitHub"></a>1 本地安装Hexo博客框架并推送到GitHub</h2><h3 id="1-1-将博客部署到-github-个人主页上"><a href="#1-1-将博客部署到-github-个人主页上" class="headerlink" title="1.1 将博客部署到 github 个人主页上"></a>1.1 将博客部署到 github 个人主页上</h3><p><strong>第一步：首先登录github，然后新建仓库</strong></p><p>注意：命名格式为：用户名.github.io</p><p><strong>第二步：进入F:\myblog安装一个git的部署部件</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p><strong>出现错误：</strong>cnpm安装过程中提示optional install error: Package require os(darwin) not compatible with your platform(win32)</p><p>运行cnpm install后，出现</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(1).png" alt="本地png图片PictureTest.png"></p><p><strong>解决方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm rebuild node-sass</span><br><span class="line">#不放心可以重新安装下</span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p><strong>第三步：在github上创建仓库</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C 你的邮箱地址</span><br></pre></td></tr></table></figure><p><strong>第四步：在GitHub 或者 Gitee 上添加 SSH key</strong></p><p>在F:myblog目录下安装 hexo-deployer-git 插件 （git bash here 处安装）</p><p><strong>在github点击头像-&gt;setting</strong></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(2).png" alt="本地png图片PictureTest.png"></p><p><strong>点击SSH and GPG keys</strong></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(3).png" alt="本地png图片PictureTest.png"></p><p><strong>点击New SSH key</strong></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(4).png" alt="本地png图片PictureTest.png"></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(5).png" alt="本地png图片PictureTest.png"></p><p><strong>第五步：测试本机本github密钥对是否建立有效连接：git命令ssh -T github.com，如下返回表示连接成功。</strong></p><p><strong>出现错误：</strong></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(6).png" alt="本地png图片PictureTest.png"></p><p><strong>解决方法：</strong>本机的这个git仓库并没有和这个SSH key 关联上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-add &quot;你的 id-rsa 文件地址&quot;</span><br></pre></td></tr></table></figure><p>执行ssh-add “你的 id-rsa 文件地址”出现<strong>Could not open a connection to your authentication agent</strong></p><p><strong>解决方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行如下命令　ssh-agent bash</span><br><span class="line">然后再执行 ssh-add ~/.ssh/id_ras 即可。</span><br></pre></td></tr></table></figure><p><strong>第六步： 修改配置文件_config.yml如下：</strong></p><p><strong>说明：</strong>仓库的ssh链接如下</p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(7).png" alt="本地png图片PictureTest.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: git@github.com:keaixiaowei/keaixiaowei.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p><strong>SSH链接</strong></p><p><strong>切记：分支branch切记修改为 main，之前github的默认主分支为master，现已经改为main</strong> ！！！</p><p><strong>第七步：接着hexo clean|hexo g|hexo d就可以远端部署到github上面去啦</strong></p><p><strong>第八步：使用仓库名+.github.io来访问博客主页面。keaixiaowei.github.io</strong></p><p><img src="/img%5C%E5%9B%BE%E7%89%87%5C8%5C1-01(8).png" alt="本地png图片PictureTest.png"></p>]]></content>
      
      
      <categories>
          
          <category> hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/2022/07/28/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/07/28/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/28/hello-world/"/>
      <url>/2022/07/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
